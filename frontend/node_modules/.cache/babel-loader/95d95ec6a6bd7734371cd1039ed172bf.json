{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @class Paginator\n * @classdesc Pagination helper class.\n *\n * @property {Array} items Array of elements on current page.\n * @property {Boolean} hasNextPage Indicates the existence of next page.\n * @property {Boolean} hasPrevPage Indicates the existence of previous page.\n */\n\nclass Paginator {\n  /*\n  * @constructor\n  * @param {Array} items Array of element for current page.\n  * @param {Object} params\n  * @private\n  */\n  constructor(items, source, prevToken, nextToken) {\n    this.prevToken = prevToken;\n    this.nextToken = nextToken;\n    this.items = items;\n    this.source = source;\n  }\n\n  get hasNextPage() {\n    return !!this.nextToken;\n  }\n\n  get hasPrevPage() {\n    return !!this.prevToken;\n  }\n  /**\n   * Request next page.\n   * Does not modify existing object.\n   * @return {Promise<Paginator>}\n   */\n\n\n  async nextPage() {\n    if (!this.hasNextPage) {\n      throw new Error('No next page');\n    }\n\n    return this.source(this.nextToken);\n  }\n  /**\n   * Request previous page.\n   * Does not modify existing object.\n   * @return {Promise<Paginator>}\n   */\n\n\n  async prevPage() {\n    if (!this.hasPrevPage) {\n      throw new Error('No previous page');\n    }\n\n    return this.source(this.prevToken);\n  }\n\n}\n\nexports.Paginator = Paginator;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-sync/lib/paginator.js"],"names":["Object","defineProperty","exports","value","Paginator","constructor","items","source","prevToken","nextToken","hasNextPage","hasPrevPage","nextPage","Error","prevPage"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;;;AAQA,MAAMC,SAAN,CAAgB;AACZ;;;;;;AAMAC,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAsC;AAC7C,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACD,MAAIG,WAAJ,GAAkB;AACd,WAAO,CAAC,CAAC,KAAKD,SAAd;AACH;;AACD,MAAIE,WAAJ,GAAkB;AACd,WAAO,CAAC,CAAC,KAAKH,SAAd;AACH;AACD;;;;;;;AAKA,QAAMI,QAAN,GAAiB;AACb,QAAI,CAAC,KAAKF,WAAV,EAAuB;AACnB,YAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACH;;AACD,WAAO,KAAKN,MAAL,CAAY,KAAKE,SAAjB,CAAP;AACH;AACD;;;;;;;AAKA,QAAMK,QAAN,GAAiB;AACb,QAAI,CAAC,KAAKH,WAAV,EAAuB;AACnB,YAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACH;;AACD,WAAO,KAAKN,MAAL,CAAY,KAAKC,SAAjB,CAAP;AACH;;AAxCW;;AA0ChBN,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @class Paginator\n * @classdesc Pagination helper class.\n *\n * @property {Array} items Array of elements on current page.\n * @property {Boolean} hasNextPage Indicates the existence of next page.\n * @property {Boolean} hasPrevPage Indicates the existence of previous page.\n */\nclass Paginator {\n    /*\n    * @constructor\n    * @param {Array} items Array of element for current page.\n    * @param {Object} params\n    * @private\n    */\n    constructor(items, source, prevToken, nextToken) {\n        this.prevToken = prevToken;\n        this.nextToken = nextToken;\n        this.items = items;\n        this.source = source;\n    }\n    get hasNextPage() {\n        return !!this.nextToken;\n    }\n    get hasPrevPage() {\n        return !!this.prevToken;\n    }\n    /**\n     * Request next page.\n     * Does not modify existing object.\n     * @return {Promise<Paginator>}\n     */\n    async nextPage() {\n        if (!this.hasNextPage) {\n            throw new Error('No next page');\n        }\n        return this.source(this.nextToken);\n    }\n    /**\n     * Request previous page.\n     * Does not modify existing object.\n     * @return {Promise<Paginator>}\n     */\n    async prevPage() {\n        if (!this.hasPrevPage) {\n            throw new Error('No previous page');\n        }\n        return this.source(this.prevToken);\n    }\n}\nexports.Paginator = Paginator;\n"]},"metadata":{},"sourceType":"script"}