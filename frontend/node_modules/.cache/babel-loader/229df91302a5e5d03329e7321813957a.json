{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar _require = require('../../util/constants'),\n    ICE_ACTIVITY_CHECK_PERIOD_MS = _require.ICE_ACTIVITY_CHECK_PERIOD_MS,\n    ICE_INACTIVITY_THRESHOLD_MS = _require.ICE_INACTIVITY_THRESHOLD_MS;\n/**\n * Monitors a {@link RTCPeerConnection}'s stats and notifies\n * caller when inactivity is detected.\n */\n\n\nvar IceConnectionMonitor = function () {\n  /**\n   * Construct an {@link IceConnectionMonitor}.\n   * @param {RTCPeerConnection} peerConnection\n   * @param {object} [options]\n   */\n  function IceConnectionMonitor(peerConnection, options) {\n    _classCallCheck(this, IceConnectionMonitor);\n\n    options = Object.assign({\n      activityCheckPeriodMs: ICE_ACTIVITY_CHECK_PERIOD_MS,\n      inactivityThresholdMs: ICE_INACTIVITY_THRESHOLD_MS\n    }, options);\n    Object.defineProperties(this, {\n      _activityCheckPeriodMs: {\n        value: options.activityCheckPeriodMs\n      },\n      _inactivityThresholdMs: {\n        value: options.inactivityThresholdMs\n      },\n      _lastActiveStats: {\n        value: null,\n        writable: true\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _timer: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Get ICE connection stats, and extract received and send bytes.\n   * @returns Promise<?RTCIceCandidatePairStats>\n   */\n\n\n  _createClass(IceConnectionMonitor, [{\n    key: '_getIceConnectionStats',\n    value: function _getIceConnectionStats() {\n      return this._peerConnection.getStats().then(function (stats) {\n        return Array.from(stats.values()).find(function (stat) {\n          return stat.type === 'candidate-pair' && stat.nominated;\n        });\n      }).then(function (activePairStat) {\n        // NOTE(mpatwardhan): sometimes (JSDK-2667) after getting disconnected while switching network\n        // we may not find active pair. Treat this as 0 bytesReceived so that we count it towards inactivity.\n        return activePairStat || {\n          bytesReceived: 0,\n          timestamp: Math.round(new Date().getTime())\n        };\n      }).catch(function () {\n        return null;\n      });\n    }\n    /**\n     * Start monitoring the ICE connection.\n     * Monitors bytes received on active ice connection pair,\n     * invokes onIceConnectionInactive when inactivity is detected.\n     * @param {function} onIceConnectionInactive\n     */\n\n  }, {\n    key: 'start',\n    value: function start(onIceConnectionInactive) {\n      var _this = this;\n\n      this.stop();\n      this._timer = setInterval(function () {\n        _this._getIceConnectionStats().then(function (iceStats) {\n          if (!iceStats) {\n            return;\n          }\n\n          if (!_this._lastActivity || _this._lastActivity.bytesReceived !== iceStats.bytesReceived) {\n            _this._lastActivity = iceStats;\n          }\n\n          if (iceStats.timestamp - _this._lastActivity.timestamp >= _this._inactivityThresholdMs) {\n            onIceConnectionInactive();\n          }\n        });\n      }, this._activityCheckPeriodMs);\n    }\n    /**\n     * Stop monitoring the ICE connection state.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (this._timer !== null) {\n        clearInterval(this._timer);\n        this._timer = null;\n        this._lastActivity = null;\n      }\n    }\n  }]);\n\n  return IceConnectionMonitor;\n}();\n\nmodule.exports = IceConnectionMonitor;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/signaling/v2/iceconnectionmonitor.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_require","require","ICE_ACTIVITY_CHECK_PERIOD_MS","ICE_INACTIVITY_THRESHOLD_MS","IceConnectionMonitor","peerConnection","options","assign","activityCheckPeriodMs","inactivityThresholdMs","_activityCheckPeriodMs","value","_inactivityThresholdMs","_lastActiveStats","_peerConnection","_timer","_getIceConnectionStats","getStats","then","stats","Array","from","values","find","stat","type","nominated","activePairStat","bytesReceived","timestamp","Math","round","Date","getTime","catch","start","onIceConnectionInactive","_this","stop","setInterval","iceStats","_lastActivity","clearInterval","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = require('../../util/constants'),\n    ICE_ACTIVITY_CHECK_PERIOD_MS = _require.ICE_ACTIVITY_CHECK_PERIOD_MS,\n    ICE_INACTIVITY_THRESHOLD_MS = _require.ICE_INACTIVITY_THRESHOLD_MS;\n\n/**\n * Monitors a {@link RTCPeerConnection}'s stats and notifies\n * caller when inactivity is detected.\n */\n\n\nvar IceConnectionMonitor = function () {\n  /**\n   * Construct an {@link IceConnectionMonitor}.\n   * @param {RTCPeerConnection} peerConnection\n   * @param {object} [options]\n   */\n  function IceConnectionMonitor(peerConnection, options) {\n    _classCallCheck(this, IceConnectionMonitor);\n\n    options = Object.assign({\n      activityCheckPeriodMs: ICE_ACTIVITY_CHECK_PERIOD_MS,\n      inactivityThresholdMs: ICE_INACTIVITY_THRESHOLD_MS\n    }, options);\n\n    Object.defineProperties(this, {\n      _activityCheckPeriodMs: {\n        value: options.activityCheckPeriodMs\n      },\n      _inactivityThresholdMs: {\n        value: options.inactivityThresholdMs\n      },\n      _lastActiveStats: {\n        value: null,\n        writable: true\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _timer: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Get ICE connection stats, and extract received and send bytes.\n   * @returns Promise<?RTCIceCandidatePairStats>\n   */\n\n\n  _createClass(IceConnectionMonitor, [{\n    key: '_getIceConnectionStats',\n    value: function _getIceConnectionStats() {\n      return this._peerConnection.getStats().then(function (stats) {\n        return Array.from(stats.values()).find(function (stat) {\n          return stat.type === 'candidate-pair' && stat.nominated;\n        });\n      }).then(function (activePairStat) {\n        // NOTE(mpatwardhan): sometimes (JSDK-2667) after getting disconnected while switching network\n        // we may not find active pair. Treat this as 0 bytesReceived so that we count it towards inactivity.\n        return activePairStat || {\n          bytesReceived: 0,\n          timestamp: Math.round(new Date().getTime())\n        };\n      }).catch(function () {\n        return null;\n      });\n    }\n\n    /**\n     * Start monitoring the ICE connection.\n     * Monitors bytes received on active ice connection pair,\n     * invokes onIceConnectionInactive when inactivity is detected.\n     * @param {function} onIceConnectionInactive\n     */\n\n  }, {\n    key: 'start',\n    value: function start(onIceConnectionInactive) {\n      var _this = this;\n\n      this.stop();\n      this._timer = setInterval(function () {\n        _this._getIceConnectionStats().then(function (iceStats) {\n          if (!iceStats) {\n            return;\n          }\n\n          if (!_this._lastActivity || _this._lastActivity.bytesReceived !== iceStats.bytesReceived) {\n            _this._lastActivity = iceStats;\n          }\n\n          if (iceStats.timestamp - _this._lastActivity.timestamp >= _this._inactivityThresholdMs) {\n            onIceConnectionInactive();\n          }\n        });\n      }, this._activityCheckPeriodMs);\n    }\n\n    /**\n     * Stop monitoring the ICE connection state.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (this._timer !== null) {\n        clearInterval(this._timer);\n        this._timer = null;\n        this._lastActivity = null;\n      }\n    }\n  }]);\n\n  return IceConnectionMonitor;\n}();\n\nmodule.exports = IceConnectionMonitor;"]},"metadata":{},"sourceType":"script"}