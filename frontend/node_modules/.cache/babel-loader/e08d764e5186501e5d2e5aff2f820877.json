{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar getMediaSections = require('../').getMediaSections;\n/**\n * An {@link MIDTrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\n\n\nvar MIDTrackMatcher = function () {\n  /**\n   * Construct an {@link MIDTrackMatcher}.\n   */\n  function MIDTrackMatcher() {\n    _classCallCheck(this, MIDTrackMatcher);\n\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n\n\n  _createClass(MIDTrackMatcher, [{\n    key: 'match',\n    value: function match(event) {\n      return this._midsToTrackIds.get(event.transceiver.mid) || null;\n    }\n    /**\n     * Update the {@link MIDTrackMatcher} with a new SDP.\n     * @param {string} sdp\n     */\n\n  }, {\n    key: 'update',\n    value: function update(sdp) {\n      var sections = getMediaSections(sdp, '(audio|video)');\n      this._midsToTrackIds = sections.reduce(function (midsToTrackIds, section) {\n        var midMatches = section.match(/^a=mid:(.+)$/m) || [];\n        var trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n        var mid = midMatches[1];\n        var trackId = trackIdMatches[1];\n        return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n      }, this._midsToTrackIds);\n    }\n  }]);\n\n  return MIDTrackMatcher;\n}();\n\nmodule.exports = MIDTrackMatcher;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/util/sdp/trackmatcher/mid.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","getMediaSections","require","MIDTrackMatcher","_midsToTrackIds","value","Map","match","event","get","transceiver","mid","update","sdp","sections","reduce","midsToTrackIds","section","midMatches","trackIdMatches","trackId","set","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar getMediaSections = require('../').getMediaSections;\n\n/**\n * An {@link MIDTrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\n\nvar MIDTrackMatcher = function () {\n  /**\n   * Construct an {@link MIDTrackMatcher}.\n   */\n  function MIDTrackMatcher() {\n    _classCallCheck(this, MIDTrackMatcher);\n\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n\n\n  _createClass(MIDTrackMatcher, [{\n    key: 'match',\n    value: function match(event) {\n      return this._midsToTrackIds.get(event.transceiver.mid) || null;\n    }\n\n    /**\n     * Update the {@link MIDTrackMatcher} with a new SDP.\n     * @param {string} sdp\n     */\n\n  }, {\n    key: 'update',\n    value: function update(sdp) {\n      var sections = getMediaSections(sdp, '(audio|video)');\n      this._midsToTrackIds = sections.reduce(function (midsToTrackIds, section) {\n        var midMatches = section.match(/^a=mid:(.+)$/m) || [];\n        var trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n        var mid = midMatches[1];\n        var trackId = trackIdMatches[1];\n        return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n      }, this._midsToTrackIds);\n    }\n  }]);\n\n  return MIDTrackMatcher;\n}();\n\nmodule.exports = MIDTrackMatcher;"]},"metadata":{},"sourceType":"script"}