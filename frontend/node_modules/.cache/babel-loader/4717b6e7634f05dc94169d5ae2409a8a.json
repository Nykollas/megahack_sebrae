{"ast":null,"code":"/* eslint new-cap:0, no-console:0 */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar constants = require('./constants');\n\nvar DEFAULT_LOG_LEVEL = constants.DEFAULT_LOG_LEVEL;\n\nvar E = require('./constants').typeErrors;\n\nvar deprecationWarningsByComponentConstructor = void 0;\n\nfunction getDeprecationWarnings(componentConstructor) {\n  deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n\n  if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n    return deprecationWarningsByComponentConstructor.get(componentConstructor);\n  }\n\n  var deprecationWarnings = new Set();\n  deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n  return deprecationWarnings;\n}\n/**\n * Selectively outputs messages to console.log based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\n\n\nvar Log = function () {\n  /**\n   * Construct a new {@link Log} object.\n   * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n   * @param {object} component - Component owning this instance of {@link Log}\n   * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n   */\n  function Log(moduleName, component, logLevels) {\n    _classCallCheck(this, Log);\n\n    if (typeof moduleName !== 'string') {\n      throw E.INVALID_TYPE('moduleName', 'string');\n    }\n\n    if (!component) {\n      throw E.REQUIRED_ARGUMENT('component');\n    }\n\n    if ((typeof logLevels === 'undefined' ? 'undefined' : _typeof(logLevels)) !== 'object') {\n      logLevels = {};\n    }\n\n    validateLogLevels(logLevels);\n    /* istanbul ignore next */\n\n    Object.defineProperties(this, {\n      _component: {\n        value: component\n      },\n      _logLevels: {\n        value: logLevels\n      },\n      _warnings: {\n        value: new Set()\n      },\n      logLevel: {\n        get: function get() {\n          return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n        }\n      },\n      name: {\n        get: component.toString.bind(component)\n      }\n    });\n  }\n  /**\n   * Get the log level (number) by its name (string)\n   * @param {String} name - Name of the log level\n   * @returns {Number} Requested log level\n   * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n   * @public\n   */\n\n\n  _createClass(Log, [{\n    key: 'createLog',\n\n    /**\n     * Create a child {@link Log} instance with this._logLevels\n     * @param moduleName - Name of the logging module\n     * @param component - Component owning this instance of {@link Log}\n     * @returns {Log} this\n     */\n    value: function createLog(moduleName, component) {\n      return new Log(moduleName, component, this._logLevels);\n    }\n    /**\n     * Set new log levels.\n     * This changes the levels for all its ancestors,\n     * siblings, and children and descendants instances of {@link Log}.\n     * @param {LogLevels} levels - New log levels\n     * @throws {TwilioError} INVALID_ARGUMENT\n     * @returns {Log} this\n     */\n\n  }, {\n    key: 'setLevels',\n    value: function setLevels(levels) {\n      validateLogLevels(levels);\n      Object.assign(this._logLevels, levels);\n      return this;\n    }\n    /**\n     * Log a message using the console method appropriate for the specified logLevel\n     * @param {Number} logLevel - Log level of the message being logged\n     * @param {String} message - Message(s) to log\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'log',\n    value: function log(logLevel, message) {\n      var logSpec = Log._levels[logLevel]; // eslint-disable-next-line no-use-before-define\n\n      if (!logSpec) {\n        throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES);\n      }\n\n      if (this.logLevel <= logLevel) {\n        var levelName = logSpec.name;\n        var prefix = new Date().toISOString().split('T').concat(['|', levelName, 'in', this.name + ':']);\n        logSpec.logFn.apply(console, prefix.concat(message));\n      }\n\n      return this;\n    }\n    /**\n     * Log a debug message using console.log\n     * @param {...String} messages - Message(s) to pass to console.log\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'debug',\n    value: function debug() {\n      return this.log(Log.DEBUG, [].slice.call(arguments));\n    }\n    /**\n     * Log a deprecation warning. Deprecation warnings are logged as warnings and\n     * they are only ever logged once.\n     * @param {String} deprecationWarning - The deprecation warning\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'deprecated',\n    value: function deprecated(deprecationWarning) {\n      var deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n\n      if (deprecationWarnings.has(deprecationWarning)) {\n        return this;\n      }\n\n      deprecationWarnings.add(deprecationWarning);\n      return this.warn(deprecationWarning);\n    }\n    /**\n     * Log an info message using console.info\n     * @param {...String} messages - Message(s) to pass to console.info\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'info',\n    value: function info() {\n      return this.log(Log.INFO, [].slice.call(arguments));\n    }\n    /**\n     * Log a warn message using console.warn\n     * @param {...String} messages - Message(s) to pass to console.warn\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'warn',\n    value: function warn() {\n      return this.log(Log.WARN, [].slice.call(arguments));\n    }\n    /**\n     * Log a warning once.\n     * @param {String} warning\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'warnOnce',\n    value: function warnOnce(warning) {\n      if (this._warnings.has(warning)) {\n        return this;\n      }\n\n      this._warnings.add(warning);\n\n      return this.warn(warning);\n    }\n    /**\n     * Log an error message using console.error\n     * @param {...String} messages - Message(s) to pass to console.error\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'error',\n    value: function error() {\n      return this.log(Log.ERROR, [].slice.call(arguments));\n    }\n    /**\n     * Log an error message using console.error and throw an exception\n     * @param {TwilioError} error - Error to throw\n     * @param {String} customMessage - Custom message for the error\n     * @public\n     */\n\n  }, {\n    key: 'throw',\n    value: function _throw(error, customMessage) {\n      if (error.clone) {\n        error = error.clone(customMessage);\n      }\n\n      this.log(Log.ERROR, error);\n      throw error;\n    }\n  }], [{\n    key: 'getLevelByName',\n    value: function getLevelByName(name) {\n      if (!isNaN(name)) {\n        return parseInt(name, 10);\n      }\n\n      name = name.toUpperCase();\n      validateLogLevel(name);\n      return Log[name];\n    }\n  }]);\n\n  return Log;\n}(); // Singleton Constants\n\n/* eslint key-spacing:0 */\n\n/* istanbul ignore next */\n\n\nObject.defineProperties(Log, {\n  DEBUG: {\n    value: 0\n  },\n  INFO: {\n    value: 1\n  },\n  WARN: {\n    value: 2\n  },\n  ERROR: {\n    value: 3\n  },\n  OFF: {\n    value: 4\n  },\n  _levels: {\n    value: [{\n      name: 'DEBUG',\n      logFn: console.log\n    }, {\n      name: 'INFO',\n      logFn: console.info\n    }, {\n      name: 'WARN',\n      logFn: console.warn\n    }, {\n      name: 'ERROR',\n      logFn: console.error\n    }, {\n      name: 'OFF',\n      logFn: function noop() {}\n    }]\n  }\n});\nvar LOG_LEVELS_SET = {};\nvar LOG_LEVEL_VALUES = [];\n\nvar LOG_LEVEL_NAMES = Log._levels.map(function (level, i) {\n  LOG_LEVELS_SET[level.name] = true;\n  LOG_LEVEL_VALUES.push(i);\n  return level.name;\n});\n\nfunction validateLogLevel(level) {\n  if (!(level in LOG_LEVELS_SET)) {\n    throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n  }\n}\n\nfunction validateLogLevels(levels) {\n  Object.keys(levels).forEach(function (moduleName) {\n    validateLogLevel(levels[moduleName].toUpperCase());\n  });\n}\n\nmodule.exports = Log;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/util/log.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","constants","require","DEFAULT_LOG_LEVEL","E","typeErrors","deprecationWarningsByComponentConstructor","getDeprecationWarnings","componentConstructor","Map","has","get","deprecationWarnings","Set","set","Log","moduleName","component","logLevels","INVALID_TYPE","REQUIRED_ARGUMENT","validateLogLevels","_component","value","_logLevels","_warnings","logLevel","getLevelByName","name","toString","bind","createLog","setLevels","levels","assign","log","message","logSpec","_levels","INVALID_VALUE","LOG_LEVEL_VALUES","levelName","prefix","Date","toISOString","split","concat","logFn","apply","console","debug","DEBUG","slice","call","arguments","deprecated","deprecationWarning","add","warn","info","INFO","WARN","warnOnce","warning","error","ERROR","_throw","customMessage","clone","isNaN","parseInt","toUpperCase","validateLogLevel","OFF","noop","LOG_LEVELS_SET","LOG_LEVEL_NAMES","map","level","push","keys","forEach","module","exports"],"mappings":"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","sourcesContent":["/* eslint new-cap:0, no-console:0 */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar constants = require('./constants');\nvar DEFAULT_LOG_LEVEL = constants.DEFAULT_LOG_LEVEL;\nvar E = require('./constants').typeErrors;\n\nvar deprecationWarningsByComponentConstructor = void 0;\n\nfunction getDeprecationWarnings(componentConstructor) {\n  deprecationWarningsByComponentConstructor = deprecationWarningsByComponentConstructor || new Map();\n  if (deprecationWarningsByComponentConstructor.has(componentConstructor)) {\n    return deprecationWarningsByComponentConstructor.get(componentConstructor);\n  }\n  var deprecationWarnings = new Set();\n  deprecationWarningsByComponentConstructor.set(componentConstructor, deprecationWarnings);\n  return deprecationWarnings;\n}\n\n/**\n * Selectively outputs messages to console.log based on specified minimum module\n * specific log levels.\n *\n * NOTE: The values in the logLevels object passed to the constructor is changed\n *       by subsequent calls to {@link Log#setLevels}.\n */\n\nvar Log = function () {\n  /**\n   * Construct a new {@link Log} object.\n   * @param {String} moduleName - Name of the logging module (webrtc/media/signaling)\n   * @param {object} component - Component owning this instance of {@link Log}\n   * @param {LogLevels} logLevels - Logging levels. See {@link LogLevels}\n   */\n  function Log(moduleName, component, logLevels) {\n    _classCallCheck(this, Log);\n\n    if (typeof moduleName !== 'string') {\n      throw E.INVALID_TYPE('moduleName', 'string');\n    }\n\n    if (!component) {\n      throw E.REQUIRED_ARGUMENT('component');\n    }\n\n    if ((typeof logLevels === 'undefined' ? 'undefined' : _typeof(logLevels)) !== 'object') {\n      logLevels = {};\n    }\n\n    validateLogLevels(logLevels);\n\n    /* istanbul ignore next */\n    Object.defineProperties(this, {\n      _component: {\n        value: component\n      },\n      _logLevels: {\n        value: logLevels\n      },\n      _warnings: {\n        value: new Set()\n      },\n      logLevel: {\n        get: function get() {\n          return Log.getLevelByName(logLevels[moduleName] || DEFAULT_LOG_LEVEL);\n        }\n      },\n      name: { get: component.toString.bind(component) }\n    });\n  }\n\n  /**\n   * Get the log level (number) by its name (string)\n   * @param {String} name - Name of the log level\n   * @returns {Number} Requested log level\n   * @throws {TwilioError} INVALID_LOG_LEVEL (32056)\n   * @public\n   */\n\n\n  _createClass(Log, [{\n    key: 'createLog',\n\n\n    /**\n     * Create a child {@link Log} instance with this._logLevels\n     * @param moduleName - Name of the logging module\n     * @param component - Component owning this instance of {@link Log}\n     * @returns {Log} this\n     */\n    value: function createLog(moduleName, component) {\n      return new Log(moduleName, component, this._logLevels);\n    }\n\n    /**\n     * Set new log levels.\n     * This changes the levels for all its ancestors,\n     * siblings, and children and descendants instances of {@link Log}.\n     * @param {LogLevels} levels - New log levels\n     * @throws {TwilioError} INVALID_ARGUMENT\n     * @returns {Log} this\n     */\n\n  }, {\n    key: 'setLevels',\n    value: function setLevels(levels) {\n      validateLogLevels(levels);\n      Object.assign(this._logLevels, levels);\n      return this;\n    }\n\n    /**\n     * Log a message using the console method appropriate for the specified logLevel\n     * @param {Number} logLevel - Log level of the message being logged\n     * @param {String} message - Message(s) to log\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'log',\n    value: function log(logLevel, message) {\n      var logSpec = Log._levels[logLevel];\n      // eslint-disable-next-line no-use-before-define\n      if (!logSpec) {\n        throw E.INVALID_VALUE('logLevel', LOG_LEVEL_VALUES);\n      }\n\n      if (this.logLevel <= logLevel) {\n        var levelName = logSpec.name;\n        var prefix = new Date().toISOString().split('T').concat(['|', levelName, 'in', this.name + ':']);\n        logSpec.logFn.apply(console, prefix.concat(message));\n      }\n\n      return this;\n    }\n\n    /**\n     * Log a debug message using console.log\n     * @param {...String} messages - Message(s) to pass to console.log\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'debug',\n    value: function debug() {\n      return this.log(Log.DEBUG, [].slice.call(arguments));\n    }\n\n    /**\n     * Log a deprecation warning. Deprecation warnings are logged as warnings and\n     * they are only ever logged once.\n     * @param {String} deprecationWarning - The deprecation warning\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'deprecated',\n    value: function deprecated(deprecationWarning) {\n      var deprecationWarnings = getDeprecationWarnings(this._component.constructor);\n      if (deprecationWarnings.has(deprecationWarning)) {\n        return this;\n      }\n      deprecationWarnings.add(deprecationWarning);\n      return this.warn(deprecationWarning);\n    }\n\n    /**\n     * Log an info message using console.info\n     * @param {...String} messages - Message(s) to pass to console.info\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'info',\n    value: function info() {\n      return this.log(Log.INFO, [].slice.call(arguments));\n    }\n\n    /**\n     * Log a warn message using console.warn\n     * @param {...String} messages - Message(s) to pass to console.warn\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'warn',\n    value: function warn() {\n      return this.log(Log.WARN, [].slice.call(arguments));\n    }\n\n    /**\n     * Log a warning once.\n     * @param {String} warning\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'warnOnce',\n    value: function warnOnce(warning) {\n      if (this._warnings.has(warning)) {\n        return this;\n      }\n      this._warnings.add(warning);\n      return this.warn(warning);\n    }\n\n    /**\n     * Log an error message using console.error\n     * @param {...String} messages - Message(s) to pass to console.error\n     * @returns {Log} This instance of {@link Log}\n     * @public\n     */\n\n  }, {\n    key: 'error',\n    value: function error() {\n      return this.log(Log.ERROR, [].slice.call(arguments));\n    }\n\n    /**\n     * Log an error message using console.error and throw an exception\n     * @param {TwilioError} error - Error to throw\n     * @param {String} customMessage - Custom message for the error\n     * @public\n     */\n\n  }, {\n    key: 'throw',\n    value: function _throw(error, customMessage) {\n      if (error.clone) {\n        error = error.clone(customMessage);\n      }\n\n      this.log(Log.ERROR, error);\n      throw error;\n    }\n  }], [{\n    key: 'getLevelByName',\n    value: function getLevelByName(name) {\n      if (!isNaN(name)) {\n        return parseInt(name, 10);\n      }\n      name = name.toUpperCase();\n      validateLogLevel(name);\n      return Log[name];\n    }\n  }]);\n\n  return Log;\n}();\n\n// Singleton Constants\n/* eslint key-spacing:0 */\n/* istanbul ignore next */\n\n\nObject.defineProperties(Log, {\n  DEBUG: { value: 0 },\n  INFO: { value: 1 },\n  WARN: { value: 2 },\n  ERROR: { value: 3 },\n  OFF: { value: 4 },\n  _levels: {\n    value: [{ name: 'DEBUG', logFn: console.log }, { name: 'INFO', logFn: console.info }, { name: 'WARN', logFn: console.warn }, { name: 'ERROR', logFn: console.error }, { name: 'OFF', logFn: function noop() {} }]\n  }\n});\n\nvar LOG_LEVELS_SET = {};\nvar LOG_LEVEL_VALUES = [];\n\nvar LOG_LEVEL_NAMES = Log._levels.map(function (level, i) {\n  LOG_LEVELS_SET[level.name] = true;\n  LOG_LEVEL_VALUES.push(i);\n  return level.name;\n});\n\nfunction validateLogLevel(level) {\n  if (!(level in LOG_LEVELS_SET)) {\n    throw E.INVALID_VALUE('level', LOG_LEVEL_NAMES);\n  }\n}\n\nfunction validateLogLevels(levels) {\n  Object.keys(levels).forEach(function (moduleName) {\n    validateLogLevel(levels[moduleName].toUpperCase());\n  });\n}\n\nmodule.exports = Log;"]},"metadata":{},"sourceType":"script"}