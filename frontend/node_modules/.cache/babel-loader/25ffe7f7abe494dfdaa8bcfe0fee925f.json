{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst logger_1 = require(\"../logger\");\n\nconst events_1 = require(\"events\");\n\nconst uuid_1 = require(\"uuid\");\n\nconst twilsockerror_1 = require(\"../error/twilsockerror\");\n/**\n * Registrations module handles all operations with registration contexts through twilsock\n * Main role: it automatically refreshes all registrations after reconnect.\n */\n\n\nclass Registrations extends events_1.EventEmitter {\n  constructor(transport) {\n    super();\n    this.transport = transport;\n    this.registrations = new Map();\n    this.registrationsInProgress = new Map();\n  }\n\n  async putNotificationContext(contextId, context) {\n    const header = {\n      method: 'put_notification_ctx',\n      notification_ctx_id: contextId\n    };\n    let reply = await this.transport.sendWithReply(header, context);\n  }\n\n  async deleteNotificationContext(contextId) {\n    let message = {\n      method: 'delete_notification_ctx',\n      notification_ctx_id: contextId\n    };\n    let reply = await this.transport.sendWithReply(message);\n  }\n\n  async updateRegistration(contextId, context) {\n    logger_1.log.debug('update registration for context', contextId);\n    let registrationAttempts = this.registrationsInProgress.get(contextId);\n\n    if (!registrationAttempts) {\n      registrationAttempts = new Set();\n      this.registrationsInProgress.set(contextId, registrationAttempts);\n    }\n\n    const attemptId = uuid_1.v4();\n    registrationAttempts.add(attemptId);\n\n    try {\n      await this.putNotificationContext(contextId, context);\n      logger_1.log.debug('registration attempt succeeded for context', context);\n      registrationAttempts.delete(attemptId);\n\n      if (registrationAttempts.size === 0) {\n        this.registrationsInProgress.delete(contextId);\n        this.emit('registered', contextId);\n      }\n    } catch (err) {\n      logger_1.log.warn('registration attempt failed for context', context);\n      logger_1.log.debug(err);\n      registrationAttempts.delete(attemptId);\n\n      if (registrationAttempts.size === 0) {\n        this.registrationsInProgress.delete(contextId);\n        this.emit('registrationFailed', contextId, err);\n      }\n    }\n  }\n\n  updateRegistrations() {\n    logger_1.log.trace(`refreshing ${this.registrations.size} registrations`);\n    this.registrations.forEach((context, id) => {\n      this.updateRegistration(id, context);\n    });\n  }\n\n  setNotificationsContext(contextId, context) {\n    if (!contextId || !context) {\n      throw new twilsockerror_1.TwilsockError('Invalid arguments provided');\n    }\n\n    this.registrations.set(contextId, context);\n\n    if (this.transport.isConnected) {\n      this.updateRegistration(contextId, context);\n    }\n  }\n\n  async removeNotificationsContext(contextId) {\n    if (!this.registrations.has(contextId)) {\n      return;\n    }\n\n    await this.deleteNotificationContext(contextId);\n\n    if (this.transport.isConnected) {\n      this.registrations.delete(contextId);\n    }\n  }\n\n}\n\nexports.Registrations = Registrations;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilsock/lib/services/registrations.js"],"names":["Object","defineProperty","exports","value","logger_1","require","events_1","uuid_1","twilsockerror_1","Registrations","EventEmitter","constructor","transport","registrations","Map","registrationsInProgress","putNotificationContext","contextId","context","header","method","notification_ctx_id","reply","sendWithReply","deleteNotificationContext","message","updateRegistration","log","debug","registrationAttempts","get","Set","set","attemptId","v4","add","delete","size","emit","err","warn","updateRegistrations","trace","forEach","id","setNotificationsContext","TwilsockError","isConnected","removeNotificationsContext","has"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"../logger\");\nconst events_1 = require(\"events\");\nconst uuid_1 = require(\"uuid\");\nconst twilsockerror_1 = require(\"../error/twilsockerror\");\n/**\n * Registrations module handles all operations with registration contexts through twilsock\n * Main role: it automatically refreshes all registrations after reconnect.\n */\nclass Registrations extends events_1.EventEmitter {\n    constructor(transport) {\n        super();\n        this.transport = transport;\n        this.registrations = new Map();\n        this.registrationsInProgress = new Map();\n    }\n    async putNotificationContext(contextId, context) {\n        const header = { method: 'put_notification_ctx', notification_ctx_id: contextId };\n        let reply = await this.transport.sendWithReply(header, context);\n    }\n    async deleteNotificationContext(contextId) {\n        let message = { method: 'delete_notification_ctx',\n            notification_ctx_id: contextId };\n        let reply = await this.transport.sendWithReply(message);\n    }\n    async updateRegistration(contextId, context) {\n        logger_1.log.debug('update registration for context', contextId);\n        let registrationAttempts = this.registrationsInProgress.get(contextId);\n        if (!registrationAttempts) {\n            registrationAttempts = new Set();\n            this.registrationsInProgress.set(contextId, registrationAttempts);\n        }\n        const attemptId = uuid_1.v4();\n        registrationAttempts.add(attemptId);\n        try {\n            await this.putNotificationContext(contextId, context);\n            logger_1.log.debug('registration attempt succeeded for context', context);\n            registrationAttempts.delete(attemptId);\n            if (registrationAttempts.size === 0) {\n                this.registrationsInProgress.delete(contextId);\n                this.emit('registered', contextId);\n            }\n        }\n        catch (err) {\n            logger_1.log.warn('registration attempt failed for context', context);\n            logger_1.log.debug(err);\n            registrationAttempts.delete(attemptId);\n            if (registrationAttempts.size === 0) {\n                this.registrationsInProgress.delete(contextId);\n                this.emit('registrationFailed', contextId, err);\n            }\n        }\n    }\n    updateRegistrations() {\n        logger_1.log.trace(`refreshing ${this.registrations.size} registrations`);\n        this.registrations.forEach((context, id) => {\n            this.updateRegistration(id, context);\n        });\n    }\n    setNotificationsContext(contextId, context) {\n        if (!contextId || !context) {\n            throw new twilsockerror_1.TwilsockError('Invalid arguments provided');\n        }\n        this.registrations.set(contextId, context);\n        if (this.transport.isConnected) {\n            this.updateRegistration(contextId, context);\n        }\n    }\n    async removeNotificationsContext(contextId) {\n        if (!this.registrations.has(contextId)) {\n            return;\n        }\n        await this.deleteNotificationContext(contextId);\n        if (this.transport.isConnected) {\n            this.registrations.delete(contextId);\n        }\n    }\n}\nexports.Registrations = Registrations;\n"]},"metadata":{},"sourceType":"script"}