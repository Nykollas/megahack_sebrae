{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst operation_retrier_1 = require(\"operation-retrier\");\n\nconst logger_1 = require(\"../logger\");\n\nconst configuration_1 = require(\"../configuration\");\n\nconst log = logger_1.Logger.scope('Network');\n\nclass Network {\n  constructor(config, transport) {\n    this.config = config;\n    this.transport = transport;\n  }\n\n  backoffConfig() {\n    return Object.assign(configuration_1.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);\n  }\n\n  retryWhenThrottled() {\n    if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {\n      return this.config.retryWhenThrottledOverride;\n    }\n\n    if (typeof configuration_1.Configuration.retryWhenThrottledDefault !== 'undefined') {\n      return configuration_1.Configuration.retryWhenThrottledDefault;\n    }\n\n    return false;\n  }\n\n  executeWithRetry(request, retryWhenThrottled = false) {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new operation_retrier_1.Retrier(this.backoffConfig());\n      retrier.on('attempt', () => {\n        request().then(result => retrier.succeeded(result)).catch(err => {\n          if (codesToRetryOn.indexOf(err.status) > -1) {\n            retrier.failed(err);\n          } else if (err.message === 'Twilsock disconnected') {\n            // Ugly hack. We must make a proper exceptions for twilsock\n            retrier.failed(err);\n          } else {\n            // Fatal error\n            retrier.removeAllListeners();\n            retrier.cancel();\n            reject(err);\n          }\n        });\n      });\n      retrier.on('succeeded', result => {\n        resolve(result);\n      });\n      retrier.on('cancelled', err => reject(err));\n      retrier.on('failed', err => reject(err));\n      retrier.start();\n    });\n  }\n\n  async get(url) {\n    const headers = {\n      'X-Twilio-Token': this.config.token\n    };\n    log.trace('sending GET request to ', url, ' headers ', headers);\n    let response = await this.executeWithRetry(() => this.transport.get(url, headers), this.retryWhenThrottled());\n    log.trace('response', response);\n    return response;\n  }\n\n  async post(url, media, contentType) {\n    let headers = {\n      'X-Twilio-Token': this.config.token\n    };\n\n    if ((typeof FormData === 'undefined' || !(media instanceof FormData)) && contentType) {\n      Object.assign(headers, {\n        'Content-Type': contentType\n      });\n    }\n\n    let response;\n    log.trace('sending POST request to ', url, ' headers ', headers);\n\n    try {\n      response = await this.transport.post(url, headers, media);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        log.trace('got error in post response', err);\n        throw new TypeError('Posting FormData supported only with browser engine\\'s FormData');\n      } else {\n        throw err;\n      }\n    }\n\n    log.trace('response', response);\n    return response;\n  }\n\n}\n\nexports.Network = Network;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-mcs-client/lib/services/network.js"],"names":["Object","defineProperty","exports","value","operation_retrier_1","require","logger_1","configuration_1","log","Logger","scope","Network","constructor","config","transport","backoffConfig","assign","Configuration","backoffConfigDefault","backoffConfigOverride","retryWhenThrottled","retryWhenThrottledOverride","retryWhenThrottledDefault","executeWithRetry","request","Promise","resolve","reject","codesToRetryOn","push","retrier","Retrier","on","then","result","succeeded","catch","err","indexOf","status","failed","message","removeAllListeners","cancel","start","get","url","headers","token","trace","response","post","media","contentType","FormData","TypeError"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operation_retrier_1 = require(\"operation-retrier\");\nconst logger_1 = require(\"../logger\");\nconst configuration_1 = require(\"../configuration\");\nconst log = logger_1.Logger.scope('Network');\nclass Network {\n    constructor(config, transport) {\n        this.config = config;\n        this.transport = transport;\n    }\n    backoffConfig() {\n        return Object.assign(configuration_1.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);\n    }\n    retryWhenThrottled() {\n        if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {\n            return this.config.retryWhenThrottledOverride;\n        }\n        if (typeof configuration_1.Configuration.retryWhenThrottledDefault !== 'undefined') {\n            return configuration_1.Configuration.retryWhenThrottledDefault;\n        }\n        return false;\n    }\n    executeWithRetry(request, retryWhenThrottled = false) {\n        return new Promise((resolve, reject) => {\n            let codesToRetryOn = [502, 503, 504];\n            if (retryWhenThrottled) {\n                codesToRetryOn.push(429);\n            }\n            let retrier = new operation_retrier_1.Retrier(this.backoffConfig());\n            retrier.on('attempt', () => {\n                request()\n                    .then(result => retrier.succeeded(result))\n                    .catch(err => {\n                    if (codesToRetryOn.indexOf(err.status) > -1) {\n                        retrier.failed(err);\n                    }\n                    else if (err.message === 'Twilsock disconnected') {\n                        // Ugly hack. We must make a proper exceptions for twilsock\n                        retrier.failed(err);\n                    }\n                    else {\n                        // Fatal error\n                        retrier.removeAllListeners();\n                        retrier.cancel();\n                        reject(err);\n                    }\n                });\n            });\n            retrier.on('succeeded', result => { resolve(result); });\n            retrier.on('cancelled', err => reject(err));\n            retrier.on('failed', err => reject(err));\n            retrier.start();\n        });\n    }\n    async get(url) {\n        const headers = { 'X-Twilio-Token': this.config.token };\n        log.trace('sending GET request to ', url, ' headers ', headers);\n        let response = await this.executeWithRetry(() => this.transport.get(url, headers), this.retryWhenThrottled());\n        log.trace('response', response);\n        return response;\n    }\n    async post(url, media, contentType) {\n        let headers = {\n            'X-Twilio-Token': this.config.token\n        };\n        if ((typeof FormData === 'undefined' || !(media instanceof FormData)) && contentType) {\n            Object.assign(headers, {\n                'Content-Type': contentType\n            });\n        }\n        let response;\n        log.trace('sending POST request to ', url, ' headers ', headers);\n        try {\n            response = await this.transport.post(url, headers, media);\n        }\n        catch (err) {\n            if (err instanceof TypeError) {\n                log.trace('got error in post response', err);\n                throw new TypeError('Posting FormData supported only with browser engine\\'s FormData');\n            }\n            else {\n                throw err;\n            }\n        }\n        log.trace('response', response);\n        return response;\n    }\n}\nexports.Network = Network;\n"]},"metadata":{},"sourceType":"script"}