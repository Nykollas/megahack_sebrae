{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar constants = require('../util/constants');\n\nvar ECS = require('../ecs');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Log = require('../util/log');\n\nvar TimeoutPromise = require('../util/timeoutpromise');\n\nvar util = require('../util');\n\nvar _require = require('../util/twilio-video-errors'),\n    ConfigurationAcquireFailedError = _require.ConfigurationAcquireFailedError;\n\nvar version = require('../../package.json').version;\n\nvar instances = 0;\n/**\n * @typedef {ECS.getConfigurationOptions} NTSIceServerSourceOptions\n * @property {Array<RTCIceServerInit>} [defaultIceServers]\n * @property {number} [defaultTTL]\n * @property {string} [ecsServer]\n * @property {string} [environment=\"prod\"]\n * @property {function(string, ECS.getConfigurationOptions): Promise<object>} [getConfiguration]\n * @property {string} [realm=\"us1\"]\n * @property {Log} [log]\n * @property {number} [timeout]\n */\n\n/**\n * A Network Traversal Service (NTS)-backed implementation of\n * {@link IceServerSource}; useful for getting fresh TURN servers from Twilio.\n * @extends EventEmitter\n * @implements {IceServerSource}\n */\n\nvar NTSIceServerSource = function (_EventEmitter) {\n  _inherits(NTSIceServerSource, _EventEmitter);\n  /**\n   * Construct an {@link NTSIceServerSource}.\n   * @param {string} token - Access Token\n   * @param {NTSIceServerSourceOptions} [options]\n   */\n\n\n  function NTSIceServerSource(token, options) {\n    _classCallCheck(this, NTSIceServerSource);\n\n    var _this = _possibleConstructorReturn(this, (NTSIceServerSource.__proto__ || Object.getPrototypeOf(NTSIceServerSource)).call(this));\n\n    options = Object.assign({\n      abortOnTimeout: false,\n      defaultTTL: constants.ICE_SERVERS_DEFAULT_TTL,\n      environment: constants.DEFAULT_ENVIRONMENT,\n      getConfiguration: ECS.getConfiguration,\n      realm: constants.DEFAULT_REALM,\n      timeout: constants.ICE_SERVERS_TIMEOUT_MS\n    }, options);\n    /* eslint-disable new-cap */\n\n    var defaultIceServers = constants.DEFAULT_ICE_SERVERS(options.environment);\n    var ecsServer = options.ecsServer || constants.ECS_SERVER(options.environment, options.realm);\n    /* eslint-enable new-cap */\n\n    var log = options.log ? options.log.createLog('default', _this) : new Log('default', _this, util.buildLogLevels('off'));\n    Object.defineProperties(_this, {\n      _abortOnTimeout: {\n        value: options.abortOnTimeout\n      },\n      // This Promise represents the current invocation of `poll`. `start` sets it\n      // and `stop` clears it out.\n      _currentPoll: {\n        value: null,\n        writable: true\n      },\n      // In the event that ECS or NTS fail to return ICE servers in a timely\n      // manner, NTSIceServerSource falls back to these servers.\n      _defaultIceServers: {\n        value: defaultIceServers\n      },\n      _defaultTTL: {\n        value: options.defaultTTL\n      },\n      // This is the ECS server NTSIceServerSource communicates with.\n      _ecsServer: {\n        value: ecsServer\n      },\n      _getConfiguration: {\n        value: options.getConfiguration\n      },\n      _instance: {\n        value: ++instances\n      },\n      // This timer ID represents the next invocation of `poll`.\n      _nextPoll: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _status: {\n        value: null,\n        writable: true\n      },\n      // This Deferred remains unresolved until `stop` is called. We use it to\n      // short-circuit in `poll`.\n      _stopped: {\n        value: util.defer(),\n        writable: true\n      },\n      // This value configures the amount of time NTSIceServerSource will wait\n      // when fetching ICE servers.\n      _timeout: {\n        value: options.timeout\n      },\n      // This is the Access Token NTSIceServerSource makes requests to ECS with.\n      _token: {\n        value: token\n      }\n    });\n\n    _this._log.info('Created a new NTSIceServerSource');\n\n    _this._log.debug('ECS server:', _this._ecsServer);\n\n    return _this;\n  }\n\n  _createClass(NTSIceServerSource, [{\n    key: 'start',\n    value: function start() {\n      if (!this.isStarted) {\n        this._log.info('Starting');\n\n        this._currentPoll = poll(this);\n      } else {\n        this._log.warn('Already started');\n      }\n\n      return this._currentPoll;\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (!this.isStarted) {\n        this._log.warn('Already stopped');\n\n        return;\n      }\n\n      this._log.info('Stopping');\n\n      this._currentPoll = null;\n      clearTimeout(this._nextPoll);\n\n      this._stopped.resolve();\n\n      this._stopped = util.defer();\n\n      this._log.debug('Stopped');\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[NTSIceServerSource #' + this._instance + ']';\n    }\n  }, {\n    key: 'isStarted',\n    get: function get() {\n      return !!this._currentPoll;\n    }\n  }, {\n    key: 'status',\n    get: function get() {\n      return this._status;\n    }\n  }]);\n\n  return NTSIceServerSource;\n}(EventEmitter);\n/**\n * Parse an ECS configuration value, log any warnings, and return a tuple of\n * ICE servers and TTL.\n * @param {NTSIceServerSource} client\n * @param {object} config\n * @returns {Array<Array<RTCIceServerInit>|Number>} iceServersAndTTL\n * @throws {Error}\n */\n\n\nfunction parseECSConfig(client, config) {\n  var nts = util.getOrNull(config, 'video.network_traversal_service');\n\n  if (!nts) {\n    throw new Error('network_traversal_service not available');\n  } else if (nts.warning) {\n    client._log.warn(nts.warning);\n  }\n\n  var iceServers = nts.ice_servers;\n\n  if (!iceServers) {\n    throw new Error('ice_servers not available');\n  }\n\n  client._log.info('Got ICE servers: ' + JSON.stringify(iceServers));\n\n  var ttl = nts.ttl || client._defaultTTL;\n  return [iceServers, ttl];\n}\n/**\n * Get ICE servers and their TTL.\n * @private\n * @param {NTSIceServerSource} nts\n * @returns {Promise<Array<RTCIceServerInit>>} iceServers\n */\n\n\nfunction poll(client) {\n  // We race `getConfiguration` against the `_stopped` Promise so that, when\n  // `stop` is called on the NTSIceServerSource, we can immediately proceed\n  // without waiting on `getConfiguration`.\n  client._log.debug('Getting ECS configuration');\n\n  var options = {\n    configUrl: client._ecsServer + '/v2/Configuration',\n    body: {\n      service: 'video',\n\n      /* eslint-disable camelcase */\n      sdk_version: version\n      /* eslint-enable camelcase */\n\n    }\n  };\n  var alreadyStopped = new Error('Already stopped');\n\n  var config = client._getConfiguration(client._token, options);\n\n  var configWithTimeout = new TimeoutPromise(config, client._timeout);\n  return Promise.race([configWithTimeout, client._stopped.promise]).then(function (config) {\n    if (!config) {\n      throw alreadyStopped;\n    }\n\n    var iceServersAndTTL = parseECSConfig(client, config);\n    client._status = 'success';\n    return iceServersAndTTL;\n  }).catch(function (error) {\n    client._status = 'failure';\n\n    if (!client.isStarted) {\n      throw alreadyStopped;\n    } else if (configWithTimeout.isTimedOut) {\n      if (client._abortOnTimeout) {\n        client._log.warn('Getting ICE servers took too long');\n\n        throw new ConfigurationAcquireFailedError();\n      }\n\n      client._log.warn('Getting ICE servers took too long (using defaults)');\n    } else {\n      // NOTE(mroberts): Stop if we get an Access Token error (2xxxx)\n      if (error.code && Math.floor(error.code / 10000) === 2) {\n        client.stop();\n      }\n\n      client._log.warn('Failed to get ICE servers (using defaults):', error);\n    }\n\n    return [client._defaultIceServers, client._defaultTTL];\n  }).then(function (iceServersAndTTL) {\n    var iceServers = iceServersAndTTL[0];\n    var ttl = iceServersAndTTL[1];\n\n    if (client.isStarted) {\n      client._log.info('Getting ICE servers again in ' + ttl + ' seconds');\n\n      client._nextPoll = setTimeout(function nextPoll() {\n        if (client.isStarted) {\n          client._currentPoll = poll(client);\n        }\n      }, (ttl - constants.ECS_TIMEOUT) * 1000);\n    }\n\n    client._iceServers = iceServers;\n\n    try {\n      client.emit('iceServers', iceServers);\n    } catch (error) {// Do nothing.\n    }\n\n    return iceServers;\n  });\n}\n\nmodule.exports = NTSIceServerSource;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/iceserversource/nts.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","constants","require","ECS","EventEmitter","Log","TimeoutPromise","util","_require","ConfigurationAcquireFailedError","version","instances","NTSIceServerSource","_EventEmitter","token","options","_this","getPrototypeOf","assign","abortOnTimeout","defaultTTL","ICE_SERVERS_DEFAULT_TTL","environment","DEFAULT_ENVIRONMENT","getConfiguration","realm","DEFAULT_REALM","timeout","ICE_SERVERS_TIMEOUT_MS","defaultIceServers","DEFAULT_ICE_SERVERS","ecsServer","ECS_SERVER","log","createLog","buildLogLevels","_abortOnTimeout","_currentPoll","_defaultIceServers","_defaultTTL","_ecsServer","_getConfiguration","_instance","_nextPoll","_log","_status","_stopped","defer","_timeout","_token","info","debug","start","isStarted","poll","warn","stop","clearTimeout","resolve","toString","get","parseECSConfig","client","config","nts","getOrNull","Error","warning","iceServers","ice_servers","JSON","stringify","ttl","configUrl","body","service","sdk_version","alreadyStopped","configWithTimeout","Promise","race","promise","then","iceServersAndTTL","catch","error","isTimedOut","code","Math","floor","setTimeout","nextPoll","ECS_TIMEOUT","_iceServers","emit","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar constants = require('../util/constants');\nvar ECS = require('../ecs');\nvar EventEmitter = require('events').EventEmitter;\nvar Log = require('../util/log');\nvar TimeoutPromise = require('../util/timeoutpromise');\nvar util = require('../util');\n\nvar _require = require('../util/twilio-video-errors'),\n    ConfigurationAcquireFailedError = _require.ConfigurationAcquireFailedError;\n\nvar version = require('../../package.json').version;\n\nvar instances = 0;\n\n/**\n * @typedef {ECS.getConfigurationOptions} NTSIceServerSourceOptions\n * @property {Array<RTCIceServerInit>} [defaultIceServers]\n * @property {number} [defaultTTL]\n * @property {string} [ecsServer]\n * @property {string} [environment=\"prod\"]\n * @property {function(string, ECS.getConfigurationOptions): Promise<object>} [getConfiguration]\n * @property {string} [realm=\"us1\"]\n * @property {Log} [log]\n * @property {number} [timeout]\n */\n\n/**\n * A Network Traversal Service (NTS)-backed implementation of\n * {@link IceServerSource}; useful for getting fresh TURN servers from Twilio.\n * @extends EventEmitter\n * @implements {IceServerSource}\n */\n\nvar NTSIceServerSource = function (_EventEmitter) {\n  _inherits(NTSIceServerSource, _EventEmitter);\n\n  /**\n   * Construct an {@link NTSIceServerSource}.\n   * @param {string} token - Access Token\n   * @param {NTSIceServerSourceOptions} [options]\n   */\n  function NTSIceServerSource(token, options) {\n    _classCallCheck(this, NTSIceServerSource);\n\n    var _this = _possibleConstructorReturn(this, (NTSIceServerSource.__proto__ || Object.getPrototypeOf(NTSIceServerSource)).call(this));\n\n    options = Object.assign({\n      abortOnTimeout: false,\n      defaultTTL: constants.ICE_SERVERS_DEFAULT_TTL,\n      environment: constants.DEFAULT_ENVIRONMENT,\n      getConfiguration: ECS.getConfiguration,\n      realm: constants.DEFAULT_REALM,\n      timeout: constants.ICE_SERVERS_TIMEOUT_MS\n    }, options);\n\n    /* eslint-disable new-cap */\n    var defaultIceServers = constants.DEFAULT_ICE_SERVERS(options.environment);\n    var ecsServer = options.ecsServer || constants.ECS_SERVER(options.environment, options.realm);\n    /* eslint-enable new-cap */\n\n    var log = options.log ? options.log.createLog('default', _this) : new Log('default', _this, util.buildLogLevels('off'));\n\n    Object.defineProperties(_this, {\n      _abortOnTimeout: {\n        value: options.abortOnTimeout\n      },\n      // This Promise represents the current invocation of `poll`. `start` sets it\n      // and `stop` clears it out.\n      _currentPoll: {\n        value: null,\n        writable: true\n      },\n      // In the event that ECS or NTS fail to return ICE servers in a timely\n      // manner, NTSIceServerSource falls back to these servers.\n      _defaultIceServers: {\n        value: defaultIceServers\n      },\n      _defaultTTL: {\n        value: options.defaultTTL\n      },\n      // This is the ECS server NTSIceServerSource communicates with.\n      _ecsServer: {\n        value: ecsServer\n      },\n      _getConfiguration: {\n        value: options.getConfiguration\n      },\n      _instance: {\n        value: ++instances\n      },\n      // This timer ID represents the next invocation of `poll`.\n      _nextPoll: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _status: {\n        value: null,\n        writable: true\n      },\n      // This Deferred remains unresolved until `stop` is called. We use it to\n      // short-circuit in `poll`.\n      _stopped: {\n        value: util.defer(),\n        writable: true\n      },\n      // This value configures the amount of time NTSIceServerSource will wait\n      // when fetching ICE servers.\n      _timeout: {\n        value: options.timeout\n      },\n      // This is the Access Token NTSIceServerSource makes requests to ECS with.\n      _token: {\n        value: token\n      }\n    });\n\n    _this._log.info('Created a new NTSIceServerSource');\n    _this._log.debug('ECS server:', _this._ecsServer);\n    return _this;\n  }\n\n  _createClass(NTSIceServerSource, [{\n    key: 'start',\n    value: function start() {\n      if (!this.isStarted) {\n        this._log.info('Starting');\n        this._currentPoll = poll(this);\n      } else {\n        this._log.warn('Already started');\n      }\n      return this._currentPoll;\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (!this.isStarted) {\n        this._log.warn('Already stopped');\n        return;\n      }\n      this._log.info('Stopping');\n      this._currentPoll = null;\n      clearTimeout(this._nextPoll);\n      this._stopped.resolve();\n      this._stopped = util.defer();\n      this._log.debug('Stopped');\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return '[NTSIceServerSource #' + this._instance + ']';\n    }\n  }, {\n    key: 'isStarted',\n    get: function get() {\n      return !!this._currentPoll;\n    }\n  }, {\n    key: 'status',\n    get: function get() {\n      return this._status;\n    }\n  }]);\n\n  return NTSIceServerSource;\n}(EventEmitter);\n\n/**\n * Parse an ECS configuration value, log any warnings, and return a tuple of\n * ICE servers and TTL.\n * @param {NTSIceServerSource} client\n * @param {object} config\n * @returns {Array<Array<RTCIceServerInit>|Number>} iceServersAndTTL\n * @throws {Error}\n */\n\n\nfunction parseECSConfig(client, config) {\n  var nts = util.getOrNull(config, 'video.network_traversal_service');\n  if (!nts) {\n    throw new Error('network_traversal_service not available');\n  } else if (nts.warning) {\n    client._log.warn(nts.warning);\n  }\n\n  var iceServers = nts.ice_servers;\n  if (!iceServers) {\n    throw new Error('ice_servers not available');\n  }\n  client._log.info('Got ICE servers: ' + JSON.stringify(iceServers));\n\n  var ttl = nts.ttl || client._defaultTTL;\n  return [iceServers, ttl];\n}\n\n/**\n * Get ICE servers and their TTL.\n * @private\n * @param {NTSIceServerSource} nts\n * @returns {Promise<Array<RTCIceServerInit>>} iceServers\n */\nfunction poll(client) {\n  // We race `getConfiguration` against the `_stopped` Promise so that, when\n  // `stop` is called on the NTSIceServerSource, we can immediately proceed\n  // without waiting on `getConfiguration`.\n  client._log.debug('Getting ECS configuration');\n\n  var options = {\n    configUrl: client._ecsServer + '/v2/Configuration',\n    body: {\n      service: 'video',\n      /* eslint-disable camelcase */\n      sdk_version: version\n      /* eslint-enable camelcase */\n    }\n  };\n\n  var alreadyStopped = new Error('Already stopped');\n  var config = client._getConfiguration(client._token, options);\n  var configWithTimeout = new TimeoutPromise(config, client._timeout);\n\n  return Promise.race([configWithTimeout, client._stopped.promise]).then(function (config) {\n    if (!config) {\n      throw alreadyStopped;\n    }\n    var iceServersAndTTL = parseECSConfig(client, config);\n    client._status = 'success';\n    return iceServersAndTTL;\n  }).catch(function (error) {\n    client._status = 'failure';\n    if (!client.isStarted) {\n      throw alreadyStopped;\n    } else if (configWithTimeout.isTimedOut) {\n      if (client._abortOnTimeout) {\n        client._log.warn('Getting ICE servers took too long');\n        throw new ConfigurationAcquireFailedError();\n      }\n      client._log.warn('Getting ICE servers took too long (using defaults)');\n    } else {\n      // NOTE(mroberts): Stop if we get an Access Token error (2xxxx)\n      if (error.code && Math.floor(error.code / 10000) === 2) {\n        client.stop();\n      }\n      client._log.warn('Failed to get ICE servers (using defaults):', error);\n    }\n    return [client._defaultIceServers, client._defaultTTL];\n  }).then(function (iceServersAndTTL) {\n    var iceServers = iceServersAndTTL[0];\n    var ttl = iceServersAndTTL[1];\n\n    if (client.isStarted) {\n      client._log.info('Getting ICE servers again in ' + ttl + ' seconds');\n      client._nextPoll = setTimeout(function nextPoll() {\n        if (client.isStarted) {\n          client._currentPoll = poll(client);\n        }\n      }, (ttl - constants.ECS_TIMEOUT) * 1000);\n    }\n\n    client._iceServers = iceServers;\n    try {\n      client.emit('iceServers', iceServers);\n    } catch (error) {\n      // Do nothing.\n    }\n    return iceServers;\n  });\n}\n\nmodule.exports = NTSIceServerSource;"]},"metadata":{},"sourceType":"script"}