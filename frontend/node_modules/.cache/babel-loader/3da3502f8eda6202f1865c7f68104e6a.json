{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst operation_retrier_1 = require(\"operation-retrier\");\n\nconst logger_1 = require(\"./logger\");\n\nconst connector_1 = require(\"./connector\");\n\nexports.Connector = connector_1.Connector;\nlet retrierConfig = {\n  min: 2000,\n  max: 120000,\n  randomness: 0.2\n};\n/**\n * Manages the registrations on ERS service.\n * Deduplicates registrations and manages them automatically\n */\n\nclass RegistrarConnector extends connector_1.Connector {\n  /**\n   * Creates new instance of the ERS registrar\n   *\n   * @param Object configuration\n   * @param string notificationId\n   * @param string channelType\n   * @param Array messageTypes\n   */\n  constructor(channelType, context, transport, config) {\n    super(config);\n    this.channelType = channelType;\n    this.context = context;\n    this.transport = transport;\n  }\n\n  async updateRegistration(registration, reasons) {\n    if (reasons.has('notificationId')) {\n      await this.removeRegistration();\n    }\n\n    if (!registration.notificationId || !registration.notificationId.length) {\n      return registration;\n    }\n\n    await this.register(registration);\n    return registration;\n  }\n\n  async removeRegistration() {\n    if (!this.registrationId) {\n      return;\n    }\n\n    const url = `${this.config.registrarUrl}/${this.registrationId}?productId=${this.context.productId}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': this.config.token\n    };\n\n    try {\n      logger_1.log.trace('Removing registration for ', this.channelType);\n      await new operation_retrier_1.Retrier(Object.assign(retrierConfig, {\n        maxAttemptsCount: 3\n      })).run(() => this.transport.delete(url, headers));\n      logger_1.log.debug('Registration removed for', this.channelType);\n    } catch (err) {\n      logger_1.log.error('Failed to remove of registration ', this.channelType, err);\n      throw err;\n    }\n  }\n\n  async register(registration) {\n    logger_1.log.trace('Registering', this.channelType, registration);\n    let registrarRequest = {\n      endpoint_platform: this.context.platform,\n      channel_type: this.channelType,\n      version: this.context.protocolVersion.toString(),\n      message_types: Array.from(registration.messageTypes),\n      data: {\n        registration_id: registration.notificationId\n      },\n      ttl: 'PT24H'\n    };\n    const url = `${this.config.registrarUrl}?productId=${this.context.productId}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': registration.token\n    };\n    logger_1.log.trace('Creating registration for channel ', this.channelType);\n\n    try {\n      let response = await new operation_retrier_1.Retrier(retrierConfig).run(() => this.transport.post(url, headers, registrarRequest));\n      this.registrationId = response.body.id;\n      logger_1.log.debug('Registration created: ', response);\n    } catch (err) {\n      logger_1.log.error('Registration failed: ', err);\n      throw err;\n    }\n  }\n\n}\n\nexports.RegistrarConnector = RegistrarConnector;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-notifications/lib/registrar.connector.js"],"names":["Object","defineProperty","exports","value","operation_retrier_1","require","logger_1","connector_1","Connector","retrierConfig","min","max","randomness","RegistrarConnector","constructor","channelType","context","transport","config","updateRegistration","registration","reasons","has","removeRegistration","notificationId","length","register","registrationId","url","registrarUrl","productId","headers","token","log","trace","Retrier","assign","maxAttemptsCount","run","delete","debug","err","error","registrarRequest","endpoint_platform","platform","channel_type","version","protocolVersion","toString","message_types","Array","from","messageTypes","data","registration_id","ttl","response","post","body","id"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operation_retrier_1 = require(\"operation-retrier\");\nconst logger_1 = require(\"./logger\");\nconst connector_1 = require(\"./connector\");\nexports.Connector = connector_1.Connector;\nlet retrierConfig = {\n    min: 2000,\n    max: 120000,\n    randomness: 0.2\n};\n/**\n * Manages the registrations on ERS service.\n * Deduplicates registrations and manages them automatically\n */\nclass RegistrarConnector extends connector_1.Connector {\n    /**\n     * Creates new instance of the ERS registrar\n     *\n     * @param Object configuration\n     * @param string notificationId\n     * @param string channelType\n     * @param Array messageTypes\n     */\n    constructor(channelType, context, transport, config) {\n        super(config);\n        this.channelType = channelType;\n        this.context = context;\n        this.transport = transport;\n    }\n    async updateRegistration(registration, reasons) {\n        if (reasons.has('notificationId')) {\n            await this.removeRegistration();\n        }\n        if (!registration.notificationId || !registration.notificationId.length) {\n            return registration;\n        }\n        await this.register(registration);\n        return registration;\n    }\n    async removeRegistration() {\n        if (!this.registrationId) {\n            return;\n        }\n        const url = `${this.config.registrarUrl}/${this.registrationId}?productId=${this.context.productId}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Twilio-Token': this.config.token\n        };\n        try {\n            logger_1.log.trace('Removing registration for ', this.channelType);\n            await new operation_retrier_1.Retrier(Object.assign(retrierConfig, { maxAttemptsCount: 3 }))\n                .run(() => this.transport.delete(url, headers));\n            logger_1.log.debug('Registration removed for', this.channelType);\n        }\n        catch (err) {\n            logger_1.log.error('Failed to remove of registration ', this.channelType, err);\n            throw err;\n        }\n    }\n    async register(registration) {\n        logger_1.log.trace('Registering', this.channelType, registration);\n        let registrarRequest = {\n            endpoint_platform: this.context.platform,\n            channel_type: this.channelType,\n            version: this.context.protocolVersion.toString(),\n            message_types: Array.from(registration.messageTypes),\n            data: {\n                registration_id: registration.notificationId\n            },\n            ttl: 'PT24H'\n        };\n        const url = `${this.config.registrarUrl}?productId=${this.context.productId}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Twilio-Token': registration.token\n        };\n        logger_1.log.trace('Creating registration for channel ', this.channelType);\n        try {\n            let response = await new operation_retrier_1.Retrier(retrierConfig)\n                .run(() => this.transport.post(url, headers, registrarRequest));\n            this.registrationId = response.body.id;\n            logger_1.log.debug('Registration created: ', response);\n        }\n        catch (err) {\n            logger_1.log.error('Registration failed: ', err);\n            throw err;\n        }\n    }\n}\nexports.RegistrarConnector = RegistrarConnector;\n"]},"metadata":{},"sourceType":"script"}