{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar _require = require('..'),\n    getUserAgent = _require.getUserAgent;\n\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar RECONNECT_INTERVAL_MS = 50;\nvar WS_CLOSE_NORMAL = 1000;\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n\nvar util = require('../../util');\n/**\n * Publish events to the Insights gateway.\n * @extends EventEmitter\n * @emits InsightsPublisher#connected\n * @emits InsightsPublisher#disconnected\n * @emits InsightsPublisher#reconnecting\n */\n\n\nvar InsightsPublisher = function (_EventEmitter) {\n  _inherits(InsightsPublisher, _EventEmitter);\n  /**\n   * @param {string} token - Insights gateway token\n   * @param {string} sdkName - Name of the SDK using the {@link InsightsPublisher}\n   * @param {string} sdkVersion - Version of the SDK using the {@link InsightsPublisher}\n   * @param {string} environment - One of 'dev', 'stage' or 'prod'\n   * @param {string} realm - Region identifier\n   * @param {InsightsPublisherOptions} options - Override default behavior\n   */\n\n\n  function InsightsPublisher(token, sdkName, sdkVersion, environment, realm, options) {\n    _classCallCheck(this, InsightsPublisher);\n\n    var _this = _possibleConstructorReturn(this, (InsightsPublisher.__proto__ || Object.getPrototypeOf(InsightsPublisher)).call(this));\n\n    options = Object.assign({\n      gateway: createGateway(environment, realm) + '/v1/VideoEvents',\n      maxReconnectAttempts: MAX_RECONNECT_ATTEMPTS,\n      reconnectIntervalMs: RECONNECT_INTERVAL_MS,\n      userAgent: getUserAgent(),\n      WebSocket: WebSocket\n    }, options);\n    Object.defineProperties(_this, {\n      _connectTimestamp: {\n        value: 0,\n        writable: true\n      },\n      _eventQueue: {\n        value: []\n      },\n      _readyToConnect: {\n        value: util.defer()\n      },\n      _reconnectAttemptsLeft: {\n        value: options.maxReconnectAttempts,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      },\n      _WebSocket: {\n        value: options.WebSocket\n      }\n    });\n\n    _this._readyToConnect.promise.then(function (_ref) {\n      var roomSid = _ref.roomSid,\n          participantSid = _ref.participantSid;\n      var self = _this;\n\n      _this.on('disconnected', function maybeReconnect(error) {\n        self._session = null;\n\n        if (error && self._reconnectAttemptsLeft > 0) {\n          self.emit('reconnecting');\n          reconnect(self, token, sdkName, sdkVersion, roomSid, participantSid, options);\n          return;\n        }\n\n        self.removeListener('disconnected', maybeReconnect);\n      });\n\n      connect(_this, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }).catch(function () {// ignore failures to connect\n    });\n\n    return _this;\n  }\n  /**\n   * Start connecting to the Insights gateway.\n   * @param {string} roomSid\n   * @param {string} participantSid\n   * @returns {void}\n   */\n\n\n  _createClass(InsightsPublisher, [{\n    key: 'connect',\n    value: function connect(roomSid, participantSid) {\n      this._readyToConnect.resolve({\n        roomSid: roomSid,\n        participantSid: participantSid\n      });\n    }\n    /**\n     * Publish an event to the Insights gateway.\n     * @private\n     * @param {*} event\n     */\n\n  }, {\n    key: '_publish',\n    value: function _publish(event) {\n      event.session = this._session;\n\n      this._ws.send(JSON.stringify(event));\n    }\n    /**\n     * Disconnect from the Insights gateway.\n     * @returns {boolean} true if called when connecting/open, false if not\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      if (this._ws === null || this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED) {\n        return false;\n      }\n\n      try {\n        this._ws.close();\n      } catch (error) {// Do nothing.\n      }\n\n      this.emit('disconnected');\n      return true;\n    }\n    /**\n     * Publish (or queue, if not connected) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnect() called\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(groupName, eventName, payload) {\n      if (this._ws !== null && (this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED)) {\n        return false;\n      }\n\n      var publishOrEnqueue = typeof this._session === 'string' ? this._publish.bind(this) : this._eventQueue.push.bind(this._eventQueue);\n      publishOrEnqueue({\n        group: groupName,\n        name: eventName,\n        payload: payload,\n        timestamp: Date.now(),\n        type: 'event',\n        version: 1\n      });\n      return true;\n    }\n  }]);\n\n  return InsightsPublisher;\n}(EventEmitter);\n/**\n * Start connecting to the Insights gateway.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} name\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  publisher._connectTimestamp = Date.now();\n  publisher._reconnectAttemptsLeft--;\n  publisher._ws = new options.WebSocket(options.gateway);\n  var ws = publisher._ws;\n  ws.addEventListener('close', function (event) {\n    if (event.code === WS_CLOSE_NORMAL) {\n      publisher.emit('disconnected');\n      return;\n    }\n\n    publisher.emit('disconnected', new Error('WebSocket Error ' + event.code + ': ' + event.reason));\n  });\n  ws.addEventListener('message', function (message) {\n    handleConnectResponse(publisher, JSON.parse(message.data), options);\n  });\n  ws.addEventListener('open', function () {\n    var connectRequest = {\n      type: 'connect',\n      token: token,\n      version: 1\n    };\n    connectRequest.publisher = {\n      name: sdkName,\n      sdkVersion: sdkVersion,\n      userAgent: options.userAgent,\n      participantSid: participantSid,\n      roomSid: roomSid\n    };\n    ws.send(JSON.stringify(connectRequest));\n  });\n}\n/**\n * Create the Insights Websocket gateway URL.\n * @param {string} environment\n * @param {string} realm\n * @returns {string}\n */\n\n\nfunction createGateway(environment, realm) {\n  return environment === 'prod' ? 'wss://sdkgw.' + realm + '.twilio.com' : 'wss://sdkgw.' + environment + '-' + realm + '.twilio.com';\n}\n/**\n * Handle connect response from the Insights gateway.\n * @param {InsightsPublisher} publisher\n * @param {*} response\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction handleConnectResponse(publisher, response, options) {\n  switch (response.type) {\n    case 'connected':\n      publisher._session = response.session;\n      publisher._reconnectAttemptsLeft = options.maxReconnectAttempts;\n\n      publisher._eventQueue.splice(0).forEach(publisher._publish, publisher);\n\n      publisher.emit('connected');\n      break;\n\n    case 'error':\n      publisher._ws.close();\n\n      publisher.emit('disconnected', new Error(response.message));\n      break;\n  }\n}\n/**\n * Start re-connecting to the Insights gateway with an appropriate delay based\n * on InsightsPublisherOptions#reconnectIntervalMs.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction reconnect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  var connectInterval = Date.now() - publisher._connectTimestamp;\n\n  var timeToWait = options.reconnectIntervalMs - connectInterval;\n\n  if (timeToWait > 0) {\n    setTimeout(function () {\n      connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }, timeToWait);\n    return;\n  }\n\n  connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n}\n/**\n * The {@link InsightsPublisher} is connected to the gateway.\n * @event InsightsPublisher#connected\n */\n\n/**\n * The {@link InsightsPublisher} is disconnected from the gateway.\n * @event InsightsPublisher#disconnected\n * @param {Error} [error] - Optional error if disconnected unintentionally\n */\n\n/**\n * The {@link InsightsPublisher} is re-connecting to the gateway.\n * @event InsightsPublisher#reconnecting\n */\n\n/**\n * {@link InsightsPublisher} options.\n * @typedef {object} InsightsPublisherOptions\n * @property {string} [gateway=sdkgw.{environment}-{realm}.twilio.com] - Insights WebSocket gateway url\n * @property {number} [maxReconnectAttempts=5] - Max re-connect attempts\n * @property {number} [reconnectIntervalMs=50] - Re-connect interval in ms\n */\n\n\nmodule.exports = InsightsPublisher;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/util/insightspublisher/index.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","EventEmitter","require","_require","getUserAgent","MAX_RECONNECT_ATTEMPTS","RECONNECT_INTERVAL_MS","WS_CLOSE_NORMAL","toplevel","global","window","WebSocket","util","InsightsPublisher","_EventEmitter","token","sdkName","sdkVersion","environment","realm","options","_this","getPrototypeOf","assign","gateway","createGateway","maxReconnectAttempts","reconnectIntervalMs","userAgent","_connectTimestamp","_eventQueue","_readyToConnect","defer","_reconnectAttemptsLeft","_ws","_WebSocket","promise","then","_ref","roomSid","participantSid","on","maybeReconnect","error","_session","emit","reconnect","removeListener","connect","catch","resolve","_publish","event","session","send","JSON","stringify","disconnect","readyState","CLOSING","CLOSED","close","publish","groupName","eventName","payload","publishOrEnqueue","bind","push","group","name","timestamp","Date","now","type","version","publisher","ws","addEventListener","code","Error","reason","message","handleConnectResponse","parse","data","connectRequest","response","splice","forEach","connectInterval","timeToWait","setTimeout","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar _require = require('..'),\n    getUserAgent = _require.getUserAgent;\n\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar RECONNECT_INTERVAL_MS = 50;\nvar WS_CLOSE_NORMAL = 1000;\n\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\nvar util = require('../../util');\n\n/**\n * Publish events to the Insights gateway.\n * @extends EventEmitter\n * @emits InsightsPublisher#connected\n * @emits InsightsPublisher#disconnected\n * @emits InsightsPublisher#reconnecting\n */\n\nvar InsightsPublisher = function (_EventEmitter) {\n  _inherits(InsightsPublisher, _EventEmitter);\n\n  /**\n   * @param {string} token - Insights gateway token\n   * @param {string} sdkName - Name of the SDK using the {@link InsightsPublisher}\n   * @param {string} sdkVersion - Version of the SDK using the {@link InsightsPublisher}\n   * @param {string} environment - One of 'dev', 'stage' or 'prod'\n   * @param {string} realm - Region identifier\n   * @param {InsightsPublisherOptions} options - Override default behavior\n   */\n  function InsightsPublisher(token, sdkName, sdkVersion, environment, realm, options) {\n    _classCallCheck(this, InsightsPublisher);\n\n    var _this = _possibleConstructorReturn(this, (InsightsPublisher.__proto__ || Object.getPrototypeOf(InsightsPublisher)).call(this));\n\n    options = Object.assign({\n      gateway: createGateway(environment, realm) + '/v1/VideoEvents',\n      maxReconnectAttempts: MAX_RECONNECT_ATTEMPTS,\n      reconnectIntervalMs: RECONNECT_INTERVAL_MS,\n      userAgent: getUserAgent(),\n      WebSocket: WebSocket\n    }, options);\n\n    Object.defineProperties(_this, {\n      _connectTimestamp: {\n        value: 0,\n        writable: true\n      },\n      _eventQueue: {\n        value: []\n      },\n      _readyToConnect: {\n        value: util.defer()\n      },\n      _reconnectAttemptsLeft: {\n        value: options.maxReconnectAttempts,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      },\n      _WebSocket: {\n        value: options.WebSocket\n      }\n    });\n\n    _this._readyToConnect.promise.then(function (_ref) {\n      var roomSid = _ref.roomSid,\n          participantSid = _ref.participantSid;\n\n      var self = _this;\n      _this.on('disconnected', function maybeReconnect(error) {\n        self._session = null;\n        if (error && self._reconnectAttemptsLeft > 0) {\n          self.emit('reconnecting');\n          reconnect(self, token, sdkName, sdkVersion, roomSid, participantSid, options);\n          return;\n        }\n        self.removeListener('disconnected', maybeReconnect);\n      });\n      connect(_this, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }).catch(function () {\n      // ignore failures to connect\n    });\n    return _this;\n  }\n\n  /**\n   * Start connecting to the Insights gateway.\n   * @param {string} roomSid\n   * @param {string} participantSid\n   * @returns {void}\n   */\n\n\n  _createClass(InsightsPublisher, [{\n    key: 'connect',\n    value: function connect(roomSid, participantSid) {\n      this._readyToConnect.resolve({ roomSid: roomSid, participantSid: participantSid });\n    }\n\n    /**\n     * Publish an event to the Insights gateway.\n     * @private\n     * @param {*} event\n     */\n\n  }, {\n    key: '_publish',\n    value: function _publish(event) {\n      event.session = this._session;\n      this._ws.send(JSON.stringify(event));\n    }\n\n    /**\n     * Disconnect from the Insights gateway.\n     * @returns {boolean} true if called when connecting/open, false if not\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      if (this._ws === null || this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED) {\n        return false;\n      }\n\n      try {\n        this._ws.close();\n      } catch (error) {\n        // Do nothing.\n      }\n      this.emit('disconnected');\n\n      return true;\n    }\n\n    /**\n     * Publish (or queue, if not connected) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnect() called\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(groupName, eventName, payload) {\n      if (this._ws !== null && (this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED)) {\n        return false;\n      }\n\n      var publishOrEnqueue = typeof this._session === 'string' ? this._publish.bind(this) : this._eventQueue.push.bind(this._eventQueue);\n\n      publishOrEnqueue({\n        group: groupName,\n        name: eventName,\n        payload: payload,\n        timestamp: Date.now(),\n        type: 'event',\n        version: 1\n      });\n\n      return true;\n    }\n  }]);\n\n  return InsightsPublisher;\n}(EventEmitter);\n\n/**\n * Start connecting to the Insights gateway.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} name\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  publisher._connectTimestamp = Date.now();\n  publisher._reconnectAttemptsLeft--;\n  publisher._ws = new options.WebSocket(options.gateway);\n  var ws = publisher._ws;\n\n  ws.addEventListener('close', function (event) {\n    if (event.code === WS_CLOSE_NORMAL) {\n      publisher.emit('disconnected');\n      return;\n    }\n    publisher.emit('disconnected', new Error('WebSocket Error ' + event.code + ': ' + event.reason));\n  });\n\n  ws.addEventListener('message', function (message) {\n    handleConnectResponse(publisher, JSON.parse(message.data), options);\n  });\n\n  ws.addEventListener('open', function () {\n    var connectRequest = {\n      type: 'connect',\n      token: token,\n      version: 1\n    };\n\n    connectRequest.publisher = {\n      name: sdkName,\n      sdkVersion: sdkVersion,\n      userAgent: options.userAgent,\n      participantSid: participantSid,\n      roomSid: roomSid\n    };\n\n    ws.send(JSON.stringify(connectRequest));\n  });\n}\n\n/**\n * Create the Insights Websocket gateway URL.\n * @param {string} environment\n * @param {string} realm\n * @returns {string}\n */\nfunction createGateway(environment, realm) {\n  return environment === 'prod' ? 'wss://sdkgw.' + realm + '.twilio.com' : 'wss://sdkgw.' + environment + '-' + realm + '.twilio.com';\n}\n\n/**\n * Handle connect response from the Insights gateway.\n * @param {InsightsPublisher} publisher\n * @param {*} response\n * @param {InsightsPublisherOptions} options\n */\nfunction handleConnectResponse(publisher, response, options) {\n  switch (response.type) {\n    case 'connected':\n      publisher._session = response.session;\n      publisher._reconnectAttemptsLeft = options.maxReconnectAttempts;\n      publisher._eventQueue.splice(0).forEach(publisher._publish, publisher);\n      publisher.emit('connected');\n      break;\n    case 'error':\n      publisher._ws.close();\n      publisher.emit('disconnected', new Error(response.message));\n      break;\n  }\n}\n\n/**\n * Start re-connecting to the Insights gateway with an appropriate delay based\n * on InsightsPublisherOptions#reconnectIntervalMs.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\nfunction reconnect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  var connectInterval = Date.now() - publisher._connectTimestamp;\n  var timeToWait = options.reconnectIntervalMs - connectInterval;\n\n  if (timeToWait > 0) {\n    setTimeout(function () {\n      connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }, timeToWait);\n    return;\n  }\n\n  connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n}\n\n/**\n * The {@link InsightsPublisher} is connected to the gateway.\n * @event InsightsPublisher#connected\n */\n\n/**\n * The {@link InsightsPublisher} is disconnected from the gateway.\n * @event InsightsPublisher#disconnected\n * @param {Error} [error] - Optional error if disconnected unintentionally\n */\n\n/**\n * The {@link InsightsPublisher} is re-connecting to the gateway.\n * @event InsightsPublisher#reconnecting\n */\n\n/**\n * {@link InsightsPublisher} options.\n * @typedef {object} InsightsPublisherOptions\n * @property {string} [gateway=sdkgw.{environment}-{realm}.twilio.com] - Insights WebSocket gateway url\n * @property {number} [maxReconnectAttempts=5] - Max re-connect attempts\n * @property {number} [reconnectIntervalMs=50] - Re-connect interval in ms\n */\n\nmodule.exports = InsightsPublisher;"]},"metadata":{},"sourceType":"script"}