{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tree_1 = require(\"./utils/tree\");\n\nclass Entry {\n  constructor(value, revision) {\n    this.value = value;\n    this.revision = revision || 0;\n  }\n\n  get isValid() {\n    return true;\n  }\n\n}\n\nclass Tombstone {\n  constructor(revision) {\n    this.revision = revision;\n  }\n\n  get isValid() {\n    return false;\n  }\n\n}\n\nclass Cache {\n  constructor() {\n    this.items = new tree_1.TreeMap();\n  }\n\n  store(key, value, revision) {\n    let entry = this.items.get(key);\n\n    if (entry && entry.revision > revision) {\n      if (entry.isValid) {\n        return entry.value;\n      }\n\n      return null;\n    }\n\n    this.items.set(key, new Entry(value, revision));\n    return value;\n  }\n\n  delete(key, revision, force = false) {\n    let curr = this.items.get(key);\n\n    if (!curr || curr.revision < revision || curr && force === true\n    /* forced delete when revision is unknown */\n    ) {\n        this.items.set(key, new Tombstone(revision));\n      }\n  }\n\n  isKnown(key, revision) {\n    let curr = this.items.get(key);\n    return curr && curr.revision >= revision;\n  }\n\n  get(key) {\n    let entry = this.items.get(key);\n\n    if (entry && entry.isValid) {\n      return entry.value;\n    }\n\n    return null;\n  }\n\n  has(key) {\n    let entry = this.items.get(key);\n    return entry && entry.isValid;\n  }\n\n  forEach(callbackfn) {\n    if (this.items) {\n      for (let [key, entry] of this.items) {\n        if (entry.isValid) {\n          callbackfn(key, entry.value);\n        }\n      }\n    }\n  }\n\n}\n\nexports.Cache = Cache;\nexports.default = Cache;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-sync/lib/cache.js"],"names":["Object","defineProperty","exports","value","tree_1","require","Entry","constructor","revision","isValid","Tombstone","Cache","items","TreeMap","store","key","entry","get","set","delete","force","curr","isKnown","has","forEach","callbackfn","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tree_1 = require(\"./utils/tree\");\nclass Entry {\n    constructor(value, revision) {\n        this.value = value;\n        this.revision = (revision || 0);\n    }\n    get isValid() {\n        return true;\n    }\n}\nclass Tombstone {\n    constructor(revision) {\n        this.revision = revision;\n    }\n    get isValid() {\n        return false;\n    }\n}\nclass Cache {\n    constructor() {\n        this.items = new tree_1.TreeMap();\n    }\n    store(key, value, revision) {\n        let entry = this.items.get(key);\n        if (entry && entry.revision > revision) {\n            if (entry.isValid) {\n                return entry.value;\n            }\n            return null;\n        }\n        this.items.set(key, new Entry(value, revision));\n        return value;\n    }\n    delete(key, revision, force = false) {\n        let curr = this.items.get(key);\n        if (!curr || curr.revision < revision ||\n            (curr && force === true) /* forced delete when revision is unknown */) {\n            this.items.set(key, new Tombstone(revision));\n        }\n    }\n    isKnown(key, revision) {\n        let curr = this.items.get(key);\n        return curr && curr.revision >= revision;\n    }\n    get(key) {\n        let entry = this.items.get(key);\n        if (entry && entry.isValid) {\n            return entry.value;\n        }\n        return null;\n    }\n    has(key) {\n        let entry = this.items.get(key);\n        return entry && entry.isValid;\n    }\n    forEach(callbackfn) {\n        if (this.items) {\n            for (let [key, entry] of this.items) {\n                if (entry.isValid) {\n                    callbackfn(key, entry.value);\n                }\n            }\n        }\n    }\n}\nexports.Cache = Cache;\nexports.default = Cache;\n"]},"metadata":{},"sourceType":"script"}