{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require.getSdpFormat;\n\nvar packageInfo = require('../../../package.json');\n\nvar InsightsPublisher = require('../../util/insightspublisher');\n\nvar NullInsightsPublisher = require('../../util/insightspublisher/null');\n\nvar StateMachine = require('../../statemachine');\n\nvar TwilioConnection = require('../../twilioconnection');\n\nvar DefaultBackoff = require('backoff');\n\nvar _require2 = require('../../util/constants'),\n    reconnectBackoffConfig = _require2.reconnectBackoffConfig;\n\nvar Timeout = require('../../util/timeout');\n\nvar _require3 = require('../../util'),\n    createBandwidthProfilePayload = _require3.createBandwidthProfilePayload,\n    createMediaSignalingPayload = _require3.createMediaSignalingPayload,\n    createSubscribePayload = _require3.createSubscribePayload,\n    getUserAgent = _require3.getUserAgent;\n\nvar _require4 = require('../../util/twilio-video-errors'),\n    createTwilioError = _require4.createTwilioError,\n    RoomCompletedError = _require4.RoomCompletedError,\n    SignalingConnectionError = _require4.SignalingConnectionError;\n\nvar RSP_VERSION = 2;\nvar SDK_NAME = packageInfo.name + '.js';\nvar SDK_VERSION = packageInfo.version;\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nvar states = {\n  connecting: ['connected', 'disconnected'],\n  connected: ['disconnected', 'syncing'],\n  syncing: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\n\nvar TwilioConnectionTransport = function (_StateMachine) {\n  _inherits(TwilioConnectionTransport, _StateMachine);\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n\n\n  function TwilioConnectionTransport(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    _classCallCheck(this, TwilioConnectionTransport);\n\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      InsightsPublisher: InsightsPublisher,\n      NullInsightsPublisher: NullInsightsPublisher,\n      TwilioConnection: TwilioConnection,\n      sdpFormat: getSdpFormat(options.sdpSemantics),\n      trackPriority: true,\n      trackSwitchOff: true,\n      userAgent: getUserAgent()\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (TwilioConnectionTransport.__proto__ || Object.getPrototypeOf(TwilioConnectionTransport)).call(this, 'connecting', states));\n\n    var eventPublisherOptions = {};\n\n    if (options.wsServerInsights) {\n      eventPublisherOptions.gateway = options.wsServerInsights;\n    }\n\n    var EventPublisher = options.insights ? options.InsightsPublisher : options.NullInsightsPublisher;\n    Object.defineProperties(_this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _eventPublisher: {\n        value: new EventPublisher(accessToken, SDK_NAME, SDK_VERSION, options.environment, options.realm, eventPublisherOptions)\n      },\n      _iceServerSourceStatus: {\n        value: options.iceServerSourceStatus\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name\n      },\n      _networkQuality: {\n        value: options.networkQuality\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0,\n        // initially 0, set only after 1st successful connection.\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: options.Backoff.exponential(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    });\n    setupEventListeners(_this);\n\n    _this.once('connected', function (_ref) {\n      var sid = _ref.sid,\n          participant = _ref.participant;\n\n      _this._eventPublisher.connect(sid, participant.sid);\n    });\n\n    return _this;\n  }\n  /**\n   * Send a Connect, Sync or Disconnect RSP message.\n   * @private\n   */\n\n\n  _createClass(TwilioConnectionTransport, [{\n    key: '_sendConnectOrSyncOrDisconnectMessage',\n    value: function _sendConnectOrSyncOrDisconnectMessage() {\n      if (this.state === 'connected') {\n        return;\n      }\n\n      if (this.state === 'disconnected') {\n        this._twilioConnection.sendMessage({\n          session: this._session,\n          type: 'disconnect',\n          version: RSP_VERSION\n        });\n\n        return;\n      }\n\n      var type = {\n        connecting: 'connect',\n        syncing: 'sync'\n      }[this.state];\n      var message = {\n        name: this._name,\n        participant: this._localParticipant.getState(),\n        peer_connections: this._peerConnectionManager.getStates(),\n        type: type,\n        version: RSP_VERSION\n      };\n\n      if (message.type === 'connect') {\n        message.ice_servers = this._iceServerSourceStatus;\n        message.publisher = {\n          name: SDK_NAME,\n          sdk_version: SDK_VERSION,\n          user_agent: this._userAgent\n        };\n\n        if (this._bandwidthProfile) {\n          message.bandwidth_profile = createBandwidthProfilePayload(this._bandwidthProfile);\n        }\n\n        message.media_signaling = createMediaSignalingPayload(this._dominantSpeaker, this._networkQuality, this._trackPriority, this._trackSwitchOff);\n        message.subscribe = createSubscribePayload(this._automaticSubscription);\n        var sdpFormat = this._options.sdpFormat;\n\n        if (sdpFormat) {\n          message.format = sdpFormat;\n        }\n\n        message.token = this._accessToken;\n      } else if (message.type === 'sync') {\n        message.session = this._session;\n        message.token = this._accessToken;\n      } else if (message.type === 'update') {\n        message.session = this._session;\n      }\n\n      this._twilioConnection.sendMessage(message);\n    }\n    /**\n     * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n     * in disconnection.\n     * @param {TwilioError} [error]\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect(error) {\n      if (this.state !== 'disconnected') {\n        this.preempt('disconnected', null, [error]);\n\n        this._sendConnectOrSyncOrDisconnectMessage();\n\n        this._twilioConnection.close();\n\n        this._eventPublisher.disconnect();\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Publish an RSP Update. Returns true if calling the method resulted in\n     * publishing (or eventually publishing) the update.\n     * @param {object} update\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(update) {\n      switch (this.state) {\n        case 'connected':\n          this._twilioConnection.sendMessage(Object.assign({\n            session: this._session,\n            type: 'update',\n            version: RSP_VERSION\n          }, update));\n\n          return true;\n\n        case 'connecting':\n        case 'syncing':\n          this._updatesToSend.push(update);\n\n          return true;\n\n        case 'disconnected':\n        default:\n          return false;\n      }\n    }\n    /**\n     * Publish (or queue) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnected from the Insights gateway\n     */\n\n  }, {\n    key: 'publishEvent',\n    value: function publishEvent(groupName, eventName, payload) {\n      return this._eventPublisher.publish(groupName, eventName, payload);\n    }\n    /**\n     * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n     * syncing.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'sync',\n    value: function sync() {\n      if (this.state === 'connected') {\n        this.preempt('syncing');\n\n        this._sendConnectOrSyncOrDisconnectMessage();\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @returns {void}\n     */\n\n  }, {\n    key: '_setSession',\n    value: function _setSession(session, sessionTimeout) {\n      this._session = session;\n      this._sessionTimeoutMS = sessionTimeout * 1000;\n    }\n    /**\n     * Determines if we should attempt reconnect.\n     * returns a Promise to wait on before attempting to\n     * reconnect. returns null if its not okay to reconnect.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_getReconnectTimer',\n    value: function _getReconnectTimer() {\n      var _this2 = this;\n\n      if (this._sessionTimeoutMS === 0) {\n        // this means either we have never connected.\n        // or we timed out while trying to reconnect\n        // In either case we do not want to reconnect.\n        return null;\n      } // start session timer\n\n\n      if (!this._sessionTimer) {\n        this._sessionTimer = new Timeout(function () {\n          // ensure that _clearReconnectTimer wasn't\n          // called while we were waiting.\n          if (_this2._sessionTimer) {\n            // do not allow any more reconnect attempts.\n            _this2._sessionTimeoutMS = 0;\n          }\n        }, this._sessionTimeoutMS);\n      } // return promise that waits with exponential backoff.\n\n\n      return new Promise(function (resolve) {\n        _this2._reconnectBackoff.once('ready', resolve);\n\n        _this2._reconnectBackoff.backoff();\n      });\n    }\n    /**\n     * clears the session reconnect timer.\n     *\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_clearReconnectTimer',\n    value: function _clearReconnectTimer() {\n      this._reconnectBackoff.reset();\n\n      if (this._sessionTimer) {\n        this._sessionTimer.clear();\n\n        this._sessionTimer = null;\n      }\n    }\n  }]);\n\n  return TwilioConnectionTransport;\n}(StateMachine);\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} state\n */\n\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n    var reduced = peerConnectionsById.get(update.id) || update; // First, reduce the top-level `description` property.\n\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    } // Then, reduce the top-level `ice` property.\n\n\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    } // Finally, update the map.\n\n\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce(function (reduced, update) {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    } // Then, reduce the top-level `peer_connections` property.\n\n    /* eslint camelcase:0 */\n\n\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n    }\n\n    return reduced;\n  }, {});\n}\n\nfunction setupEventListeners(transport) {\n  function connect() {\n    transport._sendConnectOrSyncOrDisconnectMessage();\n  }\n\n  function createOrResetTwilioConnection() {\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n\n    var _options = transport._options,\n        _wsServer = transport._wsServer;\n    var TwilioConnection = transport._options.TwilioConnection;\n    transport._twilioConnection = new TwilioConnection(_wsServer, _options);\n    return transport._twilioConnection;\n  }\n\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n\n    var reconnectTimer = transport._getReconnectTimer();\n\n    if (!reconnectTimer) {\n      transport.disconnect(new SignalingConnectionError());\n      return;\n    }\n\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n\n    reconnectTimer.then(startConnect);\n  }\n\n  function startConnect() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    var twilioConnection = createOrResetTwilioConnection();\n    twilioConnection.once('close', disconnect);\n    twilioConnection.on('message', handleMessage);\n    twilioConnection.once('open', connect);\n  }\n\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n            transport.emit('message', message);\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      case 'connecting':\n        switch (message.type) {\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n\n            return;\n\n          case 'synced':\n            transport._clearReconnectTimer();\n\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n\n          default:\n            // Do nothing.\n            return;\n        }\n\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected':\n        {\n          var updates = transport._updatesToSend.splice(0);\n\n          if (updates.length) {\n            transport.publish(reduceUpdates(updates));\n          }\n\n          transport._updatesReceived.splice(0).forEach(function (update) {\n            return transport.emit('message', update);\n          });\n\n          return;\n        }\n\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n\n      case 'syncing':\n        // Do nothing.\n        return;\n\n      default:\n        // Impossible\n        return;\n    }\n  });\n  startConnect();\n}\n\nmodule.exports = TwilioConnectionTransport;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/signaling/v2/twilioconnectiontransport.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","_require","require","getSdpFormat","packageInfo","InsightsPublisher","NullInsightsPublisher","StateMachine","TwilioConnection","DefaultBackoff","_require2","reconnectBackoffConfig","Timeout","_require3","createBandwidthProfilePayload","createMediaSignalingPayload","createSubscribePayload","getUserAgent","_require4","createTwilioError","RoomCompletedError","SignalingConnectionError","RSP_VERSION","SDK_NAME","name","SDK_VERSION","version","states","connecting","connected","syncing","disconnected","TwilioConnectionTransport","_StateMachine","accessToken","localParticipant","peerConnectionManager","wsServer","options","assign","Backoff","sdpFormat","sdpSemantics","trackPriority","trackSwitchOff","userAgent","_this","getPrototypeOf","eventPublisherOptions","wsServerInsights","gateway","EventPublisher","insights","_accessToken","_automaticSubscription","automaticSubscription","_bandwidthProfile","bandwidthProfile","_dominantSpeaker","dominantSpeaker","_eventPublisher","environment","realm","_iceServerSourceStatus","iceServerSourceStatus","_localParticipant","_name","_networkQuality","networkQuality","_options","_peerConnectionManager","_sessionTimer","_sessionTimeoutMS","_reconnectBackoff","exponential","_session","_trackPriority","_trackSwitchOff","_twilioConnection","_updatesReceived","_updatesToSend","_userAgent","_wsServer","setupEventListeners","once","_ref","sid","participant","connect","_sendConnectOrSyncOrDisconnectMessage","state","sendMessage","session","type","message","getState","peer_connections","getStates","ice_servers","publisher","sdk_version","user_agent","bandwidth_profile","media_signaling","subscribe","format","token","disconnect","error","preempt","close","publish","update","push","publishEvent","groupName","eventName","payload","sync","_setSession","sessionTimeout","_getReconnectTimer","_this2","Promise","resolve","backoff","_clearReconnectTimer","reset","clear","reducePeerConnections","peerConnections","Array","from","reduce","peerConnectionsById","reduced","get","id","description","revision","ice","set","Map","values","reduceUpdates","updates","concat","transport","createOrResetTwilioConnection","removeListener","handleMessage","reconnectTimer","then","startConnect","twilioConnection","on","code","emit","status","session_timeout","stateChanged","splice","forEach","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require.getSdpFormat;\n\nvar packageInfo = require('../../../package.json');\nvar InsightsPublisher = require('../../util/insightspublisher');\nvar NullInsightsPublisher = require('../../util/insightspublisher/null');\nvar StateMachine = require('../../statemachine');\nvar TwilioConnection = require('../../twilioconnection');\nvar DefaultBackoff = require('backoff');\n\nvar _require2 = require('../../util/constants'),\n    reconnectBackoffConfig = _require2.reconnectBackoffConfig;\n\nvar Timeout = require('../../util/timeout');\n\nvar _require3 = require('../../util'),\n    createBandwidthProfilePayload = _require3.createBandwidthProfilePayload,\n    createMediaSignalingPayload = _require3.createMediaSignalingPayload,\n    createSubscribePayload = _require3.createSubscribePayload,\n    getUserAgent = _require3.getUserAgent;\n\nvar _require4 = require('../../util/twilio-video-errors'),\n    createTwilioError = _require4.createTwilioError,\n    RoomCompletedError = _require4.RoomCompletedError,\n    SignalingConnectionError = _require4.SignalingConnectionError;\n\nvar RSP_VERSION = 2;\nvar SDK_NAME = packageInfo.name + '.js';\nvar SDK_VERSION = packageInfo.version;\n\n/*\nTwilioConnectionTransport States\n----------------\n\n                      +-----------+\n                      |           |\n                      |  syncing  |---------+\n                      |           |         |\n                      +-----------+         |\n                         ^     |            |\n                         |     |            |\n                         |     v            v\n    +------------+    +-----------+    +--------------+\n    |            |    |           |    |              |\n    | connecting |--->| connected |--->| disconnected |\n    |            |    |           |    |              |\n    +------------+    +-----------+    +--------------+\n             |                              ^\n             |                              |\n             |                              |\n             +------------------------------+\n\n*/\n\nvar states = {\n  connecting: ['connected', 'disconnected'],\n  connected: ['disconnected', 'syncing'],\n  syncing: ['connected', 'disconnected'],\n  disconnected: []\n};\n\n/**\n * A {@link TwilioConnectionTransport} supports sending and receiving Room Signaling Protocol\n * (RSP) messages. It also supports RSP requests, such as Sync and Disconnect.\n * @extends StateMachine\n * @emits TwilioConnectionTransport#connected\n * @emits TwilioConnectionTransport#message\n */\n\nvar TwilioConnectionTransport = function (_StateMachine) {\n  _inherits(TwilioConnectionTransport, _StateMachine);\n\n  /**\n   * Construct a {@link TwilioConnectionTransport}.\n   * @param {?string} name\n   * @param {string} accessToken\n   * @param {ParticipantSignaling} localParticipant\n   * @param {PeerConnectionManager} peerConnectionManager\n   * @param {string} wsServer\n   * @param {object} [options]\n   */\n  function TwilioConnectionTransport(name, accessToken, localParticipant, peerConnectionManager, wsServer, options) {\n    _classCallCheck(this, TwilioConnectionTransport);\n\n    options = Object.assign({\n      Backoff: DefaultBackoff,\n      InsightsPublisher: InsightsPublisher,\n      NullInsightsPublisher: NullInsightsPublisher,\n      TwilioConnection: TwilioConnection,\n      sdpFormat: getSdpFormat(options.sdpSemantics),\n      trackPriority: true,\n      trackSwitchOff: true,\n      userAgent: getUserAgent()\n    }, options);\n\n    var _this = _possibleConstructorReturn(this, (TwilioConnectionTransport.__proto__ || Object.getPrototypeOf(TwilioConnectionTransport)).call(this, 'connecting', states));\n\n    var eventPublisherOptions = {};\n    if (options.wsServerInsights) {\n      eventPublisherOptions.gateway = options.wsServerInsights;\n    }\n\n    var EventPublisher = options.insights ? options.InsightsPublisher : options.NullInsightsPublisher;\n    Object.defineProperties(_this, {\n      _accessToken: {\n        value: accessToken\n      },\n      _automaticSubscription: {\n        value: options.automaticSubscription\n      },\n      _bandwidthProfile: {\n        value: options.bandwidthProfile\n      },\n      _dominantSpeaker: {\n        value: options.dominantSpeaker\n      },\n      _eventPublisher: {\n        value: new EventPublisher(accessToken, SDK_NAME, SDK_VERSION, options.environment, options.realm, eventPublisherOptions)\n      },\n      _iceServerSourceStatus: {\n        value: options.iceServerSourceStatus\n      },\n      _localParticipant: {\n        value: localParticipant\n      },\n      _name: {\n        value: name\n      },\n      _networkQuality: {\n        value: options.networkQuality\n      },\n      _options: {\n        value: options\n      },\n      _peerConnectionManager: {\n        value: peerConnectionManager\n      },\n      _sessionTimer: {\n        value: null,\n        writable: true\n      },\n      _sessionTimeoutMS: {\n        value: 0, // initially 0, set only after 1st successful connection.\n        writable: true\n      },\n      _reconnectBackoff: {\n        value: options.Backoff.exponential(reconnectBackoffConfig)\n      },\n      _session: {\n        value: null,\n        writable: true\n      },\n      _trackPriority: {\n        value: options.trackPriority\n      },\n      _trackSwitchOff: {\n        value: options.trackSwitchOff\n      },\n      _twilioConnection: {\n        value: null,\n        writable: true\n      },\n      _updatesReceived: {\n        value: []\n      },\n      _updatesToSend: {\n        value: []\n      },\n      _userAgent: {\n        value: options.userAgent\n      },\n      _wsServer: {\n        value: wsServer\n      }\n    });\n    setupEventListeners(_this);\n\n    _this.once('connected', function (_ref) {\n      var sid = _ref.sid,\n          participant = _ref.participant;\n\n      _this._eventPublisher.connect(sid, participant.sid);\n    });\n    return _this;\n  }\n\n  /**\n   * Send a Connect, Sync or Disconnect RSP message.\n   * @private\n   */\n\n\n  _createClass(TwilioConnectionTransport, [{\n    key: '_sendConnectOrSyncOrDisconnectMessage',\n    value: function _sendConnectOrSyncOrDisconnectMessage() {\n      if (this.state === 'connected') {\n        return;\n      }\n\n      if (this.state === 'disconnected') {\n        this._twilioConnection.sendMessage({\n          session: this._session,\n          type: 'disconnect',\n          version: RSP_VERSION\n        });\n        return;\n      }\n\n      var type = {\n        connecting: 'connect',\n        syncing: 'sync'\n      }[this.state];\n\n      var message = {\n        name: this._name,\n        participant: this._localParticipant.getState(),\n        peer_connections: this._peerConnectionManager.getStates(),\n        type: type,\n        version: RSP_VERSION\n      };\n\n      if (message.type === 'connect') {\n        message.ice_servers = this._iceServerSourceStatus;\n\n        message.publisher = {\n          name: SDK_NAME,\n          sdk_version: SDK_VERSION,\n          user_agent: this._userAgent\n        };\n\n        if (this._bandwidthProfile) {\n          message.bandwidth_profile = createBandwidthProfilePayload(this._bandwidthProfile);\n        }\n\n        message.media_signaling = createMediaSignalingPayload(this._dominantSpeaker, this._networkQuality, this._trackPriority, this._trackSwitchOff);\n\n        message.subscribe = createSubscribePayload(this._automaticSubscription);\n\n        var sdpFormat = this._options.sdpFormat;\n        if (sdpFormat) {\n          message.format = sdpFormat;\n        }\n        message.token = this._accessToken;\n      } else if (message.type === 'sync') {\n        message.session = this._session;\n        message.token = this._accessToken;\n      } else if (message.type === 'update') {\n        message.session = this._session;\n      }\n      this._twilioConnection.sendMessage(message);\n    }\n\n    /**\n     * Disconnect the {@link TwilioConnectionTransport}. Returns true if calling the method resulted\n     * in disconnection.\n     * @param {TwilioError} [error]\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect(error) {\n      if (this.state !== 'disconnected') {\n        this.preempt('disconnected', null, [error]);\n        this._sendConnectOrSyncOrDisconnectMessage();\n        this._twilioConnection.close();\n        this._eventPublisher.disconnect();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Publish an RSP Update. Returns true if calling the method resulted in\n     * publishing (or eventually publishing) the update.\n     * @param {object} update\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'publish',\n    value: function publish(update) {\n      switch (this.state) {\n        case 'connected':\n          this._twilioConnection.sendMessage(Object.assign({\n            session: this._session,\n            type: 'update',\n            version: RSP_VERSION\n          }, update));\n          return true;\n        case 'connecting':\n        case 'syncing':\n          this._updatesToSend.push(update);\n          return true;\n        case 'disconnected':\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Publish (or queue) an event to the Insights gateway.\n     * @param {string} groupName - Event group name\n     * @param {string} eventName - Event name\n     * @param {object} payload - Event payload\n     * @returns {boolean} true if queued or published, false if disconnected from the Insights gateway\n     */\n\n  }, {\n    key: 'publishEvent',\n    value: function publishEvent(groupName, eventName, payload) {\n      return this._eventPublisher.publish(groupName, eventName, payload);\n    }\n\n    /**\n     * Sync the {@link TwilioConnectionTransport}. Returns true if calling the method resulted in\n     * syncing.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'sync',\n    value: function sync() {\n      if (this.state === 'connected') {\n        this.preempt('syncing');\n        this._sendConnectOrSyncOrDisconnectMessage();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * @returns {void}\n     */\n\n  }, {\n    key: '_setSession',\n    value: function _setSession(session, sessionTimeout) {\n      this._session = session;\n      this._sessionTimeoutMS = sessionTimeout * 1000;\n    }\n\n    /**\n     * Determines if we should attempt reconnect.\n     * returns a Promise to wait on before attempting to\n     * reconnect. returns null if its not okay to reconnect.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_getReconnectTimer',\n    value: function _getReconnectTimer() {\n      var _this2 = this;\n\n      if (this._sessionTimeoutMS === 0) {\n        // this means either we have never connected.\n        // or we timed out while trying to reconnect\n        // In either case we do not want to reconnect.\n        return null;\n      }\n\n      // start session timer\n      if (!this._sessionTimer) {\n        this._sessionTimer = new Timeout(function () {\n          // ensure that _clearReconnectTimer wasn't\n          // called while we were waiting.\n          if (_this2._sessionTimer) {\n            // do not allow any more reconnect attempts.\n            _this2._sessionTimeoutMS = 0;\n          }\n        }, this._sessionTimeoutMS);\n      }\n\n      // return promise that waits with exponential backoff.\n      return new Promise(function (resolve) {\n        _this2._reconnectBackoff.once('ready', resolve);\n        _this2._reconnectBackoff.backoff();\n      });\n    }\n\n    /**\n     * clears the session reconnect timer.\n     *\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_clearReconnectTimer',\n    value: function _clearReconnectTimer() {\n      this._reconnectBackoff.reset();\n      if (this._sessionTimer) {\n        this._sessionTimer.clear();\n        this._sessionTimer = null;\n      }\n    }\n  }]);\n\n  return TwilioConnectionTransport;\n}(StateMachine);\n\n/**\n * @event TwilioConnectionTransport#connected\n * @param {object} initialState\n */\n\n/**\n * @event TwilioConnectionTransport#message\n * @param {object} state\n */\n\nfunction reducePeerConnections(peerConnections) {\n  return Array.from(peerConnections.reduce(function (peerConnectionsById, update) {\n    var reduced = peerConnectionsById.get(update.id) || update;\n\n    // First, reduce the top-level `description` property.\n    if (!reduced.description && update.description) {\n      reduced.description = update.description;\n    } else if (reduced.description && update.description) {\n      if (update.description.revision > reduced.description.revision) {\n        reduced.description = update.description;\n      }\n    }\n\n    // Then, reduce the top-level `ice` property.\n    if (!reduced.ice && update.ice) {\n      reduced.ice = update.ice;\n    } else if (reduced.ice && update.ice) {\n      if (update.ice.revision > reduced.ice.revision) {\n        reduced.ice = update.ice;\n      }\n    }\n\n    // Finally, update the map.\n    peerConnectionsById.set(reduced.id, reduced);\n    return peerConnectionsById;\n  }, new Map()).values());\n}\n\nfunction reduceUpdates(updates) {\n  return updates.reduce(function (reduced, update) {\n    // First, reduce the top-level `participant` property.\n    if (!reduced.participant && update.participant) {\n      reduced.participant = update.participant;\n    } else if (reduced.participant && update.participant) {\n      if (update.participant.revision > reduced.participant.revision) {\n        reduced.participant = update.participant;\n      }\n    }\n\n    // Then, reduce the top-level `peer_connections` property.\n    /* eslint camelcase:0 */\n    if (!reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(update.peer_connections);\n    } else if (reduced.peer_connections && update.peer_connections) {\n      reduced.peer_connections = reducePeerConnections(reduced.peer_connections.concat(update.peer_connections));\n    }\n    return reduced;\n  }, {});\n}\n\nfunction setupEventListeners(transport) {\n  function connect() {\n    transport._sendConnectOrSyncOrDisconnectMessage();\n  }\n\n  function createOrResetTwilioConnection() {\n    if (transport._twilioConnection) {\n      transport._twilioConnection.removeListener('message', handleMessage);\n    }\n    var _options = transport._options,\n        _wsServer = transport._wsServer;\n    var TwilioConnection = transport._options.TwilioConnection;\n\n    transport._twilioConnection = new TwilioConnection(_wsServer, _options);\n    return transport._twilioConnection;\n  }\n\n  function disconnect(error) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (!error) {\n      transport.disconnect();\n      return;\n    }\n\n    var reconnectTimer = transport._getReconnectTimer();\n    if (!reconnectTimer) {\n      transport.disconnect(new SignalingConnectionError());\n      return;\n    }\n\n    if (transport.state === 'connected') {\n      transport.preempt('syncing');\n    }\n\n    reconnectTimer.then(startConnect);\n  }\n\n  function startConnect() {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    var twilioConnection = createOrResetTwilioConnection();\n    twilioConnection.once('close', disconnect);\n    twilioConnection.on('message', handleMessage);\n    twilioConnection.once('open', connect);\n  }\n\n  function handleMessage(message) {\n    if (transport.state === 'disconnected') {\n      return;\n    }\n    if (message.type === 'error') {\n      transport.disconnect(createTwilioError(message.code, message.message));\n      return;\n    }\n    switch (transport.state) {\n      case 'connected':\n        switch (message.type) {\n          case 'connected':\n          case 'synced':\n          case 'update':\n            transport.emit('message', message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'connecting':\n        switch (message.type) {\n          case 'connected':\n            transport._setSession(message.session, message.options.session_timeout);\n            transport.emit('connected', message);\n            transport.preempt('connected');\n            return;\n          case 'synced':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      case 'syncing':\n        switch (message.type) {\n          case 'connected':\n          case 'update':\n            transport._updatesReceived.push(message);\n            return;\n          case 'synced':\n            transport._clearReconnectTimer();\n            transport.emit('message', message);\n            transport.preempt('connected');\n            return;\n          case 'disconnected':\n            transport.disconnect(message.status === 'completed' ? new RoomCompletedError() : null);\n            return;\n          default:\n            // Do nothing.\n            return;\n        }\n      default:\n        // Impossible\n        return;\n    }\n  }\n\n  transport.on('stateChanged', function stateChanged(state) {\n    switch (state) {\n      case 'connected':\n        {\n          var updates = transport._updatesToSend.splice(0);\n          if (updates.length) {\n            transport.publish(reduceUpdates(updates));\n          }\n          transport._updatesReceived.splice(0).forEach(function (update) {\n            return transport.emit('message', update);\n          });\n          return;\n        }\n      case 'disconnected':\n        transport._twilioConnection.removeListener('message', handleMessage);\n        transport.removeListener('stateChanged', stateChanged);\n        return;\n      case 'syncing':\n        // Do nothing.\n        return;\n      default:\n        // Impossible\n        return;\n    }\n  });\n\n  startConnect();\n}\n\nmodule.exports = TwilioConnectionTransport;"]},"metadata":{},"sourceType":"script"}