{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EventEmitter = require('./eventemitter');\n\nvar RemoteParticipant = require('./remoteparticipant');\n\nvar StatsReport = require('./stats/statsreport');\n\nvar _require = require('./util'),\n    valueToJSON = _require.valueToJSON;\n\nvar nInstances = 0;\n/**\n * A {@link Room} represents communication between you and one or more\n * {@link RemoteParticipant}s sharing {@link AudioTrack}s and\n * {@link VideoTrack}s.\n * <br><br>\n * You can connect to a {@link Room} by calling {@link connect}.\n * @extends EventEmitter\n * @property {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @property {boolean} isRecording - Whether or not the {@link Room} is being\n *   recorded\n * @property {LocalParticipant} localParticipant - Your {@link LocalParticipant}\n *   in the {@link Room}\n * @property {string} mediaRegion - String indicating geographical region\n *    where  media is processed for the {@link Room}.\n * @property {string} name - The {@link Room}'s name\n * @property {Map<Participant.SID, RemoteParticipant>} participants -\n *   The {@link RemoteParticipant}s participating in this {@link Room}\n * @property {Room.SID} sid - The {@link Room}'s SID\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @throws {SignalingConnectionDisconnectedError}\n * @emits Room#disconnected\n * @emits Room#participantConnected\n * @emits Room#participantDisconnected\n * @emits Room#participantReconnected\n * @emits Room#participantReconnecting\n * @emits Room#reconnected\n * @emits Room#reconnecting\n * @emits Room#recordingStarted\n * @emits Room#recordingStopped\n * @emits Room#trackDimensionsChanged\n * @emits Room#trackDisabled\n * @emits Room#trackEnabled\n * @emits Room#trackMessage\n * @emits Room#trackPublished\n * @emits Room#trackPublishPriorityChanged\n * @emits Room#trackStarted\n * @emits Room#trackSubscribed\n * @emits Room#trackSwitchedOff\n * @emits Room#trackSwitchedOn\n * @emits Room#trackUnpublished\n * @emits Room#trackUnsubscribed\n */\n\nvar Room = function (_EventEmitter) {\n  _inherits(Room, _EventEmitter);\n  /**\n   * Construct a {@link Room}.\n   * @param {RoomSignaling} signaling\n   * @param {?object} [options={}]\n   */\n\n\n  function Room(localParticipant, signaling, options) {\n    _classCallCheck(this, Room);\n\n    var _this = _possibleConstructorReturn(this, (Room.__proto__ || Object.getPrototypeOf(Room)).call(this));\n\n    var log = options.log.createLog('default', _this);\n    var participants = new Map();\n    /* istanbul ignore next */\n\n    Object.defineProperties(_this, {\n      _log: {\n        value: log\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _options: {\n        value: options\n      },\n      _participants: {\n        value: participants\n      },\n      _signaling: {\n        value: signaling\n      },\n      dominantSpeaker: {\n        enumerable: true,\n        get: function get() {\n          return this.participants.get(signaling.dominantSpeakerSid) || null;\n        }\n      },\n      isRecording: {\n        enumerable: true,\n        get: function get() {\n          return signaling.recording.isEnabled || false;\n        }\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: signaling.name\n      },\n      participants: {\n        enumerable: true,\n        value: participants\n      },\n      sid: {\n        enumerable: true,\n        value: signaling.sid\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return signaling.state;\n        }\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: signaling.mediaRegion\n      }\n    });\n    handleRecordingEvents(_this, signaling.recording);\n    handleSignalingEvents(_this, signaling);\n    log.info('Created a new Room:', _this.name);\n    log.debug('Initial RemoteParticipants:', Array.from(_this._participants.values()));\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: 'toString',\n    value: function toString() {\n      return '[Room #' + this._instanceId + ': ' + this.sid + ']';\n    }\n    /**\n     * Disconnect from the {@link Room}.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._log.info('Disconnecting');\n\n      this._signaling.disconnect();\n\n      return this;\n    }\n    /**\n     * Get the {@link Room}'s media statistics. This is not supported in Safari 12.0 or below\n     * due to this bug : https://bugs.webkit.org/show_bug.cgi?id=192601\n     *\n     * @returns {Promise.<Array<StatsReport>>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this2 = this;\n\n      return this._signaling.getStats().then(function (responses) {\n        return Array.from(responses).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              id = _ref2[0],\n              response = _ref2[1];\n\n          return new StatsReport(id, Object.assign({}, response, {\n            localAudioTrackStats: rewriteLocalTrackIds(_this2, response.localAudioTrackStats),\n            localVideoTrackStats: rewriteLocalTrackIds(_this2, response.localVideoTrackStats)\n          }));\n        });\n      });\n    }\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return valueToJSON(this);\n    }\n  }]);\n\n  return Room;\n}(EventEmitter);\n\nfunction rewriteLocalTrackIds(room, trackStats) {\n  var localParticipantSignaling = room.localParticipant._signaling;\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var publication = localParticipantSignaling.tracks.get(trackStat.trackId);\n    var trackSender = localParticipantSignaling.getSender(publication);\n    return trackSender ? [Object.assign({}, trackStat, {\n      trackId: trackSender.id\n    })].concat(trackStats) : trackStats;\n  }, []);\n}\n/**\n * A {@link Room.SID} is a 34-character string starting with \"RM\"\n * that uniquely identifies a {@link Room}.\n * @type string\n * @typedef Room.SID\n */\n\n/**\n * The Dominant Speaker in the {@link Room} changed. Either the Dominant Speaker\n * is a new {@link RemoteParticipant} or the Dominant Speaker has been reset and\n * is now null.\n * @param {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @event Room#dominantSpeakerChanged\n */\n\n/**\n * Your {@link LocalParticipant} was disconnected from the {@link Room} and all\n * other {@link RemoteParticipant}s.\n * @param {Room} room - The {@link Room} your\n *   {@link LocalParticipant} was disconnected from\n * @param {?TwilioError} error - Present when the {@link LocalParticipant} got\n *   disconnected from the {@link Room} unexpectedly\n * @event Room#disconnected\n * @example\n * myRoom.on('disconnected', function(room, error) {\n *   if (error) {\n *     console.log('Unexpectedly disconnected:', error);\n *   }\n *   myRoom.localParticipant.tracks.forEach(function(track) {\n *     track.stop();\n *     track.detach();\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} joined the {@link Room}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who joined\n * @event Room#participantConnected\n * @example\n * myRoom.on('participantConnected', function(participant) {\n *   console.log(participant.identity + ' joined the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} left the {@link Room}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who left\n * @event Room#participantDisconnected\n * @example\n * myRoom.on('participantDisconnected', function(participant) {\n *   console.log(participant.identity + ' left the Room');\n *   participant.tracks.forEach(function(track) {\n *     track.detach().forEach(function(mediaElement) {\n *       mediaElement.remove();\n *     });\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that has reconnected.\n * @event Room#participantReconnected\n * @example\n * myRoom.on('participantReconnected', participant => {\n *   console.log(participant.identity + ' reconnected to the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that is reconnecting.\n * @event Room#participantReconnecting\n * @example\n * myRoom.on('participantReconnecting', participant => {\n *   console.log(participant.identity + ' is reconnecting to the Room');\n * });\n */\n\n/**\n * Your application successfully reconnected to the {@link Room}. When this\n * event is emitted, the {@link Room} is in state \"connected\".\n * @event Room#reconnected\n * @example\n * myRoom.on('reconnected', () => {\n *   console.log('Reconnected!');\n * });\n */\n\n/**\n * Your application is reconnecting to the {@link Room}. This happens when there\n * is a disruption in your signaling connection and/or your media connection. When\n * this event is emitted, the {@link Room} is in state \"reconnecting\". If reconnecting\n * succeeds, the {@link Room} will emit a \"reconnected\" event.\n * @param {MediaConnectionError|SignalingConnectionDisconnectedError} error - A\n *   {@link MediaConnectionError} if your application is reconnecting due to a\n *   disruption in your media connection, or a {@link SignalingConnectionDisconnectedError}\n *   if your application is reconnecting due to a disruption in your signaling connection\n * @event Room#reconnecting\n * @example\n * myRoom.on('reconnecting', error => {\n *   if (error.code === 53001) {\n *     console.log('Reconnecting your signaling connection!', error.message);\n *   } else if (error.code === 53405) {\n *     console.log('Reconnecting your media connection!', error.message);\n *   }\n * });\n */\n\n/**\n * The {@link Room} is now being recorded\n * @event Room#recordingStarted\n */\n\n/**\n * The {@link Room} is no longer being recorded\n * @event Room#recordingStopped\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link VideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteVideoTrack}'s dimensions changed\n * @event Room#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents disabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   disabled the {@link RemoteTrack}\n * @event Room#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents enabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   enabled the {@link RemoteTrack}\n * @event Room#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}'s.\n * @param {string|ArrayBuffer} data\n * @param {RemoteVideoTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteDataTrack} received the message\n * @event Room#trackMessage\n */\n\n/**\n * A {@link RemoteTrack} was published by a {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event Room#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   published the {@link RemoteTrack}\n * @example\n * function trackPublished(publication, participant) {\n *   console.log(`RemoteParticipant ${participant.sid} published Track ${publication.trackSid}`);\n * }\n *\n * // Handle RemoteTracks published after connecting to the Room.\n * room.on('trackPublished', trackPublished);\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(publication => trackPublished(publication, participant));\n * });\n */\n\n/**\n * One of a {@link RemoteParticipant}'s {@link RemoteTrack}s in the {@link Room} started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} started\n * @event Room#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was subscribed\n * @event Room#trackSubscribed\n * @example\n * room.on('trackSubscribed', function(track, publication, participant) {\n *   var participantView = document.getElementById('participant-view-' + participant.identity);\n *   participantView.appendChild(track.attach());\n * });\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched off.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched off\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched off\n * @event Room#trackSwitchedOff\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched on\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched on\n * @event Room#trackSwitchedOn\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} could not be subscribed to\n * @event Room#trackSubscriptionFailed\n */\n\n/**\n * The {@link RemoteTrack}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority};\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that changed priority\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} changed priority\n * @event Room#trackPublishPriorityChanged\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by a {@link RemoteParticipant} to the {@link Room}.\n * @event Room#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   unpublished the {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was unsubscribed from\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was unsubscribed\n * @event Room#trackUnsubscribed\n * @example\n * room.on('trackUnsubscribed', function(track, publication, participant) {\n *   track.detach().forEach(function(mediaElement) {\n *     mediaElement.remove();\n *   });\n * });\n */\n\n\nfunction connectParticipant(room, participantSignaling) {\n  var log = room._log;\n  var participant = new RemoteParticipant(participantSignaling, {\n    log: log\n  });\n  log.info('A new RemoteParticipant connected:', participant);\n\n  room._participants.set(participant.sid, participant);\n\n  room.emit('participantConnected', participant); // Reemit Track and RemoteParticipant events.\n\n  var eventListeners = [['reconnected', 'participantReconnected'], ['reconnecting', 'participantReconnecting'], 'trackDimensionsChanged', 'trackDisabled', 'trackEnabled', 'trackMessage', 'trackPublished', 'trackPublishPriorityChanged', 'trackStarted', 'trackSubscribed', 'trackSubscriptionFailed', 'trackSwitchedOff', 'trackSwitchedOn', 'trackUnpublished', 'trackUnsubscribed'].map(function (eventOrPair) {\n    var _ref3 = Array.isArray(eventOrPair) ? eventOrPair : [eventOrPair, eventOrPair],\n        _ref4 = _slicedToArray(_ref3, 2),\n        event = _ref4[0],\n        participantEvent = _ref4[1];\n\n    function reemit() {\n      var args = [].slice.call(arguments);\n      args.unshift(participantEvent);\n      args.push(participant);\n      room.emit.apply(room, _toConsumableArray(args));\n    }\n\n    participant.on(event, reemit);\n    return [event, reemit];\n  });\n  participant.once('disconnected', function participantDisconnected() {\n    var dominantSpeaker = room.dominantSpeaker;\n    log.info('RemoteParticipant disconnected:', participant);\n\n    room._participants.delete(participant.sid);\n\n    eventListeners.forEach(function (args) {\n      participant.removeListener(args[0], args[1]);\n    });\n    room.emit('participantDisconnected', participant);\n\n    if (participant === dominantSpeaker) {\n      room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n    }\n  });\n}\n\nfunction handleRecordingEvents(room, recording) {\n  recording.on('updated', function updated() {\n    var started = recording.isEnabled;\n\n    room._log.info('Recording ' + (started ? 'started' : 'stopped'));\n\n    room.emit('recording' + (started ? 'Started' : 'Stopped'));\n  });\n}\n\nfunction handleSignalingEvents(room, signaling) {\n  var log = room._log; // Reemit RemoteParticipant events from the RoomSignaling.\n\n  log.debug('Creating a new RemoteParticipant for each ParticipantSignaling ' + 'in the RoomSignaling');\n  signaling.participants.forEach(connectParticipant.bind(null, room));\n  log.debug('Setting up RemoteParticipant creation for all subsequent ' + 'ParticipantSignalings that connect to the RoomSignaling');\n  signaling.on('participantConnected', connectParticipant.bind(null, room));\n  signaling.on('dominantSpeakerChanged', function () {\n    return room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n  }); // Reemit state transition events from the RoomSignaling.\n\n  signaling.on('stateChanged', function stateChanged(state, error) {\n    log.info('Transitioned to state:', state);\n\n    switch (state) {\n      case 'disconnected':\n        room.participants.forEach(function (participant) {\n          participant._unsubscribeTracks();\n        });\n        room.emit(state, room, error);\n        signaling.removeListener('stateChanged', stateChanged);\n        break;\n\n      case 'reconnecting':\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return room.emit('reconnecting', error);\n        }, 0);\n        break;\n\n      default:\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return room.emit('reconnected');\n        }, 0);\n    }\n  });\n}\n\nmodule.exports = Room;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/room.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","Constructor","protoProps","staticProps","prototype","_toConsumableArray","arr2","from","_classCallCheck","instance","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","EventEmitter","require","RemoteParticipant","StatsReport","_require","valueToJSON","nInstances","Room","_EventEmitter","localParticipant","signaling","options","_this","getPrototypeOf","log","createLog","participants","Map","_log","_instanceId","_options","_participants","_signaling","dominantSpeaker","get","dominantSpeakerSid","isRecording","recording","isEnabled","name","sid","state","mediaRegion","handleRecordingEvents","handleSignalingEvents","info","debug","values","toString","disconnect","getStats","_this2","then","responses","map","_ref","_ref2","id","response","assign","localAudioTrackStats","rewriteLocalTrackIds","localVideoTrackStats","toJSON","room","trackStats","localParticipantSignaling","reduce","trackStat","publication","tracks","trackId","trackSender","getSender","concat","connectParticipant","participantSignaling","participant","set","emit","eventListeners","eventOrPair","_ref3","_ref4","event","participantEvent","reemit","args","slice","arguments","unshift","apply","on","once","participantDisconnected","delete","forEach","removeListener","updated","started","bind","stateChanged","error","_unsubscribeTracks","setTimeout","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventEmitter = require('./eventemitter');\nvar RemoteParticipant = require('./remoteparticipant');\nvar StatsReport = require('./stats/statsreport');\n\nvar _require = require('./util'),\n    valueToJSON = _require.valueToJSON;\n\nvar nInstances = 0;\n\n/**\n * A {@link Room} represents communication between you and one or more\n * {@link RemoteParticipant}s sharing {@link AudioTrack}s and\n * {@link VideoTrack}s.\n * <br><br>\n * You can connect to a {@link Room} by calling {@link connect}.\n * @extends EventEmitter\n * @property {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @property {boolean} isRecording - Whether or not the {@link Room} is being\n *   recorded\n * @property {LocalParticipant} localParticipant - Your {@link LocalParticipant}\n *   in the {@link Room}\n * @property {string} mediaRegion - String indicating geographical region\n *    where  media is processed for the {@link Room}.\n * @property {string} name - The {@link Room}'s name\n * @property {Map<Participant.SID, RemoteParticipant>} participants -\n *   The {@link RemoteParticipant}s participating in this {@link Room}\n * @property {Room.SID} sid - The {@link Room}'s SID\n * @property {string} state - \"connected\", \"reconnecting\", or \"disconnected\"\n * @throws {SignalingConnectionDisconnectedError}\n * @emits Room#disconnected\n * @emits Room#participantConnected\n * @emits Room#participantDisconnected\n * @emits Room#participantReconnected\n * @emits Room#participantReconnecting\n * @emits Room#reconnected\n * @emits Room#reconnecting\n * @emits Room#recordingStarted\n * @emits Room#recordingStopped\n * @emits Room#trackDimensionsChanged\n * @emits Room#trackDisabled\n * @emits Room#trackEnabled\n * @emits Room#trackMessage\n * @emits Room#trackPublished\n * @emits Room#trackPublishPriorityChanged\n * @emits Room#trackStarted\n * @emits Room#trackSubscribed\n * @emits Room#trackSwitchedOff\n * @emits Room#trackSwitchedOn\n * @emits Room#trackUnpublished\n * @emits Room#trackUnsubscribed\n */\n\nvar Room = function (_EventEmitter) {\n  _inherits(Room, _EventEmitter);\n\n  /**\n   * Construct a {@link Room}.\n   * @param {RoomSignaling} signaling\n   * @param {?object} [options={}]\n   */\n  function Room(localParticipant, signaling, options) {\n    _classCallCheck(this, Room);\n\n    var _this = _possibleConstructorReturn(this, (Room.__proto__ || Object.getPrototypeOf(Room)).call(this));\n\n    var log = options.log.createLog('default', _this);\n    var participants = new Map();\n\n    /* istanbul ignore next */\n    Object.defineProperties(_this, {\n      _log: {\n        value: log\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _options: {\n        value: options\n      },\n      _participants: {\n        value: participants\n      },\n      _signaling: {\n        value: signaling\n      },\n      dominantSpeaker: {\n        enumerable: true,\n        get: function get() {\n          return this.participants.get(signaling.dominantSpeakerSid) || null;\n        }\n      },\n      isRecording: {\n        enumerable: true,\n        get: function get() {\n          return signaling.recording.isEnabled || false;\n        }\n      },\n      localParticipant: {\n        enumerable: true,\n        value: localParticipant\n      },\n      name: {\n        enumerable: true,\n        value: signaling.name\n      },\n      participants: {\n        enumerable: true,\n        value: participants\n      },\n      sid: {\n        enumerable: true,\n        value: signaling.sid\n      },\n      state: {\n        enumerable: true,\n        get: function get() {\n          return signaling.state;\n        }\n      },\n      mediaRegion: {\n        enumerable: true,\n        value: signaling.mediaRegion\n      }\n    });\n\n    handleRecordingEvents(_this, signaling.recording);\n    handleSignalingEvents(_this, signaling);\n\n    log.info('Created a new Room:', _this.name);\n    log.debug('Initial RemoteParticipants:', Array.from(_this._participants.values()));\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: 'toString',\n    value: function toString() {\n      return '[Room #' + this._instanceId + ': ' + this.sid + ']';\n    }\n\n    /**\n     * Disconnect from the {@link Room}.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._log.info('Disconnecting');\n      this._signaling.disconnect();\n      return this;\n    }\n\n    /**\n     * Get the {@link Room}'s media statistics. This is not supported in Safari 12.0 or below\n     * due to this bug : https://bugs.webkit.org/show_bug.cgi?id=192601\n     *\n     * @returns {Promise.<Array<StatsReport>>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this2 = this;\n\n      return this._signaling.getStats().then(function (responses) {\n        return Array.from(responses).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              id = _ref2[0],\n              response = _ref2[1];\n\n          return new StatsReport(id, Object.assign({}, response, {\n            localAudioTrackStats: rewriteLocalTrackIds(_this2, response.localAudioTrackStats),\n            localVideoTrackStats: rewriteLocalTrackIds(_this2, response.localVideoTrackStats)\n          }));\n        });\n      });\n    }\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return valueToJSON(this);\n    }\n  }]);\n\n  return Room;\n}(EventEmitter);\n\nfunction rewriteLocalTrackIds(room, trackStats) {\n  var localParticipantSignaling = room.localParticipant._signaling;\n  return trackStats.reduce(function (trackStats, trackStat) {\n    var publication = localParticipantSignaling.tracks.get(trackStat.trackId);\n    var trackSender = localParticipantSignaling.getSender(publication);\n    return trackSender ? [Object.assign({}, trackStat, { trackId: trackSender.id })].concat(trackStats) : trackStats;\n  }, []);\n}\n\n/**\n * A {@link Room.SID} is a 34-character string starting with \"RM\"\n * that uniquely identifies a {@link Room}.\n * @type string\n * @typedef Room.SID\n */\n\n/**\n * The Dominant Speaker in the {@link Room} changed. Either the Dominant Speaker\n * is a new {@link RemoteParticipant} or the Dominant Speaker has been reset and\n * is now null.\n * @param {?RemoteParticipant} dominantSpeaker - The Dominant Speaker in the\n *   {@link Room}, if any\n * @event Room#dominantSpeakerChanged\n */\n\n/**\n * Your {@link LocalParticipant} was disconnected from the {@link Room} and all\n * other {@link RemoteParticipant}s.\n * @param {Room} room - The {@link Room} your\n *   {@link LocalParticipant} was disconnected from\n * @param {?TwilioError} error - Present when the {@link LocalParticipant} got\n *   disconnected from the {@link Room} unexpectedly\n * @event Room#disconnected\n * @example\n * myRoom.on('disconnected', function(room, error) {\n *   if (error) {\n *     console.log('Unexpectedly disconnected:', error);\n *   }\n *   myRoom.localParticipant.tracks.forEach(function(track) {\n *     track.stop();\n *     track.detach();\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} joined the {@link Room}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who joined\n * @event Room#participantConnected\n * @example\n * myRoom.on('participantConnected', function(participant) {\n *   console.log(participant.identity + ' joined the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} left the {@link Room}.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who left\n * @event Room#participantDisconnected\n * @example\n * myRoom.on('participantDisconnected', function(participant) {\n *   console.log(participant.identity + ' left the Room');\n *   participant.tracks.forEach(function(track) {\n *     track.detach().forEach(function(mediaElement) {\n *       mediaElement.remove();\n *     });\n *   });\n * });\n */\n\n/**\n * A {@link RemoteParticipant} has reconnected to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that has reconnected.\n * @event Room#participantReconnected\n * @example\n * myRoom.on('participantReconnected', participant => {\n *   console.log(participant.identity + ' reconnected to the Room');\n * });\n */\n\n/**\n * A {@link RemoteParticipant} is reconnecting to the {@link Room} after a signaling connection disruption.\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} that is reconnecting.\n * @event Room#participantReconnecting\n * @example\n * myRoom.on('participantReconnecting', participant => {\n *   console.log(participant.identity + ' is reconnecting to the Room');\n * });\n */\n\n/**\n * Your application successfully reconnected to the {@link Room}. When this\n * event is emitted, the {@link Room} is in state \"connected\".\n * @event Room#reconnected\n * @example\n * myRoom.on('reconnected', () => {\n *   console.log('Reconnected!');\n * });\n */\n\n/**\n * Your application is reconnecting to the {@link Room}. This happens when there\n * is a disruption in your signaling connection and/or your media connection. When\n * this event is emitted, the {@link Room} is in state \"reconnecting\". If reconnecting\n * succeeds, the {@link Room} will emit a \"reconnected\" event.\n * @param {MediaConnectionError|SignalingConnectionDisconnectedError} error - A\n *   {@link MediaConnectionError} if your application is reconnecting due to a\n *   disruption in your media connection, or a {@link SignalingConnectionDisconnectedError}\n *   if your application is reconnecting due to a disruption in your signaling connection\n * @event Room#reconnecting\n * @example\n * myRoom.on('reconnecting', error => {\n *   if (error.code === 53001) {\n *     console.log('Reconnecting your signaling connection!', error.message);\n *   } else if (error.code === 53405) {\n *     console.log('Reconnecting your media connection!', error.message);\n *   }\n * });\n */\n\n/**\n * The {@link Room} is now being recorded\n * @event Room#recordingStarted\n */\n\n/**\n * The {@link Room} is no longer being recorded\n * @event Room#recordingStopped\n */\n\n/**\n * One of the {@link RemoteParticipant}'s {@link VideoTrack}'s dimensions changed.\n * @param {RemoteVideoTrack} track - The {@link RemoteVideoTrack} whose dimensions changed\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteVideoTrack}'s dimensions changed\n * @event Room#trackDimensionsChanged\n */\n\n/**\n * A {@link RemoteTrack} was disabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents disabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   disabled the {@link RemoteTrack}\n * @event Room#trackDisabled\n */\n\n/**\n * A {@link RemoteTrack} was enabled by a {@link RemoteParticipant} in the {@link Room}.\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication} that represents enabled {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   enabled the {@link RemoteTrack}\n * @event Room#trackEnabled\n */\n\n/**\n * A message was received over one of the {@link RemoteParticipant}'s\n * {@link RemoteDataTrack}'s.\n * @param {string|ArrayBuffer} data\n * @param {RemoteVideoTrack} track - The {@link RemoteDataTrack} over which the\n *   message was received\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteDataTrack} received the message\n * @event Room#trackMessage\n */\n\n/**\n * A {@link RemoteTrack} was published by a {@link RemoteParticipant} after\n * connecting to the {@link Room}. This event is not emitted for\n * {@link RemoteTrack}s that were published while the {@link RemoteParticipant}\n * was connecting to the {@link Room}.\n * @event Room#trackPublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the published {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   published the {@link RemoteTrack}\n * @example\n * function trackPublished(publication, participant) {\n *   console.log(`RemoteParticipant ${participant.sid} published Track ${publication.trackSid}`);\n * }\n *\n * // Handle RemoteTracks published after connecting to the Room.\n * room.on('trackPublished', trackPublished);\n *\n * room.on('participantConnected', participant => {\n *   // Handle RemoteTracks published while connecting to the Room.\n *   participant.trackPublications.forEach(publication => trackPublished(publication, participant));\n * });\n */\n\n/**\n * One of a {@link RemoteParticipant}'s {@link RemoteTrack}s in the {@link Room} started.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that started\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} started\n * @event Room#trackStarted\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was subscribed to.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was subscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was subscribed\n * @event Room#trackSubscribed\n * @example\n * room.on('trackSubscribed', function(track, publication, participant) {\n *   var participantView = document.getElementById('participant-view-' + participant.identity);\n *   participantView.appendChild(track.attach());\n * });\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched off.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched off\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched off\n * @event Room#trackSwitchedOff\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was switched on\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was switched on\n * @event Room#trackSwitchedOn\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} could not be subscribed to.\n * @param {TwilioError} error - The reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that could not\n *   be subscribed to\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} could not be subscribed to\n * @event Room#trackSubscriptionFailed\n */\n\n/**\n * The {@link RemoteTrack}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority};\n * @param {RemoteTrackPublication} publication - The\n *   {@link RemoteTrackPublication} for the {@link RemoteTrack} that changed priority\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} changed priority\n * @event Room#trackPublishPriorityChanged\n */\n\n/**\n * A {@link RemoteTrack} was unpublished by a {@link RemoteParticipant} to the {@link Room}.\n * @event Room#trackUnpublished\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   which represents the unpublished {@link RemoteTrack}\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} who\n *   unpublished the {@link RemoteTrack}\n */\n\n/**\n * A {@link RemoteParticipant}'s {@link RemoteTrack} was unsubscribed from.\n * @param {RemoteTrack} track - The {@link RemoteTrack} that was unsubscribed\n * @param {RemoteTrackPublication} publication - The {@link RemoteTrackPublication}\n *   for the {@link RemoteTrack} that was unsubscribed from\n * @param {RemoteParticipant} participant - The {@link RemoteParticipant} whose\n *   {@link RemoteTrack} was unsubscribed\n * @event Room#trackUnsubscribed\n * @example\n * room.on('trackUnsubscribed', function(track, publication, participant) {\n *   track.detach().forEach(function(mediaElement) {\n *     mediaElement.remove();\n *   });\n * });\n */\n\nfunction connectParticipant(room, participantSignaling) {\n  var log = room._log;\n  var participant = new RemoteParticipant(participantSignaling, { log: log });\n\n  log.info('A new RemoteParticipant connected:', participant);\n  room._participants.set(participant.sid, participant);\n  room.emit('participantConnected', participant);\n\n  // Reemit Track and RemoteParticipant events.\n  var eventListeners = [['reconnected', 'participantReconnected'], ['reconnecting', 'participantReconnecting'], 'trackDimensionsChanged', 'trackDisabled', 'trackEnabled', 'trackMessage', 'trackPublished', 'trackPublishPriorityChanged', 'trackStarted', 'trackSubscribed', 'trackSubscriptionFailed', 'trackSwitchedOff', 'trackSwitchedOn', 'trackUnpublished', 'trackUnsubscribed'].map(function (eventOrPair) {\n    var _ref3 = Array.isArray(eventOrPair) ? eventOrPair : [eventOrPair, eventOrPair],\n        _ref4 = _slicedToArray(_ref3, 2),\n        event = _ref4[0],\n        participantEvent = _ref4[1];\n\n    function reemit() {\n      var args = [].slice.call(arguments);\n      args.unshift(participantEvent);\n      args.push(participant);\n      room.emit.apply(room, _toConsumableArray(args));\n    }\n    participant.on(event, reemit);\n    return [event, reemit];\n  });\n\n  participant.once('disconnected', function participantDisconnected() {\n    var dominantSpeaker = room.dominantSpeaker;\n    log.info('RemoteParticipant disconnected:', participant);\n    room._participants.delete(participant.sid);\n    eventListeners.forEach(function (args) {\n      participant.removeListener(args[0], args[1]);\n    });\n    room.emit('participantDisconnected', participant);\n    if (participant === dominantSpeaker) {\n      room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n    }\n  });\n}\n\nfunction handleRecordingEvents(room, recording) {\n  recording.on('updated', function updated() {\n    var started = recording.isEnabled;\n    room._log.info('Recording ' + (started ? 'started' : 'stopped'));\n    room.emit('recording' + (started ? 'Started' : 'Stopped'));\n  });\n}\n\nfunction handleSignalingEvents(room, signaling) {\n  var log = room._log;\n\n  // Reemit RemoteParticipant events from the RoomSignaling.\n  log.debug('Creating a new RemoteParticipant for each ParticipantSignaling ' + 'in the RoomSignaling');\n  signaling.participants.forEach(connectParticipant.bind(null, room));\n  log.debug('Setting up RemoteParticipant creation for all subsequent ' + 'ParticipantSignalings that connect to the RoomSignaling');\n  signaling.on('participantConnected', connectParticipant.bind(null, room));\n\n  signaling.on('dominantSpeakerChanged', function () {\n    return room.emit('dominantSpeakerChanged', room.dominantSpeaker);\n  });\n\n  // Reemit state transition events from the RoomSignaling.\n  signaling.on('stateChanged', function stateChanged(state, error) {\n    log.info('Transitioned to state:', state);\n    switch (state) {\n      case 'disconnected':\n        room.participants.forEach(function (participant) {\n          participant._unsubscribeTracks();\n        });\n        room.emit(state, room, error);\n        signaling.removeListener('stateChanged', stateChanged);\n        break;\n      case 'reconnecting':\n\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return room.emit('reconnecting', error);\n        }, 0);\n\n        break;\n      default:\n\n        // NOTE(mpatwardhan): `stateChanged` can get emitted with StateMachine locked.\n        // Do not signal  public events synchronously with lock held.\n        setTimeout(function () {\n          return room.emit('reconnected');\n        }, 0);\n    }\n  });\n}\n\nmodule.exports = Room;"]},"metadata":{},"sourceType":"script"}