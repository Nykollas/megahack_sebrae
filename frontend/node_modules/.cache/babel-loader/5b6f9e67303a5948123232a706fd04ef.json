{"ast":null,"code":"import EventEmitter from 'events';\nimport { isMobile } from '../../../utils';\nimport Video from 'twilio-video';\nimport { useCallback, useEffect, useRef, useState } from 'react'; // @ts-ignore\n\nwindow.TwilioVideo = Video;\nexport default function useRoom(localTracks, onError, options) {\n  const [room, setRoom] = useState(new EventEmitter());\n  const [isConnecting, setIsConnecting] = useState(false);\n  const localTracksRef = useRef([]);\n  useEffect(() => {\n    localTracksRef.current = localTracks;\n  }, [localTracks]);\n  const connect = useCallback(token => {\n    setIsConnecting(true);\n    return Video.connect(token, { ...options,\n      tracks: []\n    }).then(newRoom => {\n      setRoom(newRoom);\n\n      const disconnect = () => newRoom.disconnect();\n\n      newRoom.once('disconnected', () => {\n        // Reset the room only after all other `disconnected` listeners have been called.\n        setTimeout(() => setRoom(new EventEmitter()));\n        window.removeEventListener('beforeunload', disconnect);\n\n        if (isMobile) {\n          window.removeEventListener('pagehide', disconnect);\n        }\n      }); // @ts-ignore\n\n      window.twilioRoom = newRoom;\n      localTracksRef.current.forEach(track => newRoom.localParticipant.publishTrack(track, {\n        priority: track.kind === 'video' ? 'low' : 'standard'\n      }));\n      setIsConnecting(false); // Add a listener to disconnect from the room when a user closes their browser\n\n      window.addEventListener('beforeunload', disconnect);\n\n      if (isMobile) {\n        // Add a listener to disconnect from the room when a mobile user closes their browser\n        window.addEventListener('pagehide', disconnect);\n      }\n    }, error => {\n      onError(error);\n      setIsConnecting(false);\n    });\n  }, [options, onError]);\n  return {\n    room,\n    isConnecting,\n    connect\n  };\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/components/VideoProvider/useRoom/useRoom.tsx"],"names":["EventEmitter","isMobile","Video","useCallback","useEffect","useRef","useState","window","TwilioVideo","useRoom","localTracks","onError","options","room","setRoom","isConnecting","setIsConnecting","localTracksRef","current","connect","token","tracks","then","newRoom","disconnect","once","setTimeout","removeEventListener","twilioRoom","forEach","track","localParticipant","publishTrack","priority","kind","addEventListener","error"],"mappings":"AACA,OAAOA,YAAP,MAAyB,QAAzB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAwD,cAAxD;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD,C,CAEA;;AACAC,MAAM,CAACC,WAAP,GAAqBN,KAArB;AAEA,eAAe,SAASO,OAAT,CAAiBC,WAAjB,EAA4CC,OAA5C,EAA+DC,OAA/D,EAAyF;AACtG,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAO,IAAIN,YAAJ,EAAP,CAAhC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMW,cAAc,GAAGZ,MAAM,CAAe,EAAf,CAA7B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,cAAc,CAACC,OAAf,GAAyBR,WAAzB;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,QAAMS,OAAO,GAAGhB,WAAW,CACzBiB,KAAK,IAAI;AACPJ,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,WAAOd,KAAK,CAACiB,OAAN,CAAcC,KAAd,EAAqB,EAAE,GAAGR,OAAL;AAAcS,MAAAA,MAAM,EAAE;AAAtB,KAArB,EAAiDC,IAAjD,CACLC,OAAO,IAAI;AACTT,MAAAA,OAAO,CAACS,OAAD,CAAP;;AACA,YAAMC,UAAU,GAAG,MAAMD,OAAO,CAACC,UAAR,EAAzB;;AAEAD,MAAAA,OAAO,CAACE,IAAR,CAAa,cAAb,EAA6B,MAAM;AACjC;AACAC,QAAAA,UAAU,CAAC,MAAMZ,OAAO,CAAC,IAAId,YAAJ,EAAD,CAAd,CAAV;AACAO,QAAAA,MAAM,CAACoB,mBAAP,CAA2B,cAA3B,EAA2CH,UAA3C;;AAEA,YAAIvB,QAAJ,EAAc;AACZM,UAAAA,MAAM,CAACoB,mBAAP,CAA2B,UAA3B,EAAuCH,UAAvC;AACD;AACF,OARD,EAJS,CAcT;;AACAjB,MAAAA,MAAM,CAACqB,UAAP,GAAoBL,OAApB;AAEAN,MAAAA,cAAc,CAACC,OAAf,CAAuBW,OAAvB,CAA+BC,KAAK,IAClCP,OAAO,CAACQ,gBAAR,CAAyBC,YAAzB,CAAsCF,KAAtC,EAA6C;AAAEG,QAAAA,QAAQ,EAAEH,KAAK,CAACI,IAAN,KAAe,OAAf,GAAyB,KAAzB,GAAiC;AAA7C,OAA7C,CADF;AAIAlB,MAAAA,eAAe,CAAC,KAAD,CAAf,CArBS,CAuBT;;AACAT,MAAAA,MAAM,CAAC4B,gBAAP,CAAwB,cAAxB,EAAwCX,UAAxC;;AAEA,UAAIvB,QAAJ,EAAc;AACZ;AACAM,QAAAA,MAAM,CAAC4B,gBAAP,CAAwB,UAAxB,EAAoCX,UAApC;AACD;AACF,KA/BI,EAgCLY,KAAK,IAAI;AACPzB,MAAAA,OAAO,CAACyB,KAAD,CAAP;AACApB,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAnCI,CAAP;AAqCD,GAxCwB,EAyCzB,CAACJ,OAAD,EAAUD,OAAV,CAzCyB,CAA3B;AA4CA,SAAO;AAAEE,IAAAA,IAAF;AAAQE,IAAAA,YAAR;AAAsBI,IAAAA;AAAtB,GAAP;AACD","sourcesContent":["import { Callback } from '../../../types';\nimport EventEmitter from 'events';\nimport { isMobile } from '../../../utils';\nimport Video, { ConnectOptions, LocalTrack, Room } from 'twilio-video';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\n// @ts-ignore\nwindow.TwilioVideo = Video;\n\nexport default function useRoom(localTracks: LocalTrack[], onError: Callback, options?: ConnectOptions) {\n  const [room, setRoom] = useState<Room>(new EventEmitter() as Room);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const localTracksRef = useRef<LocalTrack[]>([]);\n\n  useEffect(() => {\n    localTracksRef.current = localTracks;\n  }, [localTracks]);\n\n  const connect = useCallback(\n    token => {\n      setIsConnecting(true);\n      return Video.connect(token, { ...options, tracks: [] }).then(\n        newRoom => {\n          setRoom(newRoom);\n          const disconnect = () => newRoom.disconnect();\n\n          newRoom.once('disconnected', () => {\n            // Reset the room only after all other `disconnected` listeners have been called.\n            setTimeout(() => setRoom(new EventEmitter() as Room));\n            window.removeEventListener('beforeunload', disconnect);\n\n            if (isMobile) {\n              window.removeEventListener('pagehide', disconnect);\n            }\n          });\n\n          // @ts-ignore\n          window.twilioRoom = newRoom;\n\n          localTracksRef.current.forEach(track =>\n            newRoom.localParticipant.publishTrack(track, { priority: track.kind === 'video' ? 'low' : 'standard' })\n          );\n\n          setIsConnecting(false);\n\n          // Add a listener to disconnect from the room when a user closes their browser\n          window.addEventListener('beforeunload', disconnect);\n\n          if (isMobile) {\n            // Add a listener to disconnect from the room when a mobile user closes their browser\n            window.addEventListener('pagehide', disconnect);\n          }\n        },\n        error => {\n          onError(error);\n          setIsConnecting(false);\n        }\n      );\n    },\n    [options, onError]\n  );\n\n  return { room, isConnecting, connect };\n}\n"]},"metadata":{},"sourceType":"module"}