{"ast":null,"code":"'use strict';\n\nvar CancelablePromise = require('../../util/cancelablepromise');\n\nvar DefaultPeerConnectionManager = require('./peerconnectionmanager');\n\nvar DefaultRoomV2 = require('./room');\n\nvar DefaultTransport = require('./twilioconnectiontransport');\n\nvar _require = require('../../util/twilio-video-errors'),\n    SignalingConnectionDisconnectedError = _require.SignalingConnectionDisconnectedError,\n    SignalingIncomingMessageInvalidError = _require.SignalingIncomingMessageInvalidError;\n\nvar _require2 = require('../../util'),\n    flatMap = _require2.flatMap;\n\nfunction createCancelableRoomSignalingPromise(token, wsServer, localParticipant, iceServerSource, encodingParameters, preferredCodecs, options) {\n  options = Object.assign({\n    PeerConnectionManager: DefaultPeerConnectionManager,\n    RoomV2: DefaultRoomV2,\n    Transport: DefaultTransport\n  }, options);\n  var transport = void 0;\n  var PeerConnectionManager = options.PeerConnectionManager;\n  var RoomV2 = options.RoomV2;\n  var peerConnectionManager = new PeerConnectionManager(iceServerSource, encodingParameters, preferredCodecs, options);\n  var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n    return [trackV2.trackTransceiver];\n  });\n  peerConnectionManager.setConfiguration(options);\n  peerConnectionManager.setTrackSenders(trackSenders);\n  var cancelationError = new Error('Canceled');\n  return new CancelablePromise(function onCreate(resolve, reject, isCanceled) {\n    peerConnectionManager.createAndOffer().then(function createAndOfferSucceeded() {\n      // NOTE(mmalavalli): PeerConnectionManager#createAndOffer() queues the\n      // initial offer in the event queue for the 'description' event. So,\n      // we are dequeueing to prevent the spurious 'update' message sent by\n      // the client after connecting to a room.\n      peerConnectionManager.dequeue('description');\n      return new Promise(function (resolve, reject) {\n        if (isCanceled()) {\n          reject(cancelationError);\n          return;\n        }\n\n        var transportOptions = typeof options.wsServerInsights === 'string' ? {\n          wsServerInsights: options.wsServerInsights\n        } : {};\n\n        if (options.InsightsPublisher) {\n          transportOptions.InsightsPublisher = options.InsightsPublisher;\n        }\n\n        if (options.NullInsightsPublisher) {\n          transportOptions.NullInsightsPublisher = options.NullInsightsPublisher;\n        }\n\n        if (options.bandwidthProfile) {\n          transportOptions.bandwidthProfile = options.bandwidthProfile;\n        }\n\n        transportOptions = Object.assign({\n          automaticSubscription: options.automaticSubscription,\n          dominantSpeaker: options.dominantSpeaker,\n          environment: options.environment,\n          logLevel: options.logLevel,\n          networkQuality: options.networkQuality,\n          iceServerSourceStatus: iceServerSource.status,\n          insights: options.insights,\n          realm: options.realm,\n          sdpSemantics: options.sdpSemantics\n        }, transportOptions);\n        var Transport = options.Transport;\n        transport = new Transport(options.name, token, localParticipant, peerConnectionManager, wsServer, transportOptions);\n        transport.once('connected', function connected(initialState) {\n          if (isCanceled()) {\n            reject(cancelationError);\n            return;\n          }\n\n          var localParticipantState = initialState.participant;\n\n          if (!localParticipantState) {\n            reject(new SignalingIncomingMessageInvalidError());\n            return;\n          }\n\n          localParticipant.setSignalingRegion(initialState.options.signaling_region);\n          resolve(new RoomV2(localParticipant, initialState, transport, peerConnectionManager, options));\n        });\n        transport.once('stateChanged', function stateChanged(state, error) {\n          if (state === 'disconnected') {\n            error = error || new SignalingConnectionDisconnectedError();\n            transport = null;\n            reject(error);\n          }\n        });\n      });\n    }).then(function createRoomSignalingSucceeded(roomSignaling) {\n      if (isCanceled()) {\n        peerConnectionManager.close();\n        roomSignaling.disconnect();\n        reject(cancelationError);\n        return;\n      }\n\n      resolve(roomSignaling);\n    }).catch(function onError(error) {\n      if (transport) {\n        transport.disconnect();\n        transport = null;\n      }\n\n      peerConnectionManager.close();\n      reject(error);\n    });\n  }, function onCancel() {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n  });\n}\n\nmodule.exports = createCancelableRoomSignalingPromise;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/signaling/v2/cancelableroomsignalingpromise.js"],"names":["CancelablePromise","require","DefaultPeerConnectionManager","DefaultRoomV2","DefaultTransport","_require","SignalingConnectionDisconnectedError","SignalingIncomingMessageInvalidError","_require2","flatMap","createCancelableRoomSignalingPromise","token","wsServer","localParticipant","iceServerSource","encodingParameters","preferredCodecs","options","Object","assign","PeerConnectionManager","RoomV2","Transport","transport","peerConnectionManager","trackSenders","tracks","trackV2","trackTransceiver","setConfiguration","setTrackSenders","cancelationError","Error","onCreate","resolve","reject","isCanceled","createAndOffer","then","createAndOfferSucceeded","dequeue","Promise","transportOptions","wsServerInsights","InsightsPublisher","NullInsightsPublisher","bandwidthProfile","automaticSubscription","dominantSpeaker","environment","logLevel","networkQuality","iceServerSourceStatus","status","insights","realm","sdpSemantics","name","once","connected","initialState","localParticipantState","participant","setSignalingRegion","signaling_region","stateChanged","state","error","createRoomSignalingSucceeded","roomSignaling","close","disconnect","catch","onError","onCancel","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar CancelablePromise = require('../../util/cancelablepromise');\nvar DefaultPeerConnectionManager = require('./peerconnectionmanager');\nvar DefaultRoomV2 = require('./room');\nvar DefaultTransport = require('./twilioconnectiontransport');\n\nvar _require = require('../../util/twilio-video-errors'),\n    SignalingConnectionDisconnectedError = _require.SignalingConnectionDisconnectedError,\n    SignalingIncomingMessageInvalidError = _require.SignalingIncomingMessageInvalidError;\n\nvar _require2 = require('../../util'),\n    flatMap = _require2.flatMap;\n\nfunction createCancelableRoomSignalingPromise(token, wsServer, localParticipant, iceServerSource, encodingParameters, preferredCodecs, options) {\n  options = Object.assign({\n    PeerConnectionManager: DefaultPeerConnectionManager,\n    RoomV2: DefaultRoomV2,\n    Transport: DefaultTransport\n  }, options);\n\n  var transport = void 0;\n\n  var PeerConnectionManager = options.PeerConnectionManager;\n  var RoomV2 = options.RoomV2;\n\n  var peerConnectionManager = new PeerConnectionManager(iceServerSource, encodingParameters, preferredCodecs, options);\n\n  var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n    return [trackV2.trackTransceiver];\n  });\n\n  peerConnectionManager.setConfiguration(options);\n  peerConnectionManager.setTrackSenders(trackSenders);\n\n  var cancelationError = new Error('Canceled');\n\n  return new CancelablePromise(function onCreate(resolve, reject, isCanceled) {\n    peerConnectionManager.createAndOffer().then(function createAndOfferSucceeded() {\n      // NOTE(mmalavalli): PeerConnectionManager#createAndOffer() queues the\n      // initial offer in the event queue for the 'description' event. So,\n      // we are dequeueing to prevent the spurious 'update' message sent by\n      // the client after connecting to a room.\n      peerConnectionManager.dequeue('description');\n\n      return new Promise(function (resolve, reject) {\n        if (isCanceled()) {\n          reject(cancelationError);\n          return;\n        }\n\n        var transportOptions = typeof options.wsServerInsights === 'string' ? { wsServerInsights: options.wsServerInsights } : {};\n\n        if (options.InsightsPublisher) {\n          transportOptions.InsightsPublisher = options.InsightsPublisher;\n        }\n\n        if (options.NullInsightsPublisher) {\n          transportOptions.NullInsightsPublisher = options.NullInsightsPublisher;\n        }\n\n        if (options.bandwidthProfile) {\n          transportOptions.bandwidthProfile = options.bandwidthProfile;\n        }\n\n        transportOptions = Object.assign({\n          automaticSubscription: options.automaticSubscription,\n          dominantSpeaker: options.dominantSpeaker,\n          environment: options.environment,\n          logLevel: options.logLevel,\n          networkQuality: options.networkQuality,\n          iceServerSourceStatus: iceServerSource.status,\n          insights: options.insights,\n          realm: options.realm,\n          sdpSemantics: options.sdpSemantics\n        }, transportOptions);\n\n        var Transport = options.Transport;\n        transport = new Transport(options.name, token, localParticipant, peerConnectionManager, wsServer, transportOptions);\n\n        transport.once('connected', function connected(initialState) {\n          if (isCanceled()) {\n            reject(cancelationError);\n            return;\n          }\n          var localParticipantState = initialState.participant;\n          if (!localParticipantState) {\n            reject(new SignalingIncomingMessageInvalidError());\n            return;\n          }\n\n          localParticipant.setSignalingRegion(initialState.options.signaling_region);\n          resolve(new RoomV2(localParticipant, initialState, transport, peerConnectionManager, options));\n        });\n\n        transport.once('stateChanged', function stateChanged(state, error) {\n          if (state === 'disconnected') {\n            error = error || new SignalingConnectionDisconnectedError();\n            transport = null;\n            reject(error);\n          }\n        });\n      });\n    }).then(function createRoomSignalingSucceeded(roomSignaling) {\n      if (isCanceled()) {\n        peerConnectionManager.close();\n        roomSignaling.disconnect();\n        reject(cancelationError);\n        return;\n      }\n      resolve(roomSignaling);\n    }).catch(function onError(error) {\n      if (transport) {\n        transport.disconnect();\n        transport = null;\n      }\n      peerConnectionManager.close();\n      reject(error);\n    });\n  }, function onCancel() {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n  });\n}\n\nmodule.exports = createCancelableRoomSignalingPromise;"]},"metadata":{},"sourceType":"script"}