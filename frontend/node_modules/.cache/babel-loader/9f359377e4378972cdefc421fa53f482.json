{"ast":null,"code":"var _jsxFileName = \"/home/ascencion/sebrae_megahack/src/components/VideoProvider/index.tsx\";\nimport React, { createContext } from 'react';\nimport { SelectedParticipantProvider } from './useSelectedParticipant/useSelectedParticipant';\nimport AttachVisibilityHandler from './AttachVisibilityHandler/AttachVisibilityHandler';\nimport useHandleRoomDisconnectionErrors from './useHandleRoomDisconnectionErrors/useHandleRoomDisconnectionErrors';\nimport useHandleOnDisconnect from './useHandleOnDisconnect/useHandleOnDisconnect';\nimport useHandleTrackPublicationFailed from './useHandleTrackPublicationFailed/useHandleTrackPublicationFailed';\nimport useLocalTracks from './useLocalTracks/useLocalTracks';\nimport useRoom from './useRoom/useRoom';\n/*\n *  The hooks used by the VideoProvider component are different than the hooks found in the 'hooks/' directory. The hooks\n *  in the 'hooks/' directory can be used anywhere in a video application, and they can be used any number of times.\n *  the hooks in the 'VideoProvider/' directory are intended to be used by the VideoProvider component only. Using these hooks\n *  elsewhere in the application may cause problems as these hooks should not be used more than once in an application.\n */\n\nexport const VideoContext = createContext(null);\nexport function VideoProvider({\n  options,\n  children,\n  onError = () => {},\n  onDisconnect = () => {}\n}) {\n  const onErrorCallback = error => {\n    console.log(`ERROR: ${error.message}`, error);\n    onError(error);\n  };\n\n  const {\n    localTracks,\n    getLocalVideoTrack\n  } = useLocalTracks();\n  const {\n    room,\n    isConnecting,\n    connect\n  } = useRoom(localTracks, onErrorCallback, options); // Register onError and onDisconnect callback functions.\n\n  useHandleRoomDisconnectionErrors(room, onError);\n  useHandleTrackPublicationFailed(room, onError);\n  useHandleOnDisconnect(room, onDisconnect);\n  return /*#__PURE__*/React.createElement(VideoContext.Provider, {\n    value: {\n      room,\n      localTracks,\n      isConnecting,\n      onError: onErrorCallback,\n      onDisconnect,\n      getLocalVideoTrack,\n      connect\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SelectedParticipantProvider, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, children), /*#__PURE__*/React.createElement(AttachVisibilityHandler, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/components/VideoProvider/index.tsx"],"names":["React","createContext","SelectedParticipantProvider","AttachVisibilityHandler","useHandleRoomDisconnectionErrors","useHandleOnDisconnect","useHandleTrackPublicationFailed","useLocalTracks","useRoom","VideoContext","VideoProvider","options","children","onError","onDisconnect","onErrorCallback","error","console","log","message","localTracks","getLocalVideoTrack","room","isConnecting","connect"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAgD,OAAhD;AAUA,SAASC,2BAAT,QAA4C,iDAA5C;AAEA,OAAOC,uBAAP,MAAoC,mDAApC;AACA,OAAOC,gCAAP,MAA6C,qEAA7C;AACA,OAAOC,qBAAP,MAAkC,+CAAlC;AACA,OAAOC,+BAAP,MAA4C,mEAA5C;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA;;;;;;;AAiBA,OAAO,MAAMC,YAAY,GAAGR,aAAa,CAAgB,IAAhB,CAAlC;AASP,OAAO,SAASS,aAAT,CAAuB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA,OAAO,GAAG,MAAM,CAAE,CAAvC;AAAyCC,EAAAA,YAAY,GAAG,MAAM,CAAE;AAAhE,CAAvB,EAA+G;AACpH,QAAMC,eAAe,GAAIC,KAAD,IAAwB;AAC9CC,IAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,KAAK,CAACG,OAAQ,EAApC,EAAuCH,KAAvC;AACAH,IAAAA,OAAO,CAACG,KAAD,CAAP;AACD,GAHD;;AAKA,QAAM;AAAEI,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAsCd,cAAc,EAA1D;AACA,QAAM;AAAEe,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBC,IAAAA;AAAtB,MAAkChB,OAAO,CAACY,WAAD,EAAcL,eAAd,EAA+BJ,OAA/B,CAA/C,CAPoH,CASpH;;AACAP,EAAAA,gCAAgC,CAACkB,IAAD,EAAOT,OAAP,CAAhC;AACAP,EAAAA,+BAA+B,CAACgB,IAAD,EAAOT,OAAP,CAA/B;AACAR,EAAAA,qBAAqB,CAACiB,IAAD,EAAOR,YAAP,CAArB;AAEA,sBACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLQ,MAAAA,IADK;AAELF,MAAAA,WAFK;AAGLG,MAAAA,YAHK;AAILV,MAAAA,OAAO,EAAEE,eAJJ;AAKLD,MAAAA,YALK;AAMLO,MAAAA,kBANK;AAOLG,MAAAA;AAPK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWE,oBAAC,2BAAD;AAA6B,IAAA,IAAI,EAAEF,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0CV,QAA1C,CAXF,eAgBE,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF;AAoBD","sourcesContent":["import React, { createContext, ReactNode } from 'react';\nimport {\n  CreateLocalTrackOptions,\n  ConnectOptions,\n  LocalAudioTrack,\n  LocalVideoTrack,\n  Room,\n  TwilioError,\n} from 'twilio-video';\nimport { Callback, ErrorCallback } from '../../types';\nimport { SelectedParticipantProvider } from './useSelectedParticipant/useSelectedParticipant';\n\nimport AttachVisibilityHandler from './AttachVisibilityHandler/AttachVisibilityHandler';\nimport useHandleRoomDisconnectionErrors from './useHandleRoomDisconnectionErrors/useHandleRoomDisconnectionErrors';\nimport useHandleOnDisconnect from './useHandleOnDisconnect/useHandleOnDisconnect';\nimport useHandleTrackPublicationFailed from './useHandleTrackPublicationFailed/useHandleTrackPublicationFailed';\nimport useLocalTracks from './useLocalTracks/useLocalTracks';\nimport useRoom from './useRoom/useRoom';\n\n/*\n *  The hooks used by the VideoProvider component are different than the hooks found in the 'hooks/' directory. The hooks\n *  in the 'hooks/' directory can be used anywhere in a video application, and they can be used any number of times.\n *  the hooks in the 'VideoProvider/' directory are intended to be used by the VideoProvider component only. Using these hooks\n *  elsewhere in the application may cause problems as these hooks should not be used more than once in an application.\n */\n\nexport interface IVideoContext {\n  room: Room;\n  localTracks: (LocalAudioTrack | LocalVideoTrack)[];\n  isConnecting: boolean;\n  connect: (token: string) => Promise<void>;\n  onError: ErrorCallback;\n  onDisconnect: Callback;\n  getLocalVideoTrack: (facingMode?: CreateLocalTrackOptions['facingMode']) => Promise<LocalVideoTrack>;\n}\n\nexport const VideoContext = createContext<IVideoContext>(null!);\n\ninterface VideoProviderProps {\n  options?: ConnectOptions;\n  onError: ErrorCallback;\n  onDisconnect?: Callback;\n  children: ReactNode;\n}\n\nexport function VideoProvider({ options, children, onError = () => {}, onDisconnect = () => {} }: VideoProviderProps) {\n  const onErrorCallback = (error: TwilioError) => {\n    console.log(`ERROR: ${error.message}`, error);\n    onError(error);\n  };\n\n  const { localTracks, getLocalVideoTrack } = useLocalTracks();\n  const { room, isConnecting, connect } = useRoom(localTracks, onErrorCallback, options);\n\n  // Register onError and onDisconnect callback functions.\n  useHandleRoomDisconnectionErrors(room, onError);\n  useHandleTrackPublicationFailed(room, onError);\n  useHandleOnDisconnect(room, onDisconnect);\n\n  return (\n    <VideoContext.Provider\n      value={{\n        room,\n        localTracks,\n        isConnecting,\n        onError: onErrorCallback,\n        onDisconnect,\n        getLocalVideoTrack,\n        connect,\n      }}\n    >\n      <SelectedParticipantProvider room={room}>{children}</SelectedParticipantProvider>\n      {/* \n        The AttachVisibilityHandler component is using the useLocalVideoToggle hook\n        which must be used within the VideoContext Provider.\n      */}\n      <AttachVisibilityHandler />\n    </VideoContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}