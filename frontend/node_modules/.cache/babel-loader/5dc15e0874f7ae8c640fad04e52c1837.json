{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar IceReportFactory = require('./icereportfactory');\n\nvar PeerConnectionReport = require('./peerconnectionreport');\n\nvar ReceiverReportFactory = require('./receiverreportfactory');\n\nvar SenderReportFactory = require('./senderreportfactory');\n/**\n * @typedef {string} TrackId\n */\n\n/**\n * @typedef {string} StatsId\n */\n\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\n\n\nvar PeerConnectionReportFactory = function () {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  function PeerConnectionReportFactory(pc) {\n    _classCallCheck(this, PeerConnectionReportFactory);\n\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n\n\n  _createClass(PeerConnectionReportFactory, [{\n    key: 'next',\n    value: function next() {\n      var _this = this;\n\n      var updatePromise = typeof mozRTCPeerConnection !== 'undefined' ? updateFirefox(this) : updateChrome(this);\n      return updatePromise.then(function () {\n        var audioSenderReportFactories = [].concat(_toConsumableArray(_this.audio.send.values()));\n        var videoSenderReportFactories = [].concat(_toConsumableArray(_this.video.send.values()));\n        var audioReceiverReportFactories = [].concat(_toConsumableArray(_this.audio.recv.values()));\n        var videoReceiverReportFactories = [].concat(_toConsumableArray(_this.video.recv.values()));\n        var report = new PeerConnectionReport(_this.ice.lastReport, {\n          send: audioSenderReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          }),\n          recv: audioReceiverReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          })\n        }, {\n          send: videoSenderReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          }),\n          recv: videoReceiverReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          })\n        });\n        _this.lastReport = report;\n        return report;\n      });\n    }\n  }]);\n\n  return PeerConnectionReportFactory;\n}();\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\n\n\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(function (senderOrReceiver) {\n    var trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(function (report) {\n      // NOTE(mroberts): We have to rewrite Ids due to this bug:\n      //\n      //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n      //\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = report.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var stats = _step.value;\n\n          if (stats.type === 'inbound-rtp') {\n            stats.id = trackId + '-' + stats.id;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return [trackId, report];\n    });\n  })).then(function (pairs) {\n    return new Map(pairs);\n  });\n}\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\n\n/**\n* @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n* @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n* @param {RTCStatsReport} report\n* @param {RTCStats} stats\n* @param {TrackId} [trackId]\n* @returns {?ReceiverReportFactory}\n*/\n\n\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  var sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n\n  if (!trackId) {\n    var trackStats = report.get(stats.trackId);\n\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n\n    var senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n\n  return null;\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\n\n\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.send,\n    video: factory.video.send\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\n\n\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return {\n    audio: factory.audio.recv,\n    video: factory.video.recv\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\n\n\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\n\n\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\n\n\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\n\n\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\n\n\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = report.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var stats = _step2.value;\n\n      if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n        if (typeof mozRTCPeerConnection === 'undefined' && !stats.trackId) {\n          continue;\n        }\n\n        var senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n\n        if (senderReportFactoryIdsToDelete) {\n          senderReportFactoryIdsToDelete.delete(stats.id);\n        }\n\n        var senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n\n        if (senderReportFactory) {\n          var remoteInboundStats = report.get(stats.remoteId);\n          senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\n\n\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = report.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var stats = _step3.value;\n\n      if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n        var receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n\n        if (receiverReportFactoryIdsToDelete) {\n          receiverReportFactoryIdsToDelete.delete(stats.id);\n        }\n\n        var receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n\n        if (receiverReportFactory) {\n          receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n}\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\n\n\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  var _loop = function _loop(mediaType) {\n    var senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    var senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(function (senderOrReceiverReportFactoryId) {\n      return senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId);\n    });\n  };\n\n  for (var mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    _loop(mediaType);\n  }\n}\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\n\n\nfunction updateIceReport(ice, report) {\n  var selectedCandidatePair = void 0;\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = report.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var stats = _step4.value;\n\n      if (stats.type === 'transport') {\n        selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = report.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var _stats = _step5.value;\n\n      if (_stats.type === 'candidate-pair' && _stats.nominated && ('selected' in _stats ? _stats.selected : true)) {\n        ice.next(_stats);\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {PeerConnectionReport}\n */\n\n\nfunction updateFirefox(factory) {\n  var senders = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track;\n  }).map(function (transceiver) {\n    return transceiver.sender;\n  });\n  var receivers = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/recv/);\n  }).map(function (transceiver) {\n    return transceiver.receiver;\n  });\n  return Promise.all([getSenderOrReceiverReports(senders), getSenderOrReceiverReports(receivers), factory.pc.getStats()]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 3),\n        senderReports = _ref2[0],\n        receiverReports = _ref2[1],\n        pcReport = _ref2[2];\n\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach(function (report, trackId) {\n      return updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach(function (report, trackId) {\n      return updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {PeerConnectionReport}\n */\n\n\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(function (report) {\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n    updateIceReport(factory.ice, report);\n  });\n}\n\nmodule.exports = PeerConnectionReportFactory;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/stats/peerconnectionreportfactory.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","Constructor","protoProps","staticProps","prototype","_toConsumableArray","arr2","from","_classCallCheck","instance","IceReportFactory","require","PeerConnectionReport","ReceiverReportFactory","SenderReportFactory","PeerConnectionReportFactory","pc","ice","audio","send","Map","recv","video","lastReport","_this","updatePromise","mozRTCPeerConnection","updateFirefox","updateChrome","then","audioSenderReportFactories","concat","values","videoSenderReportFactories","audioReceiverReportFactories","videoReceiverReportFactories","report","map","factory","filter","getSenderOrReceiverReports","sendersOrReceivers","Promise","all","senderOrReceiver","trackId","track","id","getStats","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","stats","type","return","pairs","getOrCreateSenderOrReceiverReportFactory","SenderOrReceiverReportFactory","sendersOrReceiversByMediaType","mediaType","trackStats","get","trackIdentifier","has","senderOrReceiverFactory","set","getSenderReportFactoriesByMediaType","getReceiverReportFactoriesByMediaType","getOrCreateSenderReportFactory","getOrCreateReceiverReportFactory","getSenderReportFactoryIdsByMediaType","Set","keys","getReceiverReportFactoryIdsByMediaType","updateSenderReports","senderReportFactoryIdsToDeleteByMediaType","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","isRemote","senderReportFactoryIdsToDelete","delete","senderReportFactory","remoteInboundStats","remoteId","updateReceiverReports","receiverReportFactoryIdsToDeleteByMediaType","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","receiverReportFactoryIdsToDelete","receiverReportFactory","deleteSenderOrReceiverReportFactories","senderOrReceiverReportFactoriesByMediaType","senderOrReceiverReportFactoryIdsByMediaType","_loop","senderOrReceiverReportFactories","senderOrReceiverReportFactoryIds","forEach","senderOrReceiverReportFactoryId","updateIceReport","selectedCandidatePair","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","selectedCandidatePairId","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_stats","nominated","selected","senders","getTransceivers","transceiver","currentDirection","match","sender","receivers","receiver","_ref","_ref2","senderReports","receiverReports","pcReport","senderReportFactoriesByMediaType","receiverReportFactoriesByMediaType","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IceReportFactory = require('./icereportfactory');\nvar PeerConnectionReport = require('./peerconnectionreport');\nvar ReceiverReportFactory = require('./receiverreportfactory');\nvar SenderReportFactory = require('./senderreportfactory');\n\n/**\n * @typedef {string} TrackId\n */\n\n/**\n * @typedef {string} StatsId\n */\n\n/**\n * @interface SenderReportFactoriesByMediaType\n * @property {Map<StatsId, SenderReportFactory>} audio\n * @property {Map<StatsId, SenderReportFactory>} video\n */\n\n/**\n * @interface ReceiverReportFactoriesByMediaType\n * @property {Map<StatsId, ReceiverReportFactory>} audio\n * @property {Map<StatsId, ReceiverReportFactory>} video\n */\n\n/**\n * @interface SenderAndReceiverReportFactories\n * @property {Map<StatsId, SenderReportFactories>} send\n * @property {Map<StatsId, ReceiverReportFactories>} recv\n */\n\n/**\n * @interface {StatsIdsByMediaType}\n * @property {Set<StatsId>} audio\n * @property {Set<StatsId>} video\n */\n\n/**\n * @property {RTCPeerConnection} pc\n * @property {IceReportFactory} iceReportFactory\n * @property {SenderAndReceiverReportFactories} audio\n * @property {SenderAndReceiverReportFactories} video\n * @property {?PeerConnectionReport} lastReport\n */\n\nvar PeerConnectionReportFactory = function () {\n  /**\n   * Construct a {@link PeerConnectionReportFactory}.\n   * @param {RTCPeerConnection} pc\n   */\n  function PeerConnectionReportFactory(pc) {\n    _classCallCheck(this, PeerConnectionReportFactory);\n\n    Object.defineProperties(this, {\n      pc: {\n        enumerable: true,\n        value: pc\n      },\n      ice: {\n        enumerable: true,\n        value: new IceReportFactory()\n      },\n      audio: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      video: {\n        enumerable: true,\n        value: {\n          send: new Map(),\n          recv: new Map()\n        }\n      },\n      lastReport: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  /**\n   * Create a {@link PeerConnectionReport}.\n   * @returns {Promise<PeerConnectionReport>}\n   */\n\n\n  _createClass(PeerConnectionReportFactory, [{\n    key: 'next',\n    value: function next() {\n      var _this = this;\n\n      var updatePromise = typeof mozRTCPeerConnection !== 'undefined' ? updateFirefox(this) : updateChrome(this);\n\n      return updatePromise.then(function () {\n        var audioSenderReportFactories = [].concat(_toConsumableArray(_this.audio.send.values()));\n        var videoSenderReportFactories = [].concat(_toConsumableArray(_this.video.send.values()));\n        var audioReceiverReportFactories = [].concat(_toConsumableArray(_this.audio.recv.values()));\n        var videoReceiverReportFactories = [].concat(_toConsumableArray(_this.video.recv.values()));\n\n        var report = new PeerConnectionReport(_this.ice.lastReport, {\n          send: audioSenderReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          }),\n          recv: audioReceiverReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          })\n        }, {\n          send: videoSenderReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          }),\n          recv: videoReceiverReportFactories.map(function (factory) {\n            return factory.lastReport;\n          }).filter(function (report) {\n            return report;\n          })\n        });\n\n        _this.lastReport = report;\n\n        return report;\n      });\n    }\n  }]);\n\n  return PeerConnectionReportFactory;\n}();\n\n/**\n * Construct a Map from MediaStreamTrack Ids to RTCStatsReports.\n * @param {Array<RTCRtpSender>|Array<RTCRtpReceiver>} sendersOrReceivers - each\n *   RTCRtpSender should have a non-null track\n * @returns {Promise<Map<TrackId, RTCStats>>}\n */\n\n\nfunction getSenderOrReceiverReports(sendersOrReceivers) {\n  return Promise.all(sendersOrReceivers.map(function (senderOrReceiver) {\n    var trackId = senderOrReceiver.track.id;\n    return senderOrReceiver.getStats().then(function (report) {\n      // NOTE(mroberts): We have to rewrite Ids due to this bug:\n      //\n      //   https://bugzilla.mozilla.org/show_bug.cgi?id=1463430\n      //\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = report.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var stats = _step.value;\n\n          if (stats.type === 'inbound-rtp') {\n            stats.id = trackId + '-' + stats.id;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return [trackId, report];\n    });\n  })).then(function (pairs) {\n    return new Map(pairs);\n  });\n}\n\n/**\n * @param {SenderReportFactory.constructor} SenderReportFactory\n * @param {SenderReportFactoriesByMediaType} sendersByMediaType\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */ /**\n    * @param {ReceiverReportFactory.constructor} ReceiverReportFactory\n    * @param {ReceiverReportFactoriesByMediaType} receiversByMediaType\n    * @param {RTCStatsReport} report\n    * @param {RTCStats} stats\n    * @param {TrackId} [trackId]\n    * @returns {?ReceiverReportFactory}\n    */\nfunction getOrCreateSenderOrReceiverReportFactory(SenderOrReceiverReportFactory, sendersOrReceiversByMediaType, report, stats, trackId) {\n  var sendersOrReceivers = sendersOrReceiversByMediaType[stats.mediaType];\n  if (!trackId) {\n    var trackStats = report.get(stats.trackId);\n    if (trackStats) {\n      trackId = trackStats.trackIdentifier;\n    }\n  }\n  if (sendersOrReceivers && trackId) {\n    if (sendersOrReceivers.has(stats.id)) {\n      return sendersOrReceivers.get(stats.id);\n    }\n    var senderOrReceiverFactory = new SenderOrReceiverReportFactory(trackId, stats);\n    sendersOrReceivers.set(stats.id, senderOrReceiverFactory);\n  }\n  return null;\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {SenderReportFactoriesByMediaType}\n */\nfunction getSenderReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.send, video: factory.video.send };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {ReceiverReportFactoriesByMediaType}\n */\nfunction getReceiverReportFactoriesByMediaType(factory) {\n  return { audio: factory.audio.recv, video: factory.video.recv };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?SenderReportFactory}\n */\nfunction getOrCreateSenderReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(SenderReportFactory, getSenderReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {RTCStats} stats\n * @param {TrackId} [trackId]\n * @returns {?ReceiverReportFactory}\n */\nfunction getOrCreateReceiverReportFactory(factory, report, stats, trackId) {\n  return getOrCreateSenderOrReceiverReportFactory(ReceiverReportFactory, getReceiverReportFactoriesByMediaType(factory), report, stats, trackId);\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getSenderReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.send.keys()),\n    video: new Set(factory.video.send.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @retuns {StatsIdsByMediaType}\n */\nfunction getReceiverReportFactoryIdsByMediaType(factory) {\n  return {\n    audio: new Set(factory.audio.recv.keys()),\n    video: new Set(factory.video.recv.keys())\n  };\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} senderReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = report.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var stats = _step2.value;\n\n      if (stats.type === 'outbound-rtp' && !stats.isRemote) {\n        if (typeof mozRTCPeerConnection === 'undefined' && !stats.trackId) {\n          continue;\n        }\n        var senderReportFactoryIdsToDelete = senderReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n        if (senderReportFactoryIdsToDelete) {\n          senderReportFactoryIdsToDelete.delete(stats.id);\n        }\n        var senderReportFactory = getOrCreateSenderReportFactory(factory, report, stats, trackId);\n        if (senderReportFactory) {\n          var remoteInboundStats = report.get(stats.remoteId);\n          senderReportFactory.next(trackId || senderReportFactory.trackId, stats, remoteInboundStats);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @param {RTCStatsReport} report\n * @param {StatsIdsByMediaType} receiverReportFactoryIdsToDeleteByMediaType\n * @param {TrackId} [trackId]\n * @returns {void}\n */\nfunction updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId) {\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = report.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var stats = _step3.value;\n\n      if (stats.type === 'inbound-rtp' && !stats.isRemote) {\n        var receiverReportFactoryIdsToDelete = receiverReportFactoryIdsToDeleteByMediaType[stats.mediaType];\n        if (receiverReportFactoryIdsToDelete) {\n          receiverReportFactoryIdsToDelete.delete(stats.id);\n        }\n        var receiverReportFactory = getOrCreateReceiverReportFactory(factory, report, stats, trackId);\n        if (receiverReportFactory) {\n          receiverReportFactory.next(trackId || receiverReportFactory.trackId, stats);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n}\n\n/**\n * @param {SenderReportFactoriesByMediaType|ReceiverReportFactoriesByMediaType} senderOrReceiverReportFactoriesByMediaType\n * @param {StatsIdsByMediaType} senderOrReceiverReportFactoryIdsByMediaType\n * @returns {void}\n */\nfunction deleteSenderOrReceiverReportFactories(senderOrReceiverReportFactoriesByMediaType, senderOrReceiverReportFactoryIdsByMediaType) {\n  var _loop = function _loop(mediaType) {\n    var senderOrReceiverReportFactories = senderOrReceiverReportFactoriesByMediaType[mediaType];\n    var senderOrReceiverReportFactoryIds = senderOrReceiverReportFactoryIdsByMediaType[mediaType];\n    senderOrReceiverReportFactoryIds.forEach(function (senderOrReceiverReportFactoryId) {\n      return senderOrReceiverReportFactories.delete(senderOrReceiverReportFactoryId);\n    });\n  };\n\n  for (var mediaType in senderOrReceiverReportFactoryIdsByMediaType) {\n    _loop(mediaType);\n  }\n}\n\n/**\n * @param {IceReportFactory} ice\n * @param {RTCStatsReport} report\n * @returns {void}\n */\nfunction updateIceReport(ice, report) {\n  var selectedCandidatePair = void 0;\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = report.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var stats = _step4.value;\n\n      if (stats.type === 'transport') {\n        selectedCandidatePair = report.get(stats.selectedCandidatePairId);\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  if (selectedCandidatePair) {\n    ice.next(selectedCandidatePair);\n    return;\n  }\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = report.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var _stats = _step5.value;\n\n      if (_stats.type === 'candidate-pair' && _stats.nominated && ('selected' in _stats ? _stats.selected : true)) {\n        ice.next(_stats);\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {PeerConnectionReport}\n */\nfunction updateFirefox(factory) {\n  var senders = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/send/) && transceiver.sender.track;\n  }).map(function (transceiver) {\n    return transceiver.sender;\n  });\n\n  var receivers = factory.pc.getTransceivers().filter(function (transceiver) {\n    return transceiver.currentDirection && transceiver.currentDirection.match(/recv/);\n  }).map(function (transceiver) {\n    return transceiver.receiver;\n  });\n\n  return Promise.all([getSenderOrReceiverReports(senders), getSenderOrReceiverReports(receivers), factory.pc.getStats()]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 3),\n        senderReports = _ref2[0],\n        receiverReports = _ref2[1],\n        pcReport = _ref2[2];\n\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    senderReports.forEach(function (report, trackId) {\n      return updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    receiverReports.forEach(function (report, trackId) {\n      return updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType, trackId);\n    });\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, pcReport);\n  });\n}\n\n/**\n * @param {PeerConnectionReportFactory} factory\n * @returns {PeerConnectionReport}\n */\nfunction updateChrome(factory) {\n  return factory.pc.getStats().then(function (report) {\n    var senderReportFactoriesByMediaType = getSenderReportFactoriesByMediaType(factory);\n    var senderReportFactoryIdsToDeleteByMediaType = getSenderReportFactoryIdsByMediaType(factory);\n    updateSenderReports(factory, report, senderReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(senderReportFactoriesByMediaType, senderReportFactoryIdsToDeleteByMediaType);\n\n    var receiverReportFactoriesByMediaType = getReceiverReportFactoriesByMediaType(factory);\n    var receiverReportFactoryIdsToDeleteByMediaType = getReceiverReportFactoryIdsByMediaType(factory);\n    updateReceiverReports(factory, report, receiverReportFactoryIdsToDeleteByMediaType);\n    deleteSenderOrReceiverReportFactories(receiverReportFactoriesByMediaType, receiverReportFactoryIdsToDeleteByMediaType);\n\n    updateIceReport(factory.ice, report);\n  });\n}\n\nmodule.exports = PeerConnectionReportFactory;"]},"metadata":{},"sourceType":"script"}