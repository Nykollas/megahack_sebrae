{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass SyncEntity {\n  constructor(services, removalHandler) {\n    this.services = services;\n    this.removalHandler = removalHandler;\n    this.subscriptionState = 'none';\n    this._attachedListeners = new Map();\n  }\n\n  _advanceLastEventId(eventId, revision) {}\n\n  reportFailure(err) {\n    if (err.status === 404) {\n      // assume that 404 means that entity has been removed while we were away\n      this.onRemoved(false);\n    } else {\n      this.broadcastEventToListeners('failure', err);\n    }\n  }\n  /**\n   * Subscribe to changes of data entity\n   * @private\n   */\n\n\n  _subscribe() {\n    this.services.router.subscribe(this.sid, this);\n  }\n  /**\n   * Unsubscribe from changes of current data entity\n   * @private\n   */\n\n\n  _unsubscribe() {\n    this.services.router.unsubscribe(this.sid);\n  }\n\n  _setSubscriptionState(newState) {\n    this.subscriptionState = newState;\n    this.broadcastEventToListeners('_subscriptionStateChanged', newState);\n  }\n  /**\n   * @public\n   */\n\n\n  close() {\n    this._unsubscribe();\n\n    if (this.removalHandler != null) {\n      this.removalHandler(this.type, this.sid, this.uniqueName);\n    }\n  }\n\n  attach(closeable) {\n    const uuid = closeable.listenerUuid;\n\n    const existingRecord = this._attachedListeners.get(uuid);\n\n    if (existingRecord) {\n      return;\n    }\n\n    if (!this._attachedListeners.size) {\n      // the first one to arrive\n      this._subscribe();\n    }\n\n    this._attachedListeners.set(uuid, closeable);\n  }\n\n  detach(listenerUuid) {\n    this._attachedListeners.delete(listenerUuid);\n\n    if (!this._attachedListeners.size) {\n      // last one out, turn off lights, shut the door\n      this.close(); // invokes unsubscribe and removal handler\n    }\n  }\n\n  broadcastEventToListeners(eventName, args) {\n    for (let listener of this._attachedListeners.values()) {\n      listener.emit(eventName, args);\n    }\n  }\n\n}\n\nexports.SyncEntity = SyncEntity;\nexports.default = SyncEntity;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-sync/lib/entity.js"],"names":["Object","defineProperty","exports","value","SyncEntity","constructor","services","removalHandler","subscriptionState","_attachedListeners","Map","_advanceLastEventId","eventId","revision","reportFailure","err","status","onRemoved","broadcastEventToListeners","_subscribe","router","subscribe","sid","_unsubscribe","unsubscribe","_setSubscriptionState","newState","close","type","uniqueName","attach","closeable","uuid","listenerUuid","existingRecord","get","size","set","detach","delete","eventName","args","listener","values","emit","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,QAAD,EAAWC,cAAX,EAA2B;AAClC,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,iBAAL,GAAyB,MAAzB;AACA,SAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACH;;AACDC,EAAAA,mBAAmB,CAACC,OAAD,EAAUC,QAAV,EAAoB,CACtC;;AACDC,EAAAA,aAAa,CAACC,GAAD,EAAM;AACf,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB;AACA,WAAKC,SAAL,CAAe,KAAf;AACH,KAHD,MAIK;AACD,WAAKC,yBAAL,CAA+B,SAA/B,EAA0CH,GAA1C;AACH;AACJ;AACD;;;;;;AAIAI,EAAAA,UAAU,GAAG;AACT,SAAKb,QAAL,CAAcc,MAAd,CAAqBC,SAArB,CAA+B,KAAKC,GAApC,EAAyC,IAAzC;AACH;AACD;;;;;;AAIAC,EAAAA,YAAY,GAAG;AACX,SAAKjB,QAAL,CAAcc,MAAd,CAAqBI,WAArB,CAAiC,KAAKF,GAAtC;AACH;;AACDG,EAAAA,qBAAqB,CAACC,QAAD,EAAW;AAC5B,SAAKlB,iBAAL,GAAyBkB,QAAzB;AACA,SAAKR,yBAAL,CAA+B,2BAA/B,EAA4DQ,QAA5D;AACH;AACD;;;;;AAGAC,EAAAA,KAAK,GAAG;AACJ,SAAKJ,YAAL;;AACA,QAAI,KAAKhB,cAAL,IAAuB,IAA3B,EAAiC;AAC7B,WAAKA,cAAL,CAAoB,KAAKqB,IAAzB,EAA+B,KAAKN,GAApC,EAAyC,KAAKO,UAA9C;AACH;AACJ;;AACDC,EAAAA,MAAM,CAACC,SAAD,EAAY;AACd,UAAMC,IAAI,GAAGD,SAAS,CAACE,YAAvB;;AACA,UAAMC,cAAc,GAAG,KAAKzB,kBAAL,CAAwB0B,GAAxB,CAA4BH,IAA5B,CAAvB;;AACA,QAAIE,cAAJ,EAAoB;AAChB;AACH;;AACD,QAAI,CAAC,KAAKzB,kBAAL,CAAwB2B,IAA7B,EAAmC;AAC/B;AACA,WAAKjB,UAAL;AACH;;AACD,SAAKV,kBAAL,CAAwB4B,GAAxB,CAA4BL,IAA5B,EAAkCD,SAAlC;AACH;;AACDO,EAAAA,MAAM,CAACL,YAAD,EAAe;AACjB,SAAKxB,kBAAL,CAAwB8B,MAAxB,CAA+BN,YAA/B;;AACA,QAAI,CAAC,KAAKxB,kBAAL,CAAwB2B,IAA7B,EAAmC;AAC/B;AACA,WAAKT,KAAL,GAF+B,CAEjB;AACjB;AACJ;;AACDT,EAAAA,yBAAyB,CAACsB,SAAD,EAAYC,IAAZ,EAAkB;AACvC,SAAK,IAAIC,QAAT,IAAqB,KAAKjC,kBAAL,CAAwBkC,MAAxB,EAArB,EAAuD;AACnDD,MAAAA,QAAQ,CAACE,IAAT,CAAcJ,SAAd,EAAyBC,IAAzB;AACH;AACJ;;AApEY;;AAsEjBvC,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACAF,OAAO,CAAC2C,OAAR,GAAkBzC,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass SyncEntity {\n    constructor(services, removalHandler) {\n        this.services = services;\n        this.removalHandler = removalHandler;\n        this.subscriptionState = 'none';\n        this._attachedListeners = new Map();\n    }\n    _advanceLastEventId(eventId, revision) {\n    }\n    reportFailure(err) {\n        if (err.status === 404) {\n            // assume that 404 means that entity has been removed while we were away\n            this.onRemoved(false);\n        }\n        else {\n            this.broadcastEventToListeners('failure', err);\n        }\n    }\n    /**\n     * Subscribe to changes of data entity\n     * @private\n     */\n    _subscribe() {\n        this.services.router.subscribe(this.sid, this);\n    }\n    /**\n     * Unsubscribe from changes of current data entity\n     * @private\n     */\n    _unsubscribe() {\n        this.services.router.unsubscribe(this.sid);\n    }\n    _setSubscriptionState(newState) {\n        this.subscriptionState = newState;\n        this.broadcastEventToListeners('_subscriptionStateChanged', newState);\n    }\n    /**\n     * @public\n     */\n    close() {\n        this._unsubscribe();\n        if (this.removalHandler != null) {\n            this.removalHandler(this.type, this.sid, this.uniqueName);\n        }\n    }\n    attach(closeable) {\n        const uuid = closeable.listenerUuid;\n        const existingRecord = this._attachedListeners.get(uuid);\n        if (existingRecord) {\n            return;\n        }\n        if (!this._attachedListeners.size) {\n            // the first one to arrive\n            this._subscribe();\n        }\n        this._attachedListeners.set(uuid, closeable);\n    }\n    detach(listenerUuid) {\n        this._attachedListeners.delete(listenerUuid);\n        if (!this._attachedListeners.size) {\n            // last one out, turn off lights, shut the door\n            this.close(); // invokes unsubscribe and removal handler\n        }\n    }\n    broadcastEventToListeners(eventName, args) {\n        for (let listener of this._attachedListeners.values()) {\n            listener.emit(eventName, args);\n        }\n    }\n}\nexports.SyncEntity = SyncEntity;\nexports.default = SyncEntity;\n"]},"metadata":{},"sourceType":"script"}