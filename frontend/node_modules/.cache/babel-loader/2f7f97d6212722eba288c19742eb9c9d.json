{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst entity_1 = require(\"../entity\");\n\nconst sanitize_1 = require(\"../utils/sanitize\");\n\nconst closeable_1 = require(\"../closeable\");\n\nclass SyncStreamImpl extends entity_1.SyncEntity {\n  /**\n   * @private\n   */\n  constructor(services, descriptor, removalHandler) {\n    super(services, removalHandler);\n    this.descriptor = descriptor;\n  } // private props\n\n\n  get uri() {\n    return this.descriptor.url;\n  }\n\n  get links() {\n    return this.descriptor.links;\n  }\n\n  static get type() {\n    return 'stream';\n  }\n\n  get dateExpires() {\n    return this.descriptor.date_expires;\n  }\n\n  get type() {\n    return 'stream';\n  }\n\n  get lastEventId() {\n    return null;\n  } // below properties are specific to Insights only\n\n\n  get indexName() {\n    return undefined;\n  }\n\n  get queryString() {\n    return undefined;\n  } // public props, documented along with class description\n\n\n  get sid() {\n    return this.descriptor.sid;\n  }\n\n  get uniqueName() {\n    return this.descriptor.unique_name || null;\n  }\n\n  async publishMessage(value) {\n    const requestBody = {\n      data: value\n    };\n    const response = await this.services.network.post(this.links.messages, requestBody);\n    const responseBody = response.body;\n\n    const event = this._handleMessagePublished(responseBody.sid, value, false);\n\n    return event;\n  }\n\n  async setTtl(ttl) {\n    sanitize_1.validateMandatoryTtl(ttl);\n\n    try {\n      const requestBody = {\n        ttl: ttl\n      };\n      const response = await this.services.network.post(this.uri, requestBody);\n      this.descriptor.date_expires = response.body.date_expires;\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n\n      throw error;\n    }\n  }\n\n  async removeStream() {\n    await this.services.network.delete(this.uri);\n    this.onRemoved(true);\n  }\n  /**\n   * Handle event from the server\n   * @private\n   */\n\n\n  _update(update) {\n    switch (update.type) {\n      case 'stream_message_published':\n        {\n          this._handleMessagePublished(update.message_sid, update.message_data, true);\n\n          break;\n        }\n\n      case 'stream_removed':\n        {\n          this.onRemoved(false);\n          break;\n        }\n    }\n  }\n\n  _handleMessagePublished(sid, data, remote) {\n    const event = {\n      sid: sid,\n      value: data\n    };\n    this.broadcastEventToListeners('messagePublished', {\n      message: event,\n      isLocal: !remote\n    });\n    return event;\n  }\n\n  onRemoved(isLocal) {\n    this._unsubscribe();\n\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n    this.broadcastEventToListeners('removed', {\n      isLocal: isLocal\n    });\n  }\n\n}\n\nexports.SyncStreamImpl = SyncStreamImpl;\n/**\n * @class\n * @alias Stream\n * @classdesc A Sync primitive for pub-sub messaging. Stream Messages are not persisted, exist\n *     only in transit, and will be dropped if (due to congestion or network anomalies) they\n *     cannot be delivered promptly. Use the {@link Client#stream} method to obtain a reference to a Sync Message Stream.\n * @property {String} sid The immutable system-assigned identifier of this stream. Never null.\n * @property {String} [uniqueName=null] A unique identifier optionally assigned to the stream on creation.\n *\n * @fires Stream#messagePublished\n * @fires Stream#removed\n */\n\nclass SyncStream extends closeable_1.default {\n  constructor(syncStreamImpl) {\n    super();\n    this.syncStreamImpl = syncStreamImpl;\n    this.syncStreamImpl.attach(this);\n  } // private props\n\n\n  get uri() {\n    return this.syncStreamImpl.uri;\n  }\n\n  get links() {\n    return this.syncStreamImpl.links;\n  }\n\n  static get type() {\n    return SyncStreamImpl.type;\n  }\n\n  get dateExpires() {\n    return this.syncStreamImpl.dateExpires;\n  }\n\n  get type() {\n    return SyncStreamImpl.type;\n  }\n\n  get lastEventId() {\n    return null;\n  } // public props, documented along with class description\n\n\n  get sid() {\n    return this.syncStreamImpl.sid;\n  }\n\n  get uniqueName() {\n    return this.syncStreamImpl.uniqueName;\n  }\n  /**\n   * Publish a Message to the Stream. The system will attempt delivery to all online subscribers.\n   * @param {Object} value The body of the dispatched message. Maximum size in serialized JSON: 4KB.\n   * A rate limit applies to this operation, refer to the [Sync API documentation]{@link https://www.twilio.com/docs/api/sync} for details.\n   * @return {Promise<StreamMessage>} A promise which resolves after the message is successfully published\n   *   to the Sync service. Resolves irrespective of ultimate delivery to any subscribers.\n   * @public\n   * @example\n   * stream.publishMessage({ x: 42, y: 123 })\n   *   .then(function(message) {\n   *     console.log('Stream publishMessage() successful, message SID:' + message.sid);\n   *   })\n   *   .catch(function(error) {\n   *     console.error('Stream publishMessage() failed', error);\n   *   });\n   */\n\n\n  async publishMessage(value) {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.publishMessage(value);\n  }\n  /**\n   * Update the time-to-live of the stream.\n   * @param {Number} ttl Specifies the TTL in seconds after which the stream is subject to automatic deletion. The value 0 means infinity.\n   * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n   * @public\n   * @example\n   * stream.setTtl(3600)\n   *   .then(function() {\n   *     console.log('Stream setTtl() successful');\n   *   })\n   *   .catch(function(error) {\n   *     console.error('Stream setTtl() failed', error);\n   *   });\n   */\n\n\n  async setTtl(ttl) {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.setTtl(ttl);\n  }\n  /**\n   * Permanently delete this Stream.\n   * @return {Promise<void>} A promise which resolves after the Stream is successfully deleted.\n   * @public\n   * @example\n   * stream.removeStream()\n   *   .then(function() {\n   *     console.log('Stream removeStream() successful');\n   *   })\n   *   .catch(function(error) {\n   *     console.error('Stream removeStream() failed', error);\n   *   });\n   */\n\n\n  async removeStream() {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.removeStream();\n  }\n  /**\n   * Conclude work with the stream instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this stream will continue operating and receiving events normally.\n   * @public\n   * @example\n   * stream.close();\n   */\n\n\n  close() {\n    super.close();\n    this.syncStreamImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexports.SyncStream = SyncStream;\nexports.default = SyncStream;\n/**\n * @class StreamMessage\n * @classdesc Stream Message descriptor.\n * @property {String} sid Contains Stream Message SID.\n * @property {Object} value Contains Stream Message value.\n */\n\n/**\n * Fired when a Message is published to the Stream either locally or by a remote actor.\n * @event Stream#messagePublished\n * @param {Object} args Arguments provided with the event.\n * @param {StreamMessage} args.message Published message.\n * @param {Boolean} args.isLocal Equals 'true' if message was published by local code, 'false' otherwise.\n * @example\n * stream.on('messagePublished', function(args) {\n *   console.log('Stream message published');\n *   console.log('Message SID: ' + args.message.sid);\n *   console.log('Message value: ', args.message.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a stream is removed entirely, whether the remover was local or remote.\n * @event Stream#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if stream was removed by local code, 'false' otherwise.\n * @example\n * stream.on('removed', function(args) {\n *   console.log('Stream ' + stream.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-sync/lib/streams/syncstream.js"],"names":["Object","defineProperty","exports","value","entity_1","require","sanitize_1","closeable_1","SyncStreamImpl","SyncEntity","constructor","services","descriptor","removalHandler","uri","url","links","type","dateExpires","date_expires","lastEventId","indexName","undefined","queryString","sid","uniqueName","unique_name","publishMessage","requestBody","data","response","network","post","messages","responseBody","body","event","_handleMessagePublished","setTtl","ttl","validateMandatoryTtl","error","status","onRemoved","removeStream","delete","_update","update","message_sid","message_data","remote","broadcastEventToListeners","message","isLocal","_unsubscribe","SyncStream","default","syncStreamImpl","attach","ensureNotClosed","close","detach","listenerUuid"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAA1B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMG,cAAN,SAA6BJ,QAAQ,CAACK,UAAtC,CAAiD;AAC7C;;;AAGAC,EAAAA,WAAW,CAACC,QAAD,EAAWC,UAAX,EAAuBC,cAAvB,EAAuC;AAC9C,UAAMF,QAAN,EAAgBE,cAAhB;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACH,GAP4C,CAQ7C;;;AACA,MAAIE,GAAJ,GAAU;AACN,WAAO,KAAKF,UAAL,CAAgBG,GAAvB;AACH;;AACD,MAAIC,KAAJ,GAAY;AACR,WAAO,KAAKJ,UAAL,CAAgBI,KAAvB;AACH;;AACD,aAAWC,IAAX,GAAkB;AACd,WAAO,QAAP;AACH;;AACD,MAAIC,WAAJ,GAAkB;AACd,WAAO,KAAKN,UAAL,CAAgBO,YAAvB;AACH;;AACD,MAAIF,IAAJ,GAAW;AACP,WAAO,QAAP;AACH;;AACD,MAAIG,WAAJ,GAAkB;AACd,WAAO,IAAP;AACH,GA1B4C,CA2B7C;;;AACA,MAAIC,SAAJ,GAAgB;AACZ,WAAOC,SAAP;AACH;;AACD,MAAIC,WAAJ,GAAkB;AACd,WAAOD,SAAP;AACH,GAjC4C,CAkC7C;;;AACA,MAAIE,GAAJ,GAAU;AACN,WAAO,KAAKZ,UAAL,CAAgBY,GAAvB;AACH;;AACD,MAAIC,UAAJ,GAAiB;AACb,WAAO,KAAKb,UAAL,CAAgBc,WAAhB,IAA+B,IAAtC;AACH;;AACD,QAAMC,cAAN,CAAqBxB,KAArB,EAA4B;AACxB,UAAMyB,WAAW,GAAG;AAAEC,MAAAA,IAAI,EAAE1B;AAAR,KAApB;AACA,UAAM2B,QAAQ,GAAG,MAAM,KAAKnB,QAAL,CAAcoB,OAAd,CAAsBC,IAAtB,CAA2B,KAAKhB,KAAL,CAAWiB,QAAtC,EAAgDL,WAAhD,CAAvB;AACA,UAAMM,YAAY,GAAGJ,QAAQ,CAACK,IAA9B;;AACA,UAAMC,KAAK,GAAG,KAAKC,uBAAL,CAA6BH,YAAY,CAACV,GAA1C,EAA+CrB,KAA/C,EAAsD,KAAtD,CAAd;;AACA,WAAOiC,KAAP;AACH;;AACD,QAAME,MAAN,CAAaC,GAAb,EAAkB;AACdjC,IAAAA,UAAU,CAACkC,oBAAX,CAAgCD,GAAhC;;AACA,QAAI;AACA,YAAMX,WAAW,GAAG;AAAEW,QAAAA,GAAG,EAAEA;AAAP,OAApB;AACA,YAAMT,QAAQ,GAAG,MAAM,KAAKnB,QAAL,CAAcoB,OAAd,CAAsBC,IAAtB,CAA2B,KAAKlB,GAAhC,EAAqCc,WAArC,CAAvB;AACA,WAAKhB,UAAL,CAAgBO,YAAhB,GAA+BW,QAAQ,CAACK,IAAT,CAAchB,YAA7C;AACH,KAJD,CAKA,OAAOsB,KAAP,EAAc;AACV,UAAIA,KAAK,CAACC,MAAN,KAAiB,GAArB,EAA0B;AACtB,aAAKC,SAAL,CAAe,KAAf;AACH;;AACD,YAAMF,KAAN;AACH;AACJ;;AACD,QAAMG,YAAN,GAAqB;AACjB,UAAM,KAAKjC,QAAL,CAAcoB,OAAd,CAAsBc,MAAtB,CAA6B,KAAK/B,GAAlC,CAAN;AACA,SAAK6B,SAAL,CAAe,IAAf;AACH;AACD;;;;;;AAIAG,EAAAA,OAAO,CAACC,MAAD,EAAS;AACZ,YAAQA,MAAM,CAAC9B,IAAf;AACI,WAAK,0BAAL;AAAiC;AAC7B,eAAKoB,uBAAL,CAA6BU,MAAM,CAACC,WAApC,EAAiDD,MAAM,CAACE,YAAxD,EAAsE,IAAtE;;AACA;AACH;;AACD,WAAK,gBAAL;AAAuB;AACnB,eAAKN,SAAL,CAAe,KAAf;AACA;AACH;AARL;AAUH;;AACDN,EAAAA,uBAAuB,CAACb,GAAD,EAAMK,IAAN,EAAYqB,MAAZ,EAAoB;AACvC,UAAMd,KAAK,GAAG;AACVZ,MAAAA,GAAG,EAAEA,GADK;AAEVrB,MAAAA,KAAK,EAAE0B;AAFG,KAAd;AAIA,SAAKsB,yBAAL,CAA+B,kBAA/B,EAAmD;AAAEC,MAAAA,OAAO,EAAEhB,KAAX;AAAkBiB,MAAAA,OAAO,EAAE,CAACH;AAA5B,KAAnD;AACA,WAAOd,KAAP;AACH;;AACDO,EAAAA,SAAS,CAACU,OAAD,EAAU;AACf,SAAKC,YAAL;;AACA,SAAKzC,cAAL,CAAoB,KAAKI,IAAzB,EAA+B,KAAKO,GAApC,EAAyC,KAAKC,UAA9C;AACA,SAAK0B,yBAAL,CAA+B,SAA/B,EAA0C;AAAEE,MAAAA,OAAO,EAAEA;AAAX,KAA1C;AACH;;AA9F4C;;AAgGjDnD,OAAO,CAACM,cAAR,GAAyBA,cAAzB;AACA;;;;;;;;;;;;;AAYA,MAAM+C,UAAN,SAAyBhD,WAAW,CAACiD,OAArC,CAA6C;AACzC9C,EAAAA,WAAW,CAAC+C,cAAD,EAAiB;AACxB;AACA,SAAKA,cAAL,GAAsBA,cAAtB;AACA,SAAKA,cAAL,CAAoBC,MAApB,CAA2B,IAA3B;AACH,GALwC,CAMzC;;;AACA,MAAI5C,GAAJ,GAAU;AACN,WAAO,KAAK2C,cAAL,CAAoB3C,GAA3B;AACH;;AACD,MAAIE,KAAJ,GAAY;AACR,WAAO,KAAKyC,cAAL,CAAoBzC,KAA3B;AACH;;AACD,aAAWC,IAAX,GAAkB;AACd,WAAOT,cAAc,CAACS,IAAtB;AACH;;AACD,MAAIC,WAAJ,GAAkB;AACd,WAAO,KAAKuC,cAAL,CAAoBvC,WAA3B;AACH;;AACD,MAAID,IAAJ,GAAW;AACP,WAAOT,cAAc,CAACS,IAAtB;AACH;;AACD,MAAIG,WAAJ,GAAkB;AACd,WAAO,IAAP;AACH,GAxBwC,CAyBzC;;;AACA,MAAII,GAAJ,GAAU;AACN,WAAO,KAAKiC,cAAL,CAAoBjC,GAA3B;AACH;;AACD,MAAIC,UAAJ,GAAiB;AACb,WAAO,KAAKgC,cAAL,CAAoBhC,UAA3B;AACH;AACD;;;;;;;;;;;;;;;;;;AAgBA,QAAME,cAAN,CAAqBxB,KAArB,EAA4B;AACxB,SAAKwD,eAAL;AACA,WAAO,KAAKF,cAAL,CAAoB9B,cAApB,CAAmCxB,KAAnC,CAAP;AACH;AACD;;;;;;;;;;;;;;;;AAcA,QAAMmC,MAAN,CAAaC,GAAb,EAAkB;AACd,SAAKoB,eAAL;AACA,WAAO,KAAKF,cAAL,CAAoBnB,MAApB,CAA2BC,GAA3B,CAAP;AACH;AACD;;;;;;;;;;;;;;;AAaA,QAAMK,YAAN,GAAqB;AACjB,SAAKe,eAAL;AACA,WAAO,KAAKF,cAAL,CAAoBb,YAApB,EAAP;AACH;AACD;;;;;;;;;;AAQAgB,EAAAA,KAAK,GAAG;AACJ,UAAMA,KAAN;AACA,SAAKH,cAAL,CAAoBI,MAApB,CAA2B,KAAKC,YAAhC;AACH;;AAlGwC;;AAoG7C5D,OAAO,CAACqD,UAAR,GAAqBA,UAArB;AACArD,OAAO,CAACsD,OAAR,GAAkBD,UAAlB;AACA;;;;;;;AAMA;;;;;;;;;;;;;;;AAcA","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst entity_1 = require(\"../entity\");\nconst sanitize_1 = require(\"../utils/sanitize\");\nconst closeable_1 = require(\"../closeable\");\nclass SyncStreamImpl extends entity_1.SyncEntity {\n    /**\n     * @private\n     */\n    constructor(services, descriptor, removalHandler) {\n        super(services, removalHandler);\n        this.descriptor = descriptor;\n    }\n    // private props\n    get uri() {\n        return this.descriptor.url;\n    }\n    get links() {\n        return this.descriptor.links;\n    }\n    static get type() {\n        return 'stream';\n    }\n    get dateExpires() {\n        return this.descriptor.date_expires;\n    }\n    get type() {\n        return 'stream';\n    }\n    get lastEventId() {\n        return null;\n    }\n    // below properties are specific to Insights only\n    get indexName() {\n        return undefined;\n    }\n    get queryString() {\n        return undefined;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.descriptor.sid;\n    }\n    get uniqueName() {\n        return this.descriptor.unique_name || null;\n    }\n    async publishMessage(value) {\n        const requestBody = { data: value };\n        const response = await this.services.network.post(this.links.messages, requestBody);\n        const responseBody = response.body;\n        const event = this._handleMessagePublished(responseBody.sid, value, false);\n        return event;\n    }\n    async setTtl(ttl) {\n        sanitize_1.validateMandatoryTtl(ttl);\n        try {\n            const requestBody = { ttl: ttl };\n            const response = await this.services.network.post(this.uri, requestBody);\n            this.descriptor.date_expires = response.body.date_expires;\n        }\n        catch (error) {\n            if (error.status === 404) {\n                this.onRemoved(false);\n            }\n            throw error;\n        }\n    }\n    async removeStream() {\n        await this.services.network.delete(this.uri);\n        this.onRemoved(true);\n    }\n    /**\n     * Handle event from the server\n     * @private\n     */\n    _update(update) {\n        switch (update.type) {\n            case 'stream_message_published': {\n                this._handleMessagePublished(update.message_sid, update.message_data, true);\n                break;\n            }\n            case 'stream_removed': {\n                this.onRemoved(false);\n                break;\n            }\n        }\n    }\n    _handleMessagePublished(sid, data, remote) {\n        const event = {\n            sid: sid,\n            value: data\n        };\n        this.broadcastEventToListeners('messagePublished', { message: event, isLocal: !remote });\n        return event;\n    }\n    onRemoved(isLocal) {\n        this._unsubscribe();\n        this.removalHandler(this.type, this.sid, this.uniqueName);\n        this.broadcastEventToListeners('removed', { isLocal: isLocal });\n    }\n}\nexports.SyncStreamImpl = SyncStreamImpl;\n/**\n * @class\n * @alias Stream\n * @classdesc A Sync primitive for pub-sub messaging. Stream Messages are not persisted, exist\n *     only in transit, and will be dropped if (due to congestion or network anomalies) they\n *     cannot be delivered promptly. Use the {@link Client#stream} method to obtain a reference to a Sync Message Stream.\n * @property {String} sid The immutable system-assigned identifier of this stream. Never null.\n * @property {String} [uniqueName=null] A unique identifier optionally assigned to the stream on creation.\n *\n * @fires Stream#messagePublished\n * @fires Stream#removed\n */\nclass SyncStream extends closeable_1.default {\n    constructor(syncStreamImpl) {\n        super();\n        this.syncStreamImpl = syncStreamImpl;\n        this.syncStreamImpl.attach(this);\n    }\n    // private props\n    get uri() {\n        return this.syncStreamImpl.uri;\n    }\n    get links() {\n        return this.syncStreamImpl.links;\n    }\n    static get type() {\n        return SyncStreamImpl.type;\n    }\n    get dateExpires() {\n        return this.syncStreamImpl.dateExpires;\n    }\n    get type() {\n        return SyncStreamImpl.type;\n    }\n    get lastEventId() {\n        return null;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.syncStreamImpl.sid;\n    }\n    get uniqueName() {\n        return this.syncStreamImpl.uniqueName;\n    }\n    /**\n     * Publish a Message to the Stream. The system will attempt delivery to all online subscribers.\n     * @param {Object} value The body of the dispatched message. Maximum size in serialized JSON: 4KB.\n     * A rate limit applies to this operation, refer to the [Sync API documentation]{@link https://www.twilio.com/docs/api/sync} for details.\n     * @return {Promise<StreamMessage>} A promise which resolves after the message is successfully published\n     *   to the Sync service. Resolves irrespective of ultimate delivery to any subscribers.\n     * @public\n     * @example\n     * stream.publishMessage({ x: 42, y: 123 })\n     *   .then(function(message) {\n     *     console.log('Stream publishMessage() successful, message SID:' + message.sid);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream publishMessage() failed', error);\n     *   });\n     */\n    async publishMessage(value) {\n        this.ensureNotClosed();\n        return this.syncStreamImpl.publishMessage(value);\n    }\n    /**\n     * Update the time-to-live of the stream.\n     * @param {Number} ttl Specifies the TTL in seconds after which the stream is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * stream.setTtl(3600)\n     *   .then(function() {\n     *     console.log('Stream setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream setTtl() failed', error);\n     *   });\n     */\n    async setTtl(ttl) {\n        this.ensureNotClosed();\n        return this.syncStreamImpl.setTtl(ttl);\n    }\n    /**\n     * Permanently delete this Stream.\n     * @return {Promise<void>} A promise which resolves after the Stream is successfully deleted.\n     * @public\n     * @example\n     * stream.removeStream()\n     *   .then(function() {\n     *     console.log('Stream removeStream() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream removeStream() failed', error);\n     *   });\n     */\n    async removeStream() {\n        this.ensureNotClosed();\n        return this.syncStreamImpl.removeStream();\n    }\n    /**\n     * Conclude work with the stream instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this stream will continue operating and receiving events normally.\n     * @public\n     * @example\n     * stream.close();\n     */\n    close() {\n        super.close();\n        this.syncStreamImpl.detach(this.listenerUuid);\n    }\n}\nexports.SyncStream = SyncStream;\nexports.default = SyncStream;\n/**\n * @class StreamMessage\n * @classdesc Stream Message descriptor.\n * @property {String} sid Contains Stream Message SID.\n * @property {Object} value Contains Stream Message value.\n */\n/**\n * Fired when a Message is published to the Stream either locally or by a remote actor.\n * @event Stream#messagePublished\n * @param {Object} args Arguments provided with the event.\n * @param {StreamMessage} args.message Published message.\n * @param {Boolean} args.isLocal Equals 'true' if message was published by local code, 'false' otherwise.\n * @example\n * stream.on('messagePublished', function(args) {\n *   console.log('Stream message published');\n *   console.log('Message SID: ' + args.message.sid);\n *   console.log('Message value: ', args.message.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n/**\n * Fired when a stream is removed entirely, whether the remover was local or remote.\n * @event Stream#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if stream was removed by local code, 'false' otherwise.\n * @example\n * stream.on('removed', function(args) {\n *   console.log('Stream ' + stream.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n"]},"metadata":{},"sourceType":"script"}