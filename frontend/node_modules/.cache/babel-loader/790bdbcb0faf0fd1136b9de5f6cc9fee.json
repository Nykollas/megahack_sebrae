{"ast":null,"code":"/* globals RTCPeerConnection, RTCRtpTransceiver */\n'use strict';\n\nvar flatMap = require('./').flatMap;\n\nvar guessBrowser = require('./').guessBrowser; // NOTE(mmalavalli): We cache Chrome's sdpSemantics support in order to prevent\n// instantiation of more than one RTCPeerConnection.\n\n\nvar isSdpSemanticsSupported = null;\n/**\n * Check if Chrome supports specifying sdpSemantics for an RTCPeerConnection.\n * @return {boolean}\n */\n\nfunction checkIfSdpSemanticsIsSupported() {\n  if (typeof isSdpSemanticsSupported === 'boolean') {\n    return isSdpSemanticsSupported;\n  }\n\n  if (typeof RTCPeerConnection === 'undefined') {\n    isSdpSemanticsSupported = false;\n    return isSdpSemanticsSupported;\n  }\n\n  try {\n    new RTCPeerConnection({\n      sdpSemantics: 'foo'\n    });\n    isSdpSemanticsSupported = false;\n  } catch (e) {\n    isSdpSemanticsSupported = true;\n  }\n\n  return isSdpSemanticsSupported;\n} // NOTE(mmalavalli): We cache Chrome's SDP format in order to prevent\n// instantiation of more than one RTCPeerConnection.\n\n\nvar chromeSdpFormat = null;\n/**\n * Get Chrome's default SDP format.\n * @returns {'planb'|'unified'}\n */\n\nfunction getChromeDefaultSdpFormat() {\n  if (!chromeSdpFormat) {\n    if (typeof RTCPeerConnection !== 'undefined' && 'addTransceiver' in RTCPeerConnection.prototype) {\n      try {\n        new RTCPeerConnection().addTransceiver('audio');\n        chromeSdpFormat = 'unified';\n      } catch (e) {\n        chromeSdpFormat = 'planb';\n      }\n    } else {\n      chromeSdpFormat = 'planb';\n    }\n  }\n\n  return chromeSdpFormat;\n}\n/**\n * Get Chrome's SDP format.\n * @param {'plan-b'|'unified-plan'} [sdpSemantics]\n * @returns {'planb'|'unified'}\n */\n\n\nfunction getChromeSdpFormat(sdpSemantics) {\n  if (!sdpSemantics || !checkIfSdpSemanticsIsSupported()) {\n    return getChromeDefaultSdpFormat();\n  }\n\n  return {\n    'plan-b': 'planb',\n    'unified-plan': 'unified'\n  }[sdpSemantics];\n}\n/**\n * Get Safari's default SDP format.\n * @returns {'planb'|'unified'}\n */\n\n\nfunction getSafariSdpFormat() {\n  return typeof RTCRtpTransceiver !== 'undefined' && 'currentDirection' in RTCRtpTransceiver.prototype ? 'unified' : 'planb';\n}\n/**\n * Get the browser's default SDP format.\n * @param {'plan-b'|'unified-plan'} [sdpSemantics]\n * @returns {'planb'|'unified'}\n */\n\n\nfunction getSdpFormat(sdpSemantics) {\n  return {\n    chrome: getChromeSdpFormat(sdpSemantics),\n    firefox: 'unified',\n    safari: getSafariSdpFormat()\n  }[guessBrowser()] || null;\n}\n/**\n * Match a pattern across lines, returning the first capture group for any\n * matches.\n * @param {string} pattern\n * @param {string} lines\n * @returns {Set<string>} matches\n */\n\n\nfunction getMatches(pattern, lines) {\n  var matches = lines.match(new RegExp(pattern, 'gm')) || [];\n  return matches.reduce(function (results, line) {\n    var match = line.match(new RegExp(pattern));\n    return match ? results.add(match[1]) : results;\n  }, new Set());\n}\n/**\n * Get a Set of MediaStreamTrack IDs from an SDP.\n * @param {string} pattern\n * @param {string} sdp\n * @returns {Set<string>}\n */\n\n\nfunction getTrackIds(pattern, sdp) {\n  return getMatches(pattern, sdp);\n}\n/**\n * Get a Set of MediaStreamTrack IDs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Set<string>} trackIds\n */\n\n\nfunction getPlanBTrackIds(sdp) {\n  return getTrackIds('^a=ssrc:[0-9]+ +msid:.+ +(.+) *$', sdp);\n}\n/**\n * Get a Set of MediaStreamTrack IDs from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @returns {Set<string>} trackIds\n */\n\n\nfunction getUnifiedPlanTrackIds(sdp) {\n  return getTrackIds('^a=msid:.+ +(.+) *$', sdp);\n}\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\n\n\nfunction getPlanBSSRCs(sdp, trackId) {\n  var pattern = '^a=ssrc:([0-9]+) +msid:[^ ]+ +' + trackId + ' *$';\n  return getMatches(pattern, sdp);\n}\n/**\n * Get the m= sections of a particular kind and direction from an sdp.\n * @param {string} sdp -  sdp string\n * @param {string} [kind] - Pattern for matching kind\n * @param {string} [direction] - Pattern for matching direction\n * @returns {Array<string>} mediaSections\n */\n\n\nfunction getMediaSections(sdp, kind, direction) {\n  kind = kind || '.*';\n  direction = direction || '.*';\n  return sdp.split('\\r\\nm=').slice(1).map(function (mediaSection) {\n    return 'm=' + mediaSection;\n  }).filter(function (mediaSection) {\n    var kindPattern = new RegExp('m=' + kind, 'gm');\n    var directionPattern = new RegExp('a=' + direction, 'gm');\n    return kindPattern.test(mediaSection) && directionPattern.test(mediaSection);\n  });\n}\n/**\n * Get the Set of SSRCs announced in a MediaSection.\n * @param {string} mediaSection\n * @returns {Array<string>} ssrcs\n */\n\n\nfunction getMediaSectionSSRCs(mediaSection) {\n  return Array.from(getMatches('^a=ssrc:([0-9]+) +.*$', mediaSection));\n}\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\n\n\nfunction getUnifiedPlanSSRCs(sdp, trackId) {\n  var mediaSections = getMediaSections(sdp);\n  var msidAttrRegExp = new RegExp('^a=msid:[^ ]+ +' + trackId + ' *$', 'gm');\n  var matchingMediaSections = mediaSections.filter(function (mediaSection) {\n    return mediaSection.match(msidAttrRegExp);\n  });\n  return new Set(flatMap(matchingMediaSections, getMediaSectionSSRCs));\n}\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from an SDP.\n * @param {function(string): Set<string>} getTrackIds\n * @param {function(string, string): Set<string>} getSSRCs\n * @param {string} sdp - SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\n\n\nfunction getTrackIdsToSSRCs(getTrackIds, getSSRCs, sdp) {\n  return new Map(Array.from(getTrackIds(sdp)).map(function (trackId) {\n    return [trackId, getSSRCs(sdp, trackId)];\n  }));\n}\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\n\n\nfunction getPlanBTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getPlanBTrackIds, getPlanBSSRCs, sdp);\n}\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\n\n\nfunction getUnifiedPlanTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getUnifiedPlanTrackIds, getUnifiedPlanSSRCs, sdp);\n}\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the SDP itself. This method\n * ensures that SSRCs never change once announced.\n * @param {function(string): Map<string, Set<string>>} getTrackIdsToSSRCs\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - SDP\n * @returns {strinng} updatedSdp - updated SDP\n */\n\n\nfunction updateTrackIdsToSSRCs(getTrackIdsToSSRCs, trackIdsToSSRCs, sdp) {\n  var newTrackIdsToSSRCs = getTrackIdsToSSRCs(sdp);\n  var newSSRCsToOldSSRCs = new Map(); // NOTE(mroberts): First, update a=ssrc attributes.\n\n  newTrackIdsToSSRCs.forEach(function (ssrcs, trackId) {\n    if (!trackIdsToSSRCs.has(trackId)) {\n      trackIdsToSSRCs.set(trackId, ssrcs);\n      return;\n    }\n\n    var oldSSRCs = Array.from(trackIdsToSSRCs.get(trackId));\n    var newSSRCs = Array.from(ssrcs);\n    oldSSRCs.forEach(function (oldSSRC, i) {\n      var newSSRC = newSSRCs[i];\n      newSSRCsToOldSSRCs.set(newSSRC, oldSSRC);\n      var pattern = '^a=ssrc:' + newSSRC + ' (.*)$';\n      var replacement = 'a=ssrc:' + oldSSRC + ' $1';\n      sdp = sdp.replace(new RegExp(pattern, 'gm'), replacement);\n    });\n  }); // NOTE(mroberts): Then, update a=ssrc-group attributes.\n\n  var pattern = '^(a=ssrc-group:[^ ]+ +)(.*)$';\n  var matches = sdp.match(new RegExp(pattern, 'gm')) || [];\n  matches.forEach(function (line) {\n    var match = line.match(new RegExp(pattern));\n\n    if (!match) {\n      return;\n    }\n\n    var prefix = match[1];\n    var newSSRCs = match[2];\n    var oldSSRCs = newSSRCs.split(' ').map(function (newSSRC) {\n      var oldSSRC = newSSRCsToOldSSRCs.get(newSSRC);\n      return oldSSRC ? oldSSRC : newSSRC;\n    }).join(' ');\n    sdp = sdp.replace(match[0], prefix + oldSSRCs);\n  });\n  return sdp;\n}\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\n\n\nfunction updatePlanBTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getPlanBTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\n\n\nfunction updateUnifiedPlanTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getUnifiedPlanTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n\nexports.getSdpFormat = getSdpFormat;\nexports.getMediaSections = getMediaSections;\nexports.getPlanBTrackIds = getPlanBTrackIds;\nexports.getUnifiedPlanTrackIds = getUnifiedPlanTrackIds;\nexports.getPlanBSSRCs = getPlanBSSRCs;\nexports.getUnifiedPlanSSRCs = getUnifiedPlanSSRCs;\nexports.updatePlanBTrackIdsToSSRCs = updatePlanBTrackIdsToSSRCs;\nexports.updateUnifiedPlanTrackIdsToSSRCs = updateUnifiedPlanTrackIdsToSSRCs;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/@twilio/webrtc/lib/util/sdp.js"],"names":["flatMap","require","guessBrowser","isSdpSemanticsSupported","checkIfSdpSemanticsIsSupported","RTCPeerConnection","sdpSemantics","e","chromeSdpFormat","getChromeDefaultSdpFormat","prototype","addTransceiver","getChromeSdpFormat","getSafariSdpFormat","RTCRtpTransceiver","getSdpFormat","chrome","firefox","safari","getMatches","pattern","lines","matches","match","RegExp","reduce","results","line","add","Set","getTrackIds","sdp","getPlanBTrackIds","getUnifiedPlanTrackIds","getPlanBSSRCs","trackId","getMediaSections","kind","direction","split","slice","map","mediaSection","filter","kindPattern","directionPattern","test","getMediaSectionSSRCs","Array","from","getUnifiedPlanSSRCs","mediaSections","msidAttrRegExp","matchingMediaSections","getTrackIdsToSSRCs","getSSRCs","Map","getPlanBTrackIdsToSSRCs","getUnifiedPlanTrackIdsToSSRCs","updateTrackIdsToSSRCs","trackIdsToSSRCs","newTrackIdsToSSRCs","newSSRCsToOldSSRCs","forEach","ssrcs","has","set","oldSSRCs","get","newSSRCs","oldSSRC","i","newSSRC","replacement","replace","prefix","join","updatePlanBTrackIdsToSSRCs","updateUnifiedPlanTrackIdsToSSRCs","exports"],"mappings":"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","sourcesContent":["/* globals RTCPeerConnection, RTCRtpTransceiver */\n\n'use strict';\n\nvar flatMap = require('./').flatMap;\nvar guessBrowser = require('./').guessBrowser;\n\n// NOTE(mmalavalli): We cache Chrome's sdpSemantics support in order to prevent\n// instantiation of more than one RTCPeerConnection.\nvar isSdpSemanticsSupported = null;\n\n/**\n * Check if Chrome supports specifying sdpSemantics for an RTCPeerConnection.\n * @return {boolean}\n */\nfunction checkIfSdpSemanticsIsSupported() {\n  if (typeof isSdpSemanticsSupported === 'boolean') {\n    return isSdpSemanticsSupported;\n  }\n  if (typeof RTCPeerConnection === 'undefined') {\n    isSdpSemanticsSupported = false;\n    return isSdpSemanticsSupported;\n  }\n  try {\n    new RTCPeerConnection({ sdpSemantics: 'foo' });\n    isSdpSemanticsSupported = false;\n  } catch (e) {\n    isSdpSemanticsSupported = true;\n  }\n  return isSdpSemanticsSupported;\n}\n\n// NOTE(mmalavalli): We cache Chrome's SDP format in order to prevent\n// instantiation of more than one RTCPeerConnection.\nvar chromeSdpFormat = null;\n\n/**\n * Get Chrome's default SDP format.\n * @returns {'planb'|'unified'}\n */\nfunction getChromeDefaultSdpFormat() {\n  if (!chromeSdpFormat) {\n    if (typeof RTCPeerConnection !== 'undefined'\n      && 'addTransceiver' in RTCPeerConnection.prototype) {\n      try {\n        new RTCPeerConnection().addTransceiver('audio');\n        chromeSdpFormat = 'unified';\n      } catch (e) {\n        chromeSdpFormat = 'planb';\n      }\n    } else {\n      chromeSdpFormat = 'planb';\n    }\n  }\n  return chromeSdpFormat;\n}\n\n/**\n * Get Chrome's SDP format.\n * @param {'plan-b'|'unified-plan'} [sdpSemantics]\n * @returns {'planb'|'unified'}\n */\nfunction getChromeSdpFormat(sdpSemantics) {\n  if (!sdpSemantics || !checkIfSdpSemanticsIsSupported()) {\n    return getChromeDefaultSdpFormat();\n  }\n  return {\n    'plan-b': 'planb',\n    'unified-plan': 'unified'\n  }[sdpSemantics];\n}\n\n/**\n * Get Safari's default SDP format.\n * @returns {'planb'|'unified'}\n */\nfunction getSafariSdpFormat() {\n  return typeof RTCRtpTransceiver !== 'undefined'\n    && 'currentDirection' in RTCRtpTransceiver.prototype\n      ? 'unified'\n      : 'planb';\n}\n\n/**\n * Get the browser's default SDP format.\n * @param {'plan-b'|'unified-plan'} [sdpSemantics]\n * @returns {'planb'|'unified'}\n */\nfunction getSdpFormat(sdpSemantics) {\n  return {\n    chrome: getChromeSdpFormat(sdpSemantics),\n    firefox: 'unified',\n    safari: getSafariSdpFormat()\n  }[guessBrowser()] || null;\n}\n\n/**\n * Match a pattern across lines, returning the first capture group for any\n * matches.\n * @param {string} pattern\n * @param {string} lines\n * @returns {Set<string>} matches\n */\nfunction getMatches(pattern, lines) {\n  var matches = lines.match(new RegExp(pattern, 'gm')) || [];\n  return matches.reduce(function(results, line) {\n    var match = line.match(new RegExp(pattern));\n    return match ? results.add(match[1]) : results;\n  }, new Set());\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from an SDP.\n * @param {string} pattern\n * @param {string} sdp\n * @returns {Set<string>}\n */\nfunction getTrackIds(pattern, sdp) {\n  return getMatches(pattern, sdp);\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Set<string>} trackIds\n */\nfunction getPlanBTrackIds(sdp) {\n  return getTrackIds('^a=ssrc:[0-9]+ +msid:.+ +(.+) *$', sdp);\n}\n\n/**\n * Get a Set of MediaStreamTrack IDs from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @returns {Set<string>} trackIds\n */\nfunction getUnifiedPlanTrackIds(sdp) {\n  return getTrackIds('^a=msid:.+ +(.+) *$', sdp);\n}\n\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\nfunction getPlanBSSRCs(sdp, trackId) {\n  var pattern = '^a=ssrc:([0-9]+) +msid:[^ ]+ +' + trackId + ' *$';\n  return getMatches(pattern, sdp);\n}\n\n/**\n * Get the m= sections of a particular kind and direction from an sdp.\n * @param {string} sdp -  sdp string\n * @param {string} [kind] - Pattern for matching kind\n * @param {string} [direction] - Pattern for matching direction\n * @returns {Array<string>} mediaSections\n */\nfunction getMediaSections(sdp, kind, direction) {\n  kind = kind || '.*';\n  direction = direction || '.*';\n  return sdp.split('\\r\\nm=').slice(1).map(function(mediaSection) {\n    return 'm=' + mediaSection;\n  }).filter(function(mediaSection) {\n    var kindPattern = new RegExp('m=' + kind, 'gm');\n    var directionPattern = new RegExp('a=' + direction, 'gm');\n    return kindPattern.test(mediaSection) && directionPattern.test(mediaSection);\n  });\n}\n\n/**\n * Get the Set of SSRCs announced in a MediaSection.\n * @param {string} mediaSection\n * @returns {Array<string>} ssrcs\n */\nfunction getMediaSectionSSRCs(mediaSection) {\n  return Array.from(getMatches('^a=ssrc:([0-9]+) +.*$', mediaSection));\n}\n\n/**\n * Get a Set of SSRCs for a MediaStreamTrack from a Unified Plan SDP.\n * @param {string} sdp - Unified Plan SDP\n * @param {string} trackId - MediaStreamTrack ID\n * @returns {Set<string>}\n */\nfunction getUnifiedPlanSSRCs(sdp, trackId) {\n  var mediaSections = getMediaSections(sdp);\n\n  var msidAttrRegExp = new RegExp('^a=msid:[^ ]+ +' + trackId + ' *$', 'gm');\n  var matchingMediaSections = mediaSections.filter(function(mediaSection) {\n    return mediaSection.match(msidAttrRegExp);\n  });\n\n  return new Set(flatMap(matchingMediaSections, getMediaSectionSSRCs));\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from an SDP.\n * @param {function(string): Set<string>} getTrackIds\n * @param {function(string, string): Set<string>} getSSRCs\n * @param {string} sdp - SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getTrackIdsToSSRCs(getTrackIds, getSSRCs, sdp) {\n  return new Map(Array.from(getTrackIds(sdp)).map(function(trackId) {\n    return [trackId, getSSRCs(sdp, trackId)];\n  }));\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getPlanBTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getPlanBTrackIds, getPlanBSSRCs, sdp);\n}\n\n/**\n * Get a Map from MediaStreamTrack IDs to SSRCs from a Plan B SDP.\n * @param {string} sdp - Plan B SDP\n * @returns {Map<string, Set<string>>} trackIdsToSSRCs\n */\nfunction getUnifiedPlanTrackIdsToSSRCs(sdp) {\n  return getTrackIdsToSSRCs(getUnifiedPlanTrackIds, getUnifiedPlanSSRCs, sdp);\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the SDP itself. This method\n * ensures that SSRCs never change once announced.\n * @param {function(string): Map<string, Set<string>>} getTrackIdsToSSRCs\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - SDP\n * @returns {strinng} updatedSdp - updated SDP\n */\nfunction updateTrackIdsToSSRCs(getTrackIdsToSSRCs, trackIdsToSSRCs, sdp) {\n  var newTrackIdsToSSRCs = getTrackIdsToSSRCs(sdp);\n  var newSSRCsToOldSSRCs = new Map();\n\n  // NOTE(mroberts): First, update a=ssrc attributes.\n  newTrackIdsToSSRCs.forEach(function(ssrcs, trackId) {\n    if (!trackIdsToSSRCs.has(trackId)) {\n      trackIdsToSSRCs.set(trackId, ssrcs);\n      return;\n    }\n    var oldSSRCs = Array.from(trackIdsToSSRCs.get(trackId));\n    var newSSRCs = Array.from(ssrcs);\n    oldSSRCs.forEach(function(oldSSRC, i) {\n      var newSSRC = newSSRCs[i];\n      newSSRCsToOldSSRCs.set(newSSRC, oldSSRC);\n      var pattern = '^a=ssrc:' + newSSRC + ' (.*)$';\n      var replacement = 'a=ssrc:' + oldSSRC + ' $1';\n      sdp = sdp.replace(new RegExp(pattern, 'gm'), replacement);\n    });\n  });\n\n  // NOTE(mroberts): Then, update a=ssrc-group attributes.\n  var pattern = '^(a=ssrc-group:[^ ]+ +)(.*)$';\n  var matches = sdp.match(new RegExp(pattern, 'gm')) || [];\n  matches.forEach(function(line) {\n    var match = line.match(new RegExp(pattern));\n    if (!match) {\n      return;\n    }\n    var prefix = match[1];\n    var newSSRCs = match[2];\n    var oldSSRCs = newSSRCs.split(' ').map(function(newSSRC) {\n      var oldSSRC = newSSRCsToOldSSRCs.get(newSSRC);\n      return oldSSRC ? oldSSRC : newSSRC;\n    }).join(' ');\n    sdp = sdp.replace(match[0], prefix + oldSSRCs);\n  });\n\n  return sdp;\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\nfunction updatePlanBTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getPlanBTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n\n/**\n * Update the mappings from MediaStreamTrack IDs to SSRCs as indicated by both\n * the Map from MediaStreamTrack IDs to SSRCs and the Plan B SDP itself. This\n * method ensures that SSRCs never change once announced.\n * @param {Map<string, Set<string>>} trackIdsToSSRCs\n * @param {string} sdp - Plan B SDP\n * @returns {string} updatedSdp - updated Plan B SDP\n */\nfunction updateUnifiedPlanTrackIdsToSSRCs(trackIdsToSSRCs, sdp) {\n  return updateTrackIdsToSSRCs(getUnifiedPlanTrackIdsToSSRCs, trackIdsToSSRCs, sdp);\n}\n\nexports.getSdpFormat = getSdpFormat;\nexports.getMediaSections = getMediaSections;\nexports.getPlanBTrackIds = getPlanBTrackIds;\nexports.getUnifiedPlanTrackIds = getUnifiedPlanTrackIds;\nexports.getPlanBSSRCs = getPlanBSSRCs;\nexports.getUnifiedPlanSSRCs = getUnifiedPlanSSRCs;\nexports.updatePlanBTrackIdsToSSRCs = updatePlanBTrackIdsToSSRCs;\nexports.updateUnifiedPlanTrackIdsToSSRCs = updateUnifiedPlanTrackIdsToSSRCs;\n"]},"metadata":{},"sourceType":"script"}