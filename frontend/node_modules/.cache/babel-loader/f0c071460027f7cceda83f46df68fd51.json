{"ast":null,"code":"'use strict';\n\nvar asLocalTrack = require('./util').asLocalTrack;\n\nvar buildLogLevels = require('./util').buildLogLevels;\n\nvar getUserMedia = require('@twilio/webrtc').getUserMedia;\n\nvar _require = require('./media/track/es5'),\n    LocalAudioTrack = _require.LocalAudioTrack,\n    LocalDataTrack = _require.LocalDataTrack,\n    LocalVideoTrack = _require.LocalVideoTrack;\n\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\n\nvar Log = require('./util/log');\n\nvar DEFAULT_LOG_LEVEL = require('./util/constants').DEFAULT_LOG_LEVEL;\n\nvar workaround180748 = require('./webaudio/workaround180748'); // This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\n\n\nvar createLocalTrackCalls = 0;\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n */\n\nfunction createLocalTracks(options) {\n  var isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n  options = Object.assign({\n    audio: isAudioVideoAbsent,\n    getUserMedia: getUserMedia,\n    logLevel: DEFAULT_LOG_LEVEL,\n    LocalAudioTrack: LocalAudioTrack,\n    LocalDataTrack: LocalDataTrack,\n    LocalVideoTrack: LocalVideoTrack,\n    MediaStreamTrack: MediaStreamTrack,\n    Log: Log,\n    video: isAudioVideoAbsent\n  }, options);\n  var logComponentName = '[createLocalTracks #' + ++createLocalTrackCalls + ']';\n  var logLevels = buildLogLevels(options.logLevel);\n  var log = new options.Log('default', logComponentName, logLevels); // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n\n  var localTrackOptions = Object.assign({\n    log: log\n  }, options);\n  delete localTrackOptions.name;\n\n  if (options.audio === false && options.video === false) {\n    log.info('Neither audio nor video requested, so returning empty LocalTracks');\n    return Promise.resolve([]);\n  }\n\n  if (options.tracks) {\n    log.info('Adding user-provided LocalTracks');\n    log.debug('LocalTracks:', options.tracks);\n    return Promise.resolve(options.tracks);\n  }\n\n  var localTrackNameOptions = {\n    audio: options.audio && options.audio.name ? {\n      name: options.audio.name\n    } : {},\n    video: options.video && options.video.name ? {\n      name: options.video.name\n    } : {}\n  };\n\n  if (options.audio) {\n    delete options.audio.name;\n  }\n\n  if (options.video) {\n    delete options.video.name;\n  }\n\n  var mediaStreamConstraints = {\n    audio: options.audio,\n    video: options.video\n  };\n  var workaroundWebKitBug180748 = options.audio && options.audio.workaroundWebKitBug180748;\n  var mediaStreamPromise = workaroundWebKitBug180748 ? workaround180748(log, options.getUserMedia, mediaStreamConstraints) : options.getUserMedia(mediaStreamConstraints);\n  return mediaStreamPromise.then(function (mediaStream) {\n    var mediaStreamTracks = mediaStream.getAudioTracks().concat(mediaStream.getVideoTracks());\n    log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n    return mediaStreamTracks.map(function (mediaStreamTrack) {\n      return asLocalTrack(mediaStreamTrack, Object.assign(localTrackNameOptions[mediaStreamTrack.kind], localTrackOptions));\n    });\n  }, function (error) {\n    log.warn('Call to getUserMedia failed:', error);\n    throw error;\n  });\n}\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - Set the log verbosity\n *   of logging to console. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n\n\nmodule.exports = createLocalTracks;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/createlocaltracks.js"],"names":["asLocalTrack","require","buildLogLevels","getUserMedia","_require","LocalAudioTrack","LocalDataTrack","LocalVideoTrack","MediaStreamTrack","Log","DEFAULT_LOG_LEVEL","workaround180748","createLocalTrackCalls","createLocalTracks","options","isAudioVideoAbsent","Object","assign","audio","logLevel","video","logComponentName","logLevels","log","localTrackOptions","name","info","Promise","resolve","tracks","debug","localTrackNameOptions","mediaStreamConstraints","workaroundWebKitBug180748","mediaStreamPromise","then","mediaStream","mediaStreamTracks","getAudioTracks","concat","getVideoTracks","map","mediaStreamTrack","kind","error","warn","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar asLocalTrack = require('./util').asLocalTrack;\nvar buildLogLevels = require('./util').buildLogLevels;\nvar getUserMedia = require('@twilio/webrtc').getUserMedia;\n\nvar _require = require('./media/track/es5'),\n    LocalAudioTrack = _require.LocalAudioTrack,\n    LocalDataTrack = _require.LocalDataTrack,\n    LocalVideoTrack = _require.LocalVideoTrack;\n\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\nvar Log = require('./util/log');\nvar DEFAULT_LOG_LEVEL = require('./util/constants').DEFAULT_LOG_LEVEL;\nvar workaround180748 = require('./webaudio/workaround180748');\n\n// This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\nvar createLocalTrackCalls = 0;\n\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n */\nfunction createLocalTracks(options) {\n  var isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n\n  options = Object.assign({\n    audio: isAudioVideoAbsent,\n    getUserMedia: getUserMedia,\n    logLevel: DEFAULT_LOG_LEVEL,\n    LocalAudioTrack: LocalAudioTrack,\n    LocalDataTrack: LocalDataTrack,\n    LocalVideoTrack: LocalVideoTrack,\n    MediaStreamTrack: MediaStreamTrack,\n    Log: Log,\n    video: isAudioVideoAbsent\n  }, options);\n\n  var logComponentName = '[createLocalTracks #' + ++createLocalTrackCalls + ']';\n  var logLevels = buildLogLevels(options.logLevel);\n  var log = new options.Log('default', logComponentName, logLevels);\n\n  // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n  var localTrackOptions = Object.assign({ log: log }, options);\n  delete localTrackOptions.name;\n\n  if (options.audio === false && options.video === false) {\n    log.info('Neither audio nor video requested, so returning empty LocalTracks');\n    return Promise.resolve([]);\n  }\n\n  if (options.tracks) {\n    log.info('Adding user-provided LocalTracks');\n    log.debug('LocalTracks:', options.tracks);\n    return Promise.resolve(options.tracks);\n  }\n\n  var localTrackNameOptions = {\n    audio: options.audio && options.audio.name ? { name: options.audio.name } : {},\n    video: options.video && options.video.name ? { name: options.video.name } : {}\n  };\n\n  if (options.audio) {\n    delete options.audio.name;\n  }\n  if (options.video) {\n    delete options.video.name;\n  }\n\n  var mediaStreamConstraints = {\n    audio: options.audio,\n    video: options.video\n  };\n\n  var workaroundWebKitBug180748 = options.audio && options.audio.workaroundWebKitBug180748;\n\n  var mediaStreamPromise = workaroundWebKitBug180748 ? workaround180748(log, options.getUserMedia, mediaStreamConstraints) : options.getUserMedia(mediaStreamConstraints);\n\n  return mediaStreamPromise.then(function (mediaStream) {\n    var mediaStreamTracks = mediaStream.getAudioTracks().concat(mediaStream.getVideoTracks());\n\n    log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n\n    return mediaStreamTracks.map(function (mediaStreamTrack) {\n      return asLocalTrack(mediaStreamTrack, Object.assign(localTrackNameOptions[mediaStreamTrack.kind], localTrackOptions));\n    });\n  }, function (error) {\n    log.warn('Call to getUserMedia failed:', error);\n    throw error;\n  });\n}\n\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - Set the log verbosity\n *   of logging to console. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n\nmodule.exports = createLocalTracks;"]},"metadata":{},"sourceType":"script"}