{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport Video from 'twilio-video'; // This function ensures that the user has granted the browser permission to use audio and video\n// devices. If permission has not been granted, it will cause the browser to ask for permission\n// for audio and video at the same time (as opposed to separate requests).\n\nfunction ensureMediaPermissions() {\n  return navigator.mediaDevices.enumerateDevices().then(devices => devices.every(device => !(device.deviceId && device.label))).then(shouldAskForMediaPermissions => {\n    if (shouldAskForMediaPermissions) {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(mediaStream => mediaStream.getTracks().forEach(track => track.stop()));\n    }\n  });\n}\n\nexport function useLocalAudioTrack() {\n  const [track, setTrack] = useState();\n  useEffect(() => {\n    ensureMediaPermissions().then(() => Video.createLocalAudioTrack().then(newTrack => {\n      setTrack(newTrack);\n    }));\n  }, []);\n  useEffect(() => {\n    const handleStopped = () => setTrack(undefined);\n\n    if (track) {\n      track.on('stopped', handleStopped);\n      return () => {\n        track.off('stopped', handleStopped);\n      };\n    }\n  }, [track]);\n  return track;\n}\nexport function useLocalVideoTrack() {\n  const [track, setTrack] = useState();\n  const getLocalVideoTrack = useCallback(facingMode => {\n    const options = {\n      frameRate: 24,\n      height: 720,\n      width: 1280,\n      name: 'camera'\n    };\n\n    if (facingMode) {\n      options.facingMode = facingMode;\n    }\n\n    return ensureMediaPermissions().then(() => Video.createLocalVideoTrack(options).then(newTrack => {\n      setTrack(newTrack);\n      return newTrack;\n    }));\n  }, []);\n  useEffect(() => {\n    // We get a new local video track when the app loads.\n    getLocalVideoTrack();\n  }, [getLocalVideoTrack]);\n  useEffect(() => {\n    const handleStopped = () => setTrack(undefined);\n\n    if (track) {\n      track.on('stopped', handleStopped);\n      return () => {\n        track.off('stopped', handleStopped);\n      };\n    }\n  }, [track]);\n  return [track, getLocalVideoTrack];\n}\nexport default function useLocalTracks() {\n  const audioTrack = useLocalAudioTrack();\n  const [videoTrack, getLocalVideoTrack] = useLocalVideoTrack();\n  const localTracks = [audioTrack, videoTrack].filter(track => track !== undefined);\n  return {\n    localTracks,\n    getLocalVideoTrack\n  };\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/components/VideoProvider/useLocalTracks/useLocalTracks.ts"],"names":["useCallback","useEffect","useState","Video","ensureMediaPermissions","navigator","mediaDevices","enumerateDevices","then","devices","every","device","deviceId","label","shouldAskForMediaPermissions","getUserMedia","audio","video","mediaStream","getTracks","forEach","track","stop","useLocalAudioTrack","setTrack","createLocalAudioTrack","newTrack","handleStopped","undefined","on","off","useLocalVideoTrack","getLocalVideoTrack","facingMode","options","frameRate","height","width","name","createLocalVideoTrack","useLocalTracks","audioTrack","videoTrack","localTracks","filter"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport Video, { LocalVideoTrack, LocalAudioTrack, CreateLocalTrackOptions } from 'twilio-video';\n\n// This function ensures that the user has granted the browser permission to use audio and video\n// devices. If permission has not been granted, it will cause the browser to ask for permission\n// for audio and video at the same time (as opposed to separate requests).\nfunction ensureMediaPermissions() {\n  return navigator.mediaDevices\n    .enumerateDevices()\n    .then(devices => devices.every(device => !(device.deviceId && device.label)))\n    .then(shouldAskForMediaPermissions => {\n      if (shouldAskForMediaPermissions) {\n        navigator.mediaDevices\n          .getUserMedia({ audio: true, video: true })\n          .then(mediaStream => mediaStream.getTracks().forEach(track => track.stop()));\n      }\n    });\n}\n\nexport function useLocalAudioTrack() {\n  const [track, setTrack] = useState<LocalAudioTrack>();\n\n  useEffect(() => {\n    ensureMediaPermissions().then(() =>\n      Video.createLocalAudioTrack().then(newTrack => {\n        setTrack(newTrack);\n      })\n    );\n  }, []);\n\n  useEffect(() => {\n    const handleStopped = () => setTrack(undefined);\n    if (track) {\n      track.on('stopped', handleStopped);\n      return () => {\n        track.off('stopped', handleStopped);\n      };\n    }\n  }, [track]);\n\n  return track;\n}\n\nexport function useLocalVideoTrack() {\n  const [track, setTrack] = useState<LocalVideoTrack>();\n\n  const getLocalVideoTrack = useCallback((facingMode?: CreateLocalTrackOptions['facingMode']) => {\n    const options: CreateLocalTrackOptions = {\n      frameRate: 24,\n      height: 720,\n      width: 1280,\n      name: 'camera',\n    };\n\n    if (facingMode) {\n      options.facingMode = facingMode;\n    }\n\n    return ensureMediaPermissions().then(() =>\n      Video.createLocalVideoTrack(options).then(newTrack => {\n        setTrack(newTrack);\n        return newTrack;\n      })\n    );\n  }, []);\n\n  useEffect(() => {\n    // We get a new local video track when the app loads.\n    getLocalVideoTrack();\n  }, [getLocalVideoTrack]);\n\n  useEffect(() => {\n    const handleStopped = () => setTrack(undefined);\n    if (track) {\n      track.on('stopped', handleStopped);\n      return () => {\n        track.off('stopped', handleStopped);\n      };\n    }\n  }, [track]);\n\n  return [track, getLocalVideoTrack] as const;\n}\n\nexport default function useLocalTracks() {\n  const audioTrack = useLocalAudioTrack();\n  const [videoTrack, getLocalVideoTrack] = useLocalVideoTrack();\n\n  const localTracks = [audioTrack, videoTrack].filter(track => track !== undefined) as (\n    | LocalAudioTrack\n    | LocalVideoTrack\n  )[];\n\n  return { localTracks, getLocalVideoTrack };\n}\n"]},"metadata":{},"sourceType":"module"}