{"ast":null,"code":"'use strict';\n/**\n * This function is very similar to <code>navigator.getUserMedia</code> except\n * that it does not use callbacks and returns a Promise for a MediaStream\n * @function getUserMedia\n * @param {MediaStreamConstraints} [constraints={audio:true,video:true}] - the\n *   MediaStreamConstraints object specifying what kind of LocalMediaStream to\n *   request from the browser (by default both audio and video)\n * @returns Promise<MediaStream>\n */\n\nfunction getUserMedia(constraints) {\n  return new Promise(function getUserMediaPromise(resolve, reject) {\n    _getUserMedia(constraints || {\n      audio: true,\n      video: true\n    }, resolve, reject);\n  });\n}\n\nfunction _getUserMedia(constraints, onSuccess, onFailure) {\n  if (typeof window !== 'undefined' && typeof navigator !== 'undefined') {\n    if (typeof navigator.mediaDevices === 'object' && typeof navigator.mediaDevices.getUserMedia === 'function') {\n      navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onFailure);\n      return;\n    } else if (typeof navigator.webkitGetUserMedia === 'function') {\n      navigator.webkitGetUserMedia(constraints, onSuccess, onFailure);\n      return;\n    } else if (typeof navigator.mozGetUserMedia === 'function') {\n      navigator.mozGetUserMedia(constraints, onSuccess, onFailure);\n      return;\n    }\n  }\n\n  onFailure(new Error('getUserMedia is not supported'));\n}\n\nmodule.exports = getUserMedia;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/@twilio/webrtc/lib/getusermedia.js"],"names":["getUserMedia","constraints","Promise","getUserMediaPromise","resolve","reject","_getUserMedia","audio","video","onSuccess","onFailure","window","navigator","mediaDevices","then","webkitGetUserMedia","mozGetUserMedia","Error","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;AASA,SAASA,YAAT,CAAsBC,WAAtB,EAAmC;AACjC,SAAO,IAAIC,OAAJ,CAAY,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,MAAtC,EAA8C;AAC/DC,IAAAA,aAAa,CAACL,WAAW,IAAI;AAAEM,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAhB,EAA8CJ,OAA9C,EAAuDC,MAAvD,CAAb;AACD,GAFM,CAAP;AAGD;;AAED,SAASC,aAAT,CAAuBL,WAAvB,EAAoCQ,SAApC,EAA+CC,SAA/C,EAA0D;AACxD,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,SAAP,KAAqB,WAA1D,EAAuE;AACrE,QAAI,OAAOA,SAAS,CAACC,YAAjB,KAAkC,QAAlC,IACA,OAAOD,SAAS,CAACC,YAAV,CAAuBb,YAA9B,KAA+C,UADnD,EAC+D;AAC7DY,MAAAA,SAAS,CAACC,YAAV,CAAuBb,YAAvB,CAAoCC,WAApC,EAAiDa,IAAjD,CAAsDL,SAAtD,EAAiEC,SAAjE;AACA;AACD,KAJD,MAIO,IAAI,OAAOE,SAAS,CAACG,kBAAjB,KAAwC,UAA5C,EAAwD;AAC7DH,MAAAA,SAAS,CAACG,kBAAV,CAA6Bd,WAA7B,EAA0CQ,SAA1C,EAAqDC,SAArD;AACA;AACD,KAHM,MAGA,IAAI,OAAOE,SAAS,CAACI,eAAjB,KAAqC,UAAzC,EAAqD;AAC1DJ,MAAAA,SAAS,CAACI,eAAV,CAA0Bf,WAA1B,EAAuCQ,SAAvC,EAAkDC,SAAlD;AACA;AACD;AACF;;AACDA,EAAAA,SAAS,CAAC,IAAIO,KAAJ,CAAU,+BAAV,CAAD,CAAT;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBnB,YAAjB","sourcesContent":["'use strict';\n\n/**\n * This function is very similar to <code>navigator.getUserMedia</code> except\n * that it does not use callbacks and returns a Promise for a MediaStream\n * @function getUserMedia\n * @param {MediaStreamConstraints} [constraints={audio:true,video:true}] - the\n *   MediaStreamConstraints object specifying what kind of LocalMediaStream to\n *   request from the browser (by default both audio and video)\n * @returns Promise<MediaStream>\n */\nfunction getUserMedia(constraints) {\n  return new Promise(function getUserMediaPromise(resolve, reject) {\n    _getUserMedia(constraints || { audio: true, video: true }, resolve, reject);\n  });\n}\n\nfunction _getUserMedia(constraints, onSuccess, onFailure) {\n  if (typeof window !== 'undefined' && typeof navigator !== 'undefined') {\n    if (typeof navigator.mediaDevices === 'object' &&\n        typeof navigator.mediaDevices.getUserMedia === 'function') {\n      navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onFailure);\n      return;\n    } else if (typeof navigator.webkitGetUserMedia === 'function') {\n      navigator.webkitGetUserMedia(constraints, onSuccess, onFailure);\n      return;\n    } else if (typeof navigator.mozGetUserMedia === 'function') {\n      navigator.mozGetUserMedia(constraints, onSuccess, onFailure);\n      return;\n    }\n  }\n  onFailure(new Error('getUserMedia is not supported'));\n}\n\nmodule.exports = getUserMedia;\n"]},"metadata":{},"sourceType":"script"}