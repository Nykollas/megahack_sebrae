{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useVideoContext from '../useVideoContext/useVideoContext';\nexport default function useDominantSpeaker() {\n  const {\n    room\n  } = useVideoContext();\n  const [dominantSpeaker, setDominantSpeaker] = useState(room.dominantSpeaker);\n  useEffect(() => {\n    // Sometimes, the 'dominantSpeakerChanged' event can emit 'null', which means that\n    // there is no dominant speaker. If we change the main participant when 'null' is\n    // emitted, the effect can be jarring to the user. Here we ignore any 'null' values\n    // and continue to display the previous dominant speaker as the main participant.\n    const handleDominantSpeakerChanged = newDominantSpeaker => {\n      if (newDominantSpeaker !== null) {\n        setDominantSpeaker(newDominantSpeaker);\n      }\n    }; // Since 'null' values are ignored, we will need to listen for the 'participantDisconnected'\n    // event, so we can set the dominantSpeaker to 'null' when they disconnect.\n\n\n    const handleParticipantDisconnected = participant => {\n      setDominantSpeaker(prevDominantSpeaker => {\n        return prevDominantSpeaker === participant ? null : prevDominantSpeaker;\n      });\n    };\n\n    room.on('dominantSpeakerChanged', handleDominantSpeakerChanged);\n    room.on('participantDisconnected', handleParticipantDisconnected);\n    return () => {\n      room.off('dominantSpeakerChanged', handleDominantSpeakerChanged);\n      room.off('participantDisconnected', handleParticipantDisconnected);\n    };\n  }, [room]);\n  return dominantSpeaker;\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/hooks/useDominantSpeaker/useDominantSpeaker.tsx"],"names":["useEffect","useState","useVideoContext","useDominantSpeaker","room","dominantSpeaker","setDominantSpeaker","handleDominantSpeakerChanged","newDominantSpeaker","handleParticipantDisconnected","participant","prevDominantSpeaker","on","off"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAGA,eAAe,SAASC,kBAAT,GAA8B;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAWF,eAAe,EAAhC;AACA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCL,QAAQ,CAACG,IAAI,CAACC,eAAN,CAAtD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA,UAAMO,4BAA4B,GAAIC,kBAAD,IAA2C;AAC9E,UAAIA,kBAAkB,KAAK,IAA3B,EAAiC;AAC/BF,QAAAA,kBAAkB,CAACE,kBAAD,CAAlB;AACD;AACF,KAJD,CALc,CAWd;AACA;;;AACA,UAAMC,6BAA6B,GAAIC,WAAD,IAAoC;AACxEJ,MAAAA,kBAAkB,CAACK,mBAAmB,IAAI;AACxC,eAAOA,mBAAmB,KAAKD,WAAxB,GAAsC,IAAtC,GAA6CC,mBAApD;AACD,OAFiB,CAAlB;AAGD,KAJD;;AAMAP,IAAAA,IAAI,CAACQ,EAAL,CAAQ,wBAAR,EAAkCL,4BAAlC;AACAH,IAAAA,IAAI,CAACQ,EAAL,CAAQ,yBAAR,EAAmCH,6BAAnC;AACA,WAAO,MAAM;AACXL,MAAAA,IAAI,CAACS,GAAL,CAAS,wBAAT,EAAmCN,4BAAnC;AACAH,MAAAA,IAAI,CAACS,GAAL,CAAS,yBAAT,EAAoCJ,6BAApC;AACD,KAHD;AAID,GAzBQ,EAyBN,CAACL,IAAD,CAzBM,CAAT;AA2BA,SAAOC,eAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport useVideoContext from '../useVideoContext/useVideoContext';\nimport { RemoteParticipant } from 'twilio-video';\n\nexport default function useDominantSpeaker() {\n  const { room } = useVideoContext();\n  const [dominantSpeaker, setDominantSpeaker] = useState(room.dominantSpeaker);\n\n  useEffect(() => {\n    // Sometimes, the 'dominantSpeakerChanged' event can emit 'null', which means that\n    // there is no dominant speaker. If we change the main participant when 'null' is\n    // emitted, the effect can be jarring to the user. Here we ignore any 'null' values\n    // and continue to display the previous dominant speaker as the main participant.\n    const handleDominantSpeakerChanged = (newDominantSpeaker: RemoteParticipant) => {\n      if (newDominantSpeaker !== null) {\n        setDominantSpeaker(newDominantSpeaker);\n      }\n    };\n\n    // Since 'null' values are ignored, we will need to listen for the 'participantDisconnected'\n    // event, so we can set the dominantSpeaker to 'null' when they disconnect.\n    const handleParticipantDisconnected = (participant: RemoteParticipant) => {\n      setDominantSpeaker(prevDominantSpeaker => {\n        return prevDominantSpeaker === participant ? null : prevDominantSpeaker;\n      });\n    };\n\n    room.on('dominantSpeakerChanged', handleDominantSpeakerChanged);\n    room.on('participantDisconnected', handleParticipantDisconnected);\n    return () => {\n      room.off('dominantSpeakerChanged', handleDominantSpeakerChanged);\n      room.off('participantDisconnected', handleParticipantDisconnected);\n    };\n  }, [room]);\n\n  return dominantSpeaker;\n}\n"]},"metadata":{},"sourceType":"module"}