{"ast":null,"code":"'use strict';\n\nvar defer = require('./').defer;\n\nvar states = {\n  high: new Set(['low']),\n  low: new Set(['high'])\n};\n/**\n * Construct a {@link Latch}.\n * @class\n * @classdesc A {@link Latch} has two states (\"high\" and \"low\") and methods for\n * transitioning between them ({@link Latch#raise} and {@link Latch#lower}).\n * @param {string} [initialState=\"low\"] - either \"high\" or \"low\"\n */\n\nfunction Latch(initialState) {\n  if (!(this instanceof Latch)) {\n    return new Latch(initialState);\n  }\n\n  var state = initialState || 'low';\n  Object.defineProperties(this, {\n    _state: {\n      set: function (_state) {\n        if (state !== _state) {\n          state = _state;\n\n          var whenDeferreds = this._whenDeferreds.get(state);\n\n          whenDeferreds.forEach(function (deferred) {\n            deferred.resolve(this);\n          }, this);\n          whenDeferreds.clear();\n        }\n      },\n      get: function () {\n        return state;\n      }\n    },\n    _whenDeferreds: {\n      value: new Map([['high', new Set()], ['low', new Set()]])\n    },\n    state: {\n      enumerable: true,\n      get: function () {\n        return this._state;\n      }\n    }\n  });\n}\n/**\n * Transition to \"low\".\n * @returns {this}\n * @throws {Error}\n */\n\n\nLatch.prototype.lower = function lower() {\n  return this.transition('low');\n};\n/**\n * Transition to \"high\".\n * @returns {this}\n * @throws {Error}\n */\n\n\nLatch.prototype.raise = function raise() {\n  return this.transition('high');\n};\n/**\n * Transition to a new state.\n * @param {string} newState\n * @returns {this}\n * @throws {Error}\n */\n\n\nLatch.prototype.transition = function transition(newState) {\n  if (!states[this.state].has(newState)) {\n    throw createUnreachableStateError(this.state, newState);\n  }\n\n  this._state = newState;\n  return this;\n};\n/**\n * Return a Promise that resolves when the {@link Latch} transitions to\n * the specified state.\n * @param {string} state\n * @returns {Promise<this>}\n */\n\n\nLatch.prototype.when = function when(state) {\n  if (this.state === state) {\n    return Promise.resolve(this);\n  }\n\n  if (!states[this.state].has(state)) {\n    return Promise.reject(createUnreachableStateError(this.state, state));\n  }\n\n  var deferred = defer();\n\n  this._whenDeferreds.get(state).add(deferred);\n\n  return deferred.promise;\n};\n/**\n * Create an unreachable state Error.\n * @param {string} from - state to be transitioned from\n * @param {string} to - state to be transitioned to\n * @return {Error}\n */\n\n\nfunction createUnreachableStateError(from, to) {\n  return new Error('Cannot transition from \"' + from + '\" to \"' + to + '\"');\n}\n\nmodule.exports = Latch;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/@twilio/webrtc/lib/util/latch.js"],"names":["defer","require","states","high","Set","low","Latch","initialState","state","Object","defineProperties","_state","set","whenDeferreds","_whenDeferreds","get","forEach","deferred","resolve","clear","value","Map","enumerable","prototype","lower","transition","raise","newState","has","createUnreachableStateError","when","Promise","reject","add","promise","from","to","Error","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar defer = require('./').defer;\n\nvar states = {\n  high: new Set(['low']),\n  low: new Set(['high'])\n};\n\n/**\n * Construct a {@link Latch}.\n * @class\n * @classdesc A {@link Latch} has two states (\"high\" and \"low\") and methods for\n * transitioning between them ({@link Latch#raise} and {@link Latch#lower}).\n * @param {string} [initialState=\"low\"] - either \"high\" or \"low\"\n */\nfunction Latch(initialState) {\n  if (!(this instanceof Latch)) {\n    return new Latch(initialState);\n  }\n  var state = initialState || 'low';\n  Object.defineProperties(this, {\n    _state: {\n      set: function(_state) {\n        if (state !== _state) {\n          state = _state;\n          var whenDeferreds = this._whenDeferreds.get(state);\n          whenDeferreds.forEach(function(deferred) {\n            deferred.resolve(this);\n          }, this);\n          whenDeferreds.clear();\n        }\n      },\n      get: function() {\n        return state;\n      }\n    },\n    _whenDeferreds: {\n      value: new Map([\n        ['high', new Set()],\n        ['low', new Set()]\n      ])\n    },\n    state: {\n      enumerable: true,\n      get: function() {\n        return this._state;\n      }\n    }\n  });\n}\n\n/**\n * Transition to \"low\".\n * @returns {this}\n * @throws {Error}\n */\nLatch.prototype.lower = function lower() {\n  return this.transition('low');\n};\n\n/**\n * Transition to \"high\".\n * @returns {this}\n * @throws {Error}\n */\nLatch.prototype.raise = function raise() {\n  return this.transition('high');\n};\n\n/**\n * Transition to a new state.\n * @param {string} newState\n * @returns {this}\n * @throws {Error}\n */\nLatch.prototype.transition = function transition(newState) {\n  if (!states[this.state].has(newState)) {\n    throw createUnreachableStateError(this.state, newState);\n  }\n  this._state = newState;\n  return this;\n};\n\n/**\n * Return a Promise that resolves when the {@link Latch} transitions to\n * the specified state.\n * @param {string} state\n * @returns {Promise<this>}\n */\nLatch.prototype.when = function when(state) {\n  if (this.state === state) {\n    return Promise.resolve(this);\n  }\n  if (!states[this.state].has(state)) {\n    return Promise.reject(createUnreachableStateError(this.state, state));\n  }\n  var deferred = defer();\n  this._whenDeferreds.get(state).add(deferred);\n  return deferred.promise;\n};\n\n/**\n * Create an unreachable state Error.\n * @param {string} from - state to be transitioned from\n * @param {string} to - state to be transitioned to\n * @return {Error}\n */\nfunction createUnreachableStateError(from, to) {\n  return new Error('Cannot transition from \"' + from + '\" to \"' + to + '\"');\n}\n\nmodule.exports = Latch;\n"]},"metadata":{},"sourceType":"script"}