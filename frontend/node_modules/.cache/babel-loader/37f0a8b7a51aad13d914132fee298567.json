{"ast":null,"code":"import { useCallback, useState, useEffect } from 'react';\nimport fscreen from 'fscreen';\nexport default function useFullScreenToggle() {\n  const [isFullScreen, setIsFullScreen] = useState(!!fscreen.fullscreenElement);\n  useEffect(() => {\n    const onFullScreenChange = () => setIsFullScreen(!!fscreen.fullscreenElement);\n\n    fscreen.addEventListener('fullscreenchange', onFullScreenChange);\n    return () => {\n      fscreen.removeEventListener('fullscreenchange', onFullScreenChange);\n    };\n  }, []);\n  const toggleFullScreen = useCallback(() => {\n    isFullScreen ? fscreen.exitFullscreen() : fscreen.requestFullscreen(document.documentElement);\n  }, [isFullScreen]);\n  return [isFullScreen, toggleFullScreen];\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/hooks/useFullScreenToggle/useFullScreenToggle.tsx"],"names":["useCallback","useState","useEffect","fscreen","useFullScreenToggle","isFullScreen","setIsFullScreen","fullscreenElement","onFullScreenChange","addEventListener","removeEventListener","toggleFullScreen","exitFullscreen","requestFullscreen","document","documentElement"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,eAAe,SAASC,mBAAT,GAA+B;AAC5C,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAU,CAAC,CAACE,OAAO,CAACI,iBAApB,CAAhD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,kBAAkB,GAAG,MAAMF,eAAe,CAAC,CAAC,CAACH,OAAO,CAACI,iBAAX,CAAhD;;AACAJ,IAAAA,OAAO,CAACM,gBAAR,CAAyB,kBAAzB,EAA6CD,kBAA7C;AACA,WAAO,MAAM;AACXL,MAAAA,OAAO,CAACO,mBAAR,CAA4B,kBAA5B,EAAgDF,kBAAhD;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAQA,QAAMG,gBAAgB,GAAGX,WAAW,CAAC,MAAM;AACzCK,IAAAA,YAAY,GAAGF,OAAO,CAACS,cAAR,EAAH,GAA8BT,OAAO,CAACU,iBAAR,CAA0BC,QAAQ,CAACC,eAAnC,CAA1C;AACD,GAFmC,EAEjC,CAACV,YAAD,CAFiC,CAApC;AAIA,SAAO,CAACA,YAAD,EAAeM,gBAAf,CAAP;AACD","sourcesContent":["import { useCallback, useState, useEffect } from 'react';\nimport fscreen from 'fscreen';\n\nexport default function useFullScreenToggle() {\n  const [isFullScreen, setIsFullScreen] = useState<Boolean>(!!fscreen.fullscreenElement);\n\n  useEffect(() => {\n    const onFullScreenChange = () => setIsFullScreen(!!fscreen.fullscreenElement);\n    fscreen.addEventListener('fullscreenchange', onFullScreenChange);\n    return () => {\n      fscreen.removeEventListener('fullscreenchange', onFullScreenChange);\n    };\n  }, []);\n\n  const toggleFullScreen = useCallback(() => {\n    isFullScreen ? fscreen.exitFullscreen() : fscreen.requestFullscreen(document.documentElement);\n  }, [isFullScreen]);\n\n  return [isFullScreen, toggleFullScreen] as const;\n}\n"]},"metadata":{},"sourceType":"module"}