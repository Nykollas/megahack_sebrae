{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require.guessBrowser;\n\nvar PeerConnectionV2 = require('./peerconnection');\n\nvar MediaTrackSender = require('../../media/track/sender');\n\nvar QueueingEventEmitter = require('../../queueingeventemitter');\n\nvar util = require('../../util');\n\nvar _require2 = require('../../util/twilio-video-errors'),\n    MediaConnectionError = _require2.MediaConnectionError;\n\nvar isFirefox = guessBrowser() === 'firefox';\n/**\n * {@link PeerConnectionManager} manages multiple {@link PeerConnectionV2}s.\n * @extends QueueingEventEmitter\n * @emits PeerConnectionManager#candidates\n * @emits PeerConnectionManager#connectionStateChanged\n * @emits PeerConnectionManager#description\n * @emits PeerConnectionManager#iceConnectionStateChanged\n * @emits PeerConnectionManager#trackAdded\n */\n\nvar PeerConnectionManager = function (_QueueingEventEmitter) {\n  _inherits(PeerConnectionManager, _QueueingEventEmitter);\n  /**\n   * Construct {@link PeerConnectionManager}.\n   * @param {IceServerSource} iceServerSource\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} options\n   */\n\n\n  function PeerConnectionManager(iceServerSource, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionManager);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionManager.__proto__ || Object.getPrototypeOf(PeerConnectionManager)).call(this));\n\n    options = Object.assign({\n      audioContextFactory: isFirefox ? require('../../webaudio/audiocontext') : null,\n      PeerConnectionV2: PeerConnectionV2\n    }, options);\n    var audioContext = options.audioContextFactory ? options.audioContextFactory.getOrCreate(_this) : null; // NOTE(mroberts): If we're using an AudioContext, we don't need to specify\n    // `offerToReceiveAudio` in RTCOfferOptions.\n\n    var offerOptions = audioContext ? {\n      offerToReceiveVideo: true\n    } : {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true\n    };\n    Object.defineProperties(_this, {\n      _audioContextFactory: {\n        value: options.audioContextFactory\n      },\n      _closedPeerConnectionIds: {\n        value: new Set()\n      },\n      _configuration: {\n        writable: true,\n        value: null\n      },\n      _configurationDeferred: {\n        writable: true,\n        value: util.defer()\n      },\n      _connectionState: {\n        value: 'new',\n        writable: true\n      },\n      _dummyAudioTrackSender: {\n        value: audioContext ? new MediaTrackSender(createDummyAudioMediaStreamTrack(audioContext)) : null\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _iceConnectionState: {\n        writable: true,\n        value: 'new'\n      },\n      _iceServerSource: {\n        value: iceServerSource\n      },\n      _dataTrackSenders: {\n        writable: true,\n        value: new Set()\n      },\n      _lastConnectionState: {\n        value: 'new',\n        writable: true\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: 'new'\n      },\n      _mediaTrackSenders: {\n        writable: true,\n        value: new Set()\n      },\n      _offerOptions: {\n        value: offerOptions\n      },\n      _peerConnections: {\n        value: new Map()\n      },\n      _preferredCodecs: {\n        value: preferredCodecs\n      },\n      _sessionTimeout: {\n        value: null,\n        writable: true\n      },\n      _PeerConnectionV2: {\n        value: options.PeerConnectionV2\n      }\n    });\n    return _this;\n  }\n  /**\n   * A summarized RTCPeerConnectionState across all the\n   * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n   * @property {RTCPeerConnectionState}\n   */\n\n\n  _createClass(PeerConnectionManager, [{\n    key: '_closeAbsentPeerConnections',\n\n    /**\n     * Close the {@link PeerConnectionV2}s which are no longer relevant.\n     * @param {Array<object>} peerConnectionStates\n     * @returns {this}\n     */\n    value: function _closeAbsentPeerConnections(peerConnectionStates) {\n      var peerConnectionIds = new Set(peerConnectionStates.map(function (peerConnectionState) {\n        return peerConnectionState.id;\n      }));\n\n      this._peerConnections.forEach(function (peerConnection) {\n        if (!peerConnectionIds.has(peerConnection.id)) {\n          peerConnection._close();\n        }\n      });\n\n      return this;\n    }\n    /**\n     * Get the {@link PeerConnectionManager}'s configuration.\n     * @private\n     * @returns {Promise<object>}\n     */\n\n  }, {\n    key: '_getConfiguration',\n    value: function _getConfiguration() {\n      return this._configurationDeferred.promise;\n    }\n    /**\n     * Get or create a {@link PeerConnectionV2}.\n     * @private\n     * @param {string} id\n     * @param {object} [configuration]\n     * @returns {PeerConnectionV2}\n     */\n\n  }, {\n    key: '_getOrCreate',\n    value: function _getOrCreate(id, configuration) {\n      var _this2 = this;\n\n      var self = this;\n\n      var peerConnection = this._peerConnections.get(id);\n\n      if (!peerConnection) {\n        var _PeerConnectionV = this._PeerConnectionV2;\n        var options = Object.assign({\n          dummyAudioMediaStreamTrack: this._dummyAudioTrackSender ? this._dummyAudioTrackSender.track : null,\n          offerOptions: this._offerOptions\n        }, this._sessionTimeout ? {\n          sessionTimeout: this._sessionTimeout\n        } : {}, configuration);\n\n        try {\n          peerConnection = new _PeerConnectionV(id, this._encodingParameters, this._preferredCodecs, options);\n        } catch (e) {\n          throw new MediaConnectionError();\n        }\n\n        this._peerConnections.set(peerConnection.id, peerConnection);\n\n        peerConnection.on('candidates', this.queue.bind(this, 'candidates'));\n        peerConnection.on('description', this.queue.bind(this, 'description'));\n        peerConnection.on('trackAdded', this.queue.bind(this, 'trackAdded'));\n        peerConnection.on('stateChanged', function stateChanged(state) {\n          if (state === 'closed') {\n            peerConnection.removeListener('stateChanged', stateChanged);\n\n            self._peerConnections.delete(peerConnection.id);\n\n            self._closedPeerConnectionIds.add(peerConnection.id);\n\n            updateConnectionState(self);\n            updateIceConnectionState(self);\n          }\n        });\n        peerConnection.on('connectionStateChanged', function () {\n          return updateConnectionState(_this2);\n        });\n        peerConnection.on('iceConnectionStateChanged', function () {\n          return updateIceConnectionState(_this2);\n        });\n\n        this._dataTrackSenders.forEach(peerConnection.addDataTrackSender, peerConnection);\n\n        this._mediaTrackSenders.forEach(peerConnection.addMediaTrackSender, peerConnection);\n\n        updateIceConnectionState(this);\n      }\n\n      return peerConnection;\n    }\n    /**\n     * Close all the {@link PeerConnectionV2}s in this {@link PeerConnectionManager}.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._iceServerSource.isStarted) {\n        this._iceServerSource.stop();\n      }\n\n      this._peerConnections.forEach(function (peerConnection) {\n        peerConnection.close();\n      });\n\n      if (this._dummyAudioTrackSender) {\n        this._dummyAudioTrackSender.stop();\n      }\n\n      if (this._audioContextFactory) {\n        this._audioContextFactory.release(this);\n      }\n\n      updateIceConnectionState(this);\n      return this;\n    }\n    /**\n     * Create a new {@link PeerConnectionV2} on this {@link PeerConnectionManager}.\n     * Then, create a new offer with the newly-created {@link PeerConnectionV2}.\n     * @return {Promise<this>}\n     */\n\n  }, {\n    key: 'createAndOffer',\n    value: function createAndOffer() {\n      var _this3 = this;\n\n      return this._getConfiguration().then(function (configuration) {\n        var id = void 0;\n\n        do {\n          id = util.makeUUID();\n        } while (_this3._peerConnections.has(id));\n\n        return _this3._getOrCreate(id, configuration);\n      }).then(function (peerConnection) {\n        return peerConnection.offer();\n      }).then(function () {\n        return _this3;\n      });\n    }\n    /**\n     * Get the {@link DataTrackReceiver}s and {@link MediaTrackReceiver}s of all\n     * the {@link PeerConnectionV2}s.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return util.flatMap(this._peerConnections, function (peerConnection) {\n        return peerConnection.getTrackReceivers();\n      });\n    }\n    /**\n     * Get the states of all {@link PeerConnectionV2}s.\n     * @returns {Array<object>}\n     */\n\n  }, {\n    key: 'getStates',\n    value: function getStates() {\n      var peerConnectionStates = [];\n\n      this._peerConnections.forEach(function (peerConnection) {\n        var peerConnectionState = peerConnection.getState();\n\n        if (peerConnectionState) {\n          peerConnectionStates.push(peerConnectionState);\n        }\n      });\n\n      return peerConnectionStates;\n    }\n    /**\n     * Set the {@link PeerConnectionManager}'s configuration.\n     * @param {object} configuration\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (this._configuration) {\n        this._configurationDeferred = util.defer();\n\n        this._peerConnections.forEach(function (peerConnection) {\n          peerConnection.setConfiguration(configuration);\n        });\n      }\n\n      this._configuration = configuration;\n\n      this._configurationDeferred.resolve(configuration);\n\n      return this;\n    }\n    /**\n     * Set the ICE reconnect timeout period for all {@link PeerConnectionV2}s.\n     * @param {number} period - Period in milliseconds.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setIceReconnectTimeout',\n    value: function setIceReconnectTimeout(period) {\n      if (this._sessionTimeout === null) {\n        this._peerConnections.forEach(function (peerConnection) {\n          peerConnection.setIceReconnectTimeout(period);\n        });\n\n        this._sessionTimeout = period;\n      }\n\n      return this;\n    }\n    /**\n     * Set the {@link DataTrackSender}s and {@link MediaTrackSender}s on the\n     * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n     * @param {Array<DataTrackSender|MediaTrackSender>} trackSenders\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setTrackSenders',\n    value: function setTrackSenders(trackSenders) {\n      var dataTrackSenders = new Set(trackSenders.filter(function (trackSender) {\n        return trackSender.kind === 'data';\n      }));\n      var mediaTrackSenders = new Set(trackSenders.filter(function (trackSender) {\n        return trackSender && (trackSender.kind === 'audio' || trackSender.kind === 'video');\n      }));\n      var changes = getTrackSenderChanges(this, dataTrackSenders, mediaTrackSenders);\n      this._dataTrackSenders = dataTrackSenders;\n      this._mediaTrackSenders = mediaTrackSenders;\n      applyTrackSenderChanges(this, changes);\n      return this;\n    }\n    /**\n     * Update the {@link PeerConnectionManager}.\n     * @param {Array<object>} peerConnectionStates\n     * @param {boolean} [synced=false]\n     * @returns {Promise<this>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionStates) {\n      var _this4 = this;\n\n      var synced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (synced) {\n        this._closeAbsentPeerConnections(peerConnectionStates);\n      }\n\n      return this._getConfiguration().then(function (configuration) {\n        return Promise.all(peerConnectionStates.map(function (peerConnectionState) {\n          if (_this4._closedPeerConnectionIds.has(peerConnectionState.id)) {\n            return null;\n          }\n\n          var peerConnection = _this4._getOrCreate(peerConnectionState.id, configuration);\n\n          return peerConnection.update(peerConnectionState);\n        }));\n      }).then(function () {\n        return _this4;\n      });\n    }\n    /**\n     * Get the {@link PeerConnectionManager}'s media statistics.\n     * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var peerConnections = Array.from(this._peerConnections.values());\n      return Promise.all(peerConnections.map(function (peerConnection) {\n        return peerConnection.getStats().then(function (response) {\n          return [peerConnection.id, response];\n        });\n      })).then(function (responses) {\n        return new Map(responses);\n      });\n    }\n  }, {\n    key: 'connectionState',\n    get: function get() {\n      return this._connectionState;\n    }\n    /**\n     * A summarized RTCIceConnectionState across all the\n     * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n     * @property {RTCIceConnectionState}\n     */\n\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._iceConnectionState;\n    }\n  }]);\n\n  return PeerConnectionManager;\n}(QueueingEventEmitter);\n/**\n * Create a dummy audio MediaStreamTrack with the given AudioContext.\n * @private\n * @param {AudioContext} audioContext\n * @return {MediaStreamTrack}\n */\n\n\nfunction createDummyAudioMediaStreamTrack(audioContext) {\n  var mediaStreamDestination = audioContext.createMediaStreamDestination();\n  return mediaStreamDestination.stream.getAudioTracks()[0];\n}\n/**\n * @event {PeerConnectionManager#candidates}\n * @param {object} candidates\n */\n\n/**\n * @event {PeerConnectionManager#connectionStateChanged}\n */\n\n/**\n * @event {PeerConnectionManager#description}\n * @param {object} description\n */\n\n/**\n * @event {PeerConnectionManager#iceConnectionStateChanged}\n */\n\n/**\n * @event {PeerConnectionManager#trackAdded}\n * @param {MediaStreamTrack|DataTrackReceiver} mediaStreamTrackOrDataTrackReceiver\n */\n\n/**\n * Apply {@link TrackSenderChanges}.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {TrackSenderChanges} changes\n * @returns {void}\n */\n\n\nfunction applyTrackSenderChanges(peerConnectionManager, changes) {\n  if (changes.data.add.size || changes.data.remove.size || changes.media.add.size || changes.media.remove.size) {\n    peerConnectionManager._peerConnections.forEach(function (peerConnection) {\n      changes.data.remove.forEach(peerConnection.removeDataTrackSender, peerConnection);\n      changes.media.remove.forEach(peerConnection.removeMediaTrackSender, peerConnection);\n      changes.data.add.forEach(peerConnection.addDataTrackSender, peerConnection);\n      changes.media.add.forEach(peerConnection.addMediaTrackSender, peerConnection);\n\n      if (changes.media.add.size || changes.media.remove.size || changes.data.add.size && !peerConnection.isApplicationSectionNegotiated) {\n        peerConnection.offer();\n      }\n    });\n  }\n}\n/**\n * @interface DataTrackSenderChanges\n * @property {Set<DataTrackSender>} add\n * @property {Set<DataTrackSender>} remove\n */\n\n/**\n * Get the {@Link DataTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @returns {DataTrackSenderChanges} changes\n */\n\n\nfunction getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders) {\n  var dataTrackSendersToAdd = util.difference(dataTrackSenders, peerConnectionManager._dataTrackSenders);\n  var dataTrackSendersToRemove = util.difference(peerConnectionManager._dataTrackSenders, dataTrackSenders);\n  return {\n    add: dataTrackSendersToAdd,\n    remove: dataTrackSendersToRemove\n  };\n}\n/**\n * @interface TrackSenderChanges\n * @property {DataTrackSenderChanges} data\n * @property {MediaTrackSenderChanges} media\n */\n\n/**\n * Get {@link DataTrackSender} and {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {TrackSenderChanges} changes\n */\n\n\nfunction getTrackSenderChanges(peerConnectionManager, dataTrackSenders, mediaTrackSenders) {\n  return {\n    data: getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders),\n    media: getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders)\n  };\n}\n/**\n * @interface MediaTrackSenderChanges\n * @property {Set<MediaTrackSender>} add\n * @property {Set<MediaTrackSender>} remove\n */\n\n/**\n * Get the {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {MediaTrackSenderChanges} changes\n */\n\n\nfunction getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders) {\n  var mediaTrackSendersToAdd = util.difference(mediaTrackSenders, peerConnectionManager._mediaTrackSenders);\n  var mediaTrackSendersToRemove = util.difference(peerConnectionManager._mediaTrackSenders, mediaTrackSenders);\n  return {\n    add: mediaTrackSendersToAdd,\n    remove: mediaTrackSendersToRemove\n  };\n}\n/**\n * This object maps RTCIceConnectionState and RTCPeerConnectionState values to a \"rank\".\n */\n\n\nvar toRank = {\n  new: 0,\n  checking: 1,\n  connecting: 2,\n  connected: 3,\n  completed: 4,\n  disconnected: -1,\n  failed: -2,\n  closed: -3\n};\n/**\n * This object maps \"rank\" back to RTCIceConnectionState or RTCPeerConnectionState values.\n */\n\nvar fromRank = void 0;\n/**\n * `Object.keys` is not supported in older browsers, so we can't just\n * synchronously call it in this module; we need to defer invoking it until we\n * know we're in a modern environment (i.e., anything that supports WebRTC).\n * @returns {object} fromRank\n */\n\nfunction createFromRank() {\n  return Object.keys(toRank).reduce(function (fromRank, state) {\n    return Object.assign(fromRank, _defineProperty({}, toRank[state], state));\n  }, {});\n}\n/**\n * Summarize RTCIceConnectionStates or RTCPeerConnectionStates.\n * @param {Array<RTCIceConnectionState>|Array<RTCPeerConnectionState>} states\n * @returns {RTCIceConnectionState|RTCPeerConnectionState} summary\n */\n\n\nfunction summarizeIceOrPeerConnectionStates(states) {\n  if (!states.length) {\n    return 'new';\n  }\n\n  fromRank = fromRank || createFromRank();\n  return states.reduce(function (state1, state2) {\n    return fromRank[Math.max(toRank[state1], toRank[state2])];\n  });\n}\n/**\n * Update the {@link PeerConnectionManager}'s `iceConnectionState`, and emit an\n * \"iceConnectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\n\n\nfunction updateIceConnectionState(pcm) {\n  pcm._lastIceConnectionState = pcm.iceConnectionState;\n  pcm._iceConnectionState = summarizeIceOrPeerConnectionStates([].concat(_toConsumableArray(pcm._peerConnections.values())).map(function (pcv2) {\n    return pcv2.iceConnectionState;\n  }));\n\n  if (pcm.iceConnectionState !== pcm._lastIceConnectionState) {\n    pcm.emit('iceConnectionStateChanged');\n  }\n}\n/**\n * Update the {@link PeerConnectionManager}'s `connectionState`, and emit a\n * \"connectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\n\n\nfunction updateConnectionState(pcm) {\n  pcm._lastConnectionState = pcm.connectionState;\n  pcm._connectionState = summarizeIceOrPeerConnectionStates([].concat(_toConsumableArray(pcm._peerConnections.values())).map(function (pcv2) {\n    return pcv2.connectionState;\n  }));\n\n  if (pcm.connectionState !== pcm._lastConnectionState) {\n    pcm.emit('connectionStateChanged');\n  }\n}\n\nmodule.exports = PeerConnectionManager;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/signaling/v2/peerconnectionmanager.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_toConsumableArray","arr","Array","isArray","arr2","from","_defineProperty","obj","value","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_require","require","guessBrowser","PeerConnectionV2","MediaTrackSender","QueueingEventEmitter","util","_require2","MediaConnectionError","isFirefox","PeerConnectionManager","_QueueingEventEmitter","iceServerSource","encodingParameters","preferredCodecs","options","_this","getPrototypeOf","assign","audioContextFactory","audioContext","getOrCreate","offerOptions","offerToReceiveVideo","offerToReceiveAudio","_audioContextFactory","_closedPeerConnectionIds","Set","_configuration","_configurationDeferred","defer","_connectionState","_dummyAudioTrackSender","createDummyAudioMediaStreamTrack","_encodingParameters","_iceConnectionState","_iceServerSource","_dataTrackSenders","_lastConnectionState","_lastIceConnectionState","_mediaTrackSenders","_offerOptions","_peerConnections","Map","_preferredCodecs","_sessionTimeout","_PeerConnectionV2","_closeAbsentPeerConnections","peerConnectionStates","peerConnectionIds","map","peerConnectionState","id","forEach","peerConnection","has","_close","_getConfiguration","promise","_getOrCreate","configuration","_this2","get","_PeerConnectionV","dummyAudioMediaStreamTrack","track","sessionTimeout","e","set","on","queue","bind","stateChanged","state","removeListener","delete","add","updateConnectionState","updateIceConnectionState","addDataTrackSender","addMediaTrackSender","close","isStarted","stop","release","createAndOffer","_this3","then","makeUUID","offer","getTrackReceivers","flatMap","getStates","getState","push","setConfiguration","resolve","setIceReconnectTimeout","period","setTrackSenders","trackSenders","dataTrackSenders","filter","trackSender","kind","mediaTrackSenders","changes","getTrackSenderChanges","applyTrackSenderChanges","update","_this4","synced","arguments","undefined","Promise","all","getStats","peerConnections","values","response","responses","mediaStreamDestination","createMediaStreamDestination","stream","getAudioTracks","peerConnectionManager","data","size","remove","media","removeDataTrackSender","removeMediaTrackSender","isApplicationSectionNegotiated","getDataTrackSenderChanges","dataTrackSendersToAdd","difference","dataTrackSendersToRemove","getMediaTrackSenderChanges","mediaTrackSendersToAdd","mediaTrackSendersToRemove","toRank","new","checking","connecting","connected","completed","disconnected","failed","closed","fromRank","createFromRank","keys","reduce","summarizeIceOrPeerConnectionStates","states","state1","state2","Math","max","pcm","iceConnectionState","concat","pcv2","emit","connectionState","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require.guessBrowser;\n\nvar PeerConnectionV2 = require('./peerconnection');\nvar MediaTrackSender = require('../../media/track/sender');\nvar QueueingEventEmitter = require('../../queueingeventemitter');\nvar util = require('../../util');\n\nvar _require2 = require('../../util/twilio-video-errors'),\n    MediaConnectionError = _require2.MediaConnectionError;\n\nvar isFirefox = guessBrowser() === 'firefox';\n\n/**\n * {@link PeerConnectionManager} manages multiple {@link PeerConnectionV2}s.\n * @extends QueueingEventEmitter\n * @emits PeerConnectionManager#candidates\n * @emits PeerConnectionManager#connectionStateChanged\n * @emits PeerConnectionManager#description\n * @emits PeerConnectionManager#iceConnectionStateChanged\n * @emits PeerConnectionManager#trackAdded\n */\n\nvar PeerConnectionManager = function (_QueueingEventEmitter) {\n  _inherits(PeerConnectionManager, _QueueingEventEmitter);\n\n  /**\n   * Construct {@link PeerConnectionManager}.\n   * @param {IceServerSource} iceServerSource\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} options\n   */\n  function PeerConnectionManager(iceServerSource, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionManager);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionManager.__proto__ || Object.getPrototypeOf(PeerConnectionManager)).call(this));\n\n    options = Object.assign({\n      audioContextFactory: isFirefox ? require('../../webaudio/audiocontext') : null,\n      PeerConnectionV2: PeerConnectionV2\n    }, options);\n\n    var audioContext = options.audioContextFactory ? options.audioContextFactory.getOrCreate(_this) : null;\n\n    // NOTE(mroberts): If we're using an AudioContext, we don't need to specify\n    // `offerToReceiveAudio` in RTCOfferOptions.\n    var offerOptions = audioContext ? { offerToReceiveVideo: true } : { offerToReceiveAudio: true, offerToReceiveVideo: true };\n\n    Object.defineProperties(_this, {\n      _audioContextFactory: {\n        value: options.audioContextFactory\n      },\n      _closedPeerConnectionIds: {\n        value: new Set()\n      },\n      _configuration: {\n        writable: true,\n        value: null\n      },\n      _configurationDeferred: {\n        writable: true,\n        value: util.defer()\n      },\n      _connectionState: {\n        value: 'new',\n        writable: true\n      },\n      _dummyAudioTrackSender: {\n        value: audioContext ? new MediaTrackSender(createDummyAudioMediaStreamTrack(audioContext)) : null\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _iceConnectionState: {\n        writable: true,\n        value: 'new'\n      },\n      _iceServerSource: {\n        value: iceServerSource\n      },\n      _dataTrackSenders: {\n        writable: true,\n        value: new Set()\n      },\n      _lastConnectionState: {\n        value: 'new',\n        writable: true\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: 'new'\n      },\n      _mediaTrackSenders: {\n        writable: true,\n        value: new Set()\n      },\n      _offerOptions: {\n        value: offerOptions\n      },\n      _peerConnections: {\n        value: new Map()\n      },\n      _preferredCodecs: {\n        value: preferredCodecs\n      },\n      _sessionTimeout: {\n        value: null,\n        writable: true\n      },\n      _PeerConnectionV2: {\n        value: options.PeerConnectionV2\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * A summarized RTCPeerConnectionState across all the\n   * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n   * @property {RTCPeerConnectionState}\n   */\n\n\n  _createClass(PeerConnectionManager, [{\n    key: '_closeAbsentPeerConnections',\n\n\n    /**\n     * Close the {@link PeerConnectionV2}s which are no longer relevant.\n     * @param {Array<object>} peerConnectionStates\n     * @returns {this}\n     */\n    value: function _closeAbsentPeerConnections(peerConnectionStates) {\n      var peerConnectionIds = new Set(peerConnectionStates.map(function (peerConnectionState) {\n        return peerConnectionState.id;\n      }));\n      this._peerConnections.forEach(function (peerConnection) {\n        if (!peerConnectionIds.has(peerConnection.id)) {\n          peerConnection._close();\n        }\n      });\n      return this;\n    }\n\n    /**\n     * Get the {@link PeerConnectionManager}'s configuration.\n     * @private\n     * @returns {Promise<object>}\n     */\n\n  }, {\n    key: '_getConfiguration',\n    value: function _getConfiguration() {\n      return this._configurationDeferred.promise;\n    }\n\n    /**\n     * Get or create a {@link PeerConnectionV2}.\n     * @private\n     * @param {string} id\n     * @param {object} [configuration]\n     * @returns {PeerConnectionV2}\n     */\n\n  }, {\n    key: '_getOrCreate',\n    value: function _getOrCreate(id, configuration) {\n      var _this2 = this;\n\n      var self = this;\n      var peerConnection = this._peerConnections.get(id);\n      if (!peerConnection) {\n        var _PeerConnectionV = this._PeerConnectionV2;\n\n        var options = Object.assign({\n          dummyAudioMediaStreamTrack: this._dummyAudioTrackSender ? this._dummyAudioTrackSender.track : null,\n          offerOptions: this._offerOptions\n        }, this._sessionTimeout ? {\n          sessionTimeout: this._sessionTimeout\n        } : {}, configuration);\n\n        try {\n          peerConnection = new _PeerConnectionV(id, this._encodingParameters, this._preferredCodecs, options);\n        } catch (e) {\n          throw new MediaConnectionError();\n        }\n\n        this._peerConnections.set(peerConnection.id, peerConnection);\n        peerConnection.on('candidates', this.queue.bind(this, 'candidates'));\n        peerConnection.on('description', this.queue.bind(this, 'description'));\n        peerConnection.on('trackAdded', this.queue.bind(this, 'trackAdded'));\n        peerConnection.on('stateChanged', function stateChanged(state) {\n          if (state === 'closed') {\n            peerConnection.removeListener('stateChanged', stateChanged);\n            self._peerConnections.delete(peerConnection.id);\n            self._closedPeerConnectionIds.add(peerConnection.id);\n            updateConnectionState(self);\n            updateIceConnectionState(self);\n          }\n        });\n        peerConnection.on('connectionStateChanged', function () {\n          return updateConnectionState(_this2);\n        });\n        peerConnection.on('iceConnectionStateChanged', function () {\n          return updateIceConnectionState(_this2);\n        });\n\n        this._dataTrackSenders.forEach(peerConnection.addDataTrackSender, peerConnection);\n        this._mediaTrackSenders.forEach(peerConnection.addMediaTrackSender, peerConnection);\n\n        updateIceConnectionState(this);\n      }\n      return peerConnection;\n    }\n\n    /**\n     * Close all the {@link PeerConnectionV2}s in this {@link PeerConnectionManager}.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._iceServerSource.isStarted) {\n        this._iceServerSource.stop();\n      }\n      this._peerConnections.forEach(function (peerConnection) {\n        peerConnection.close();\n      });\n      if (this._dummyAudioTrackSender) {\n        this._dummyAudioTrackSender.stop();\n      }\n      if (this._audioContextFactory) {\n        this._audioContextFactory.release(this);\n      }\n      updateIceConnectionState(this);\n      return this;\n    }\n\n    /**\n     * Create a new {@link PeerConnectionV2} on this {@link PeerConnectionManager}.\n     * Then, create a new offer with the newly-created {@link PeerConnectionV2}.\n     * @return {Promise<this>}\n     */\n\n  }, {\n    key: 'createAndOffer',\n    value: function createAndOffer() {\n      var _this3 = this;\n\n      return this._getConfiguration().then(function (configuration) {\n        var id = void 0;\n        do {\n          id = util.makeUUID();\n        } while (_this3._peerConnections.has(id));\n\n        return _this3._getOrCreate(id, configuration);\n      }).then(function (peerConnection) {\n        return peerConnection.offer();\n      }).then(function () {\n        return _this3;\n      });\n    }\n\n    /**\n     * Get the {@link DataTrackReceiver}s and {@link MediaTrackReceiver}s of all\n     * the {@link PeerConnectionV2}s.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return util.flatMap(this._peerConnections, function (peerConnection) {\n        return peerConnection.getTrackReceivers();\n      });\n    }\n\n    /**\n     * Get the states of all {@link PeerConnectionV2}s.\n     * @returns {Array<object>}\n     */\n\n  }, {\n    key: 'getStates',\n    value: function getStates() {\n      var peerConnectionStates = [];\n      this._peerConnections.forEach(function (peerConnection) {\n        var peerConnectionState = peerConnection.getState();\n        if (peerConnectionState) {\n          peerConnectionStates.push(peerConnectionState);\n        }\n      });\n      return peerConnectionStates;\n    }\n\n    /**\n     * Set the {@link PeerConnectionManager}'s configuration.\n     * @param {object} configuration\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (this._configuration) {\n        this._configurationDeferred = util.defer();\n        this._peerConnections.forEach(function (peerConnection) {\n          peerConnection.setConfiguration(configuration);\n        });\n      }\n      this._configuration = configuration;\n      this._configurationDeferred.resolve(configuration);\n      return this;\n    }\n\n    /**\n     * Set the ICE reconnect timeout period for all {@link PeerConnectionV2}s.\n     * @param {number} period - Period in milliseconds.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setIceReconnectTimeout',\n    value: function setIceReconnectTimeout(period) {\n      if (this._sessionTimeout === null) {\n        this._peerConnections.forEach(function (peerConnection) {\n          peerConnection.setIceReconnectTimeout(period);\n        });\n        this._sessionTimeout = period;\n      }\n      return this;\n    }\n\n    /**\n     * Set the {@link DataTrackSender}s and {@link MediaTrackSender}s on the\n     * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n     * @param {Array<DataTrackSender|MediaTrackSender>} trackSenders\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setTrackSenders',\n    value: function setTrackSenders(trackSenders) {\n      var dataTrackSenders = new Set(trackSenders.filter(function (trackSender) {\n        return trackSender.kind === 'data';\n      }));\n\n      var mediaTrackSenders = new Set(trackSenders.filter(function (trackSender) {\n        return trackSender && (trackSender.kind === 'audio' || trackSender.kind === 'video');\n      }));\n\n      var changes = getTrackSenderChanges(this, dataTrackSenders, mediaTrackSenders);\n      this._dataTrackSenders = dataTrackSenders;\n      this._mediaTrackSenders = mediaTrackSenders;\n      applyTrackSenderChanges(this, changes);\n\n      return this;\n    }\n\n    /**\n     * Update the {@link PeerConnectionManager}.\n     * @param {Array<object>} peerConnectionStates\n     * @param {boolean} [synced=false]\n     * @returns {Promise<this>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionStates) {\n      var _this4 = this;\n\n      var synced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (synced) {\n        this._closeAbsentPeerConnections(peerConnectionStates);\n      }\n      return this._getConfiguration().then(function (configuration) {\n        return Promise.all(peerConnectionStates.map(function (peerConnectionState) {\n          if (_this4._closedPeerConnectionIds.has(peerConnectionState.id)) {\n            return null;\n          }\n          var peerConnection = _this4._getOrCreate(peerConnectionState.id, configuration);\n          return peerConnection.update(peerConnectionState);\n        }));\n      }).then(function () {\n        return _this4;\n      });\n    }\n\n    /**\n     * Get the {@link PeerConnectionManager}'s media statistics.\n     * @returns {Promise.<Map<PeerConnectionV2#id, StandardizedStatsResponse>>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var peerConnections = Array.from(this._peerConnections.values());\n      return Promise.all(peerConnections.map(function (peerConnection) {\n        return peerConnection.getStats().then(function (response) {\n          return [peerConnection.id, response];\n        });\n      })).then(function (responses) {\n        return new Map(responses);\n      });\n    }\n  }, {\n    key: 'connectionState',\n    get: function get() {\n      return this._connectionState;\n    }\n\n    /**\n     * A summarized RTCIceConnectionState across all the\n     * {@link PeerConnectionManager}'s underlying {@link PeerConnectionV2}s.\n     * @property {RTCIceConnectionState}\n     */\n\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._iceConnectionState;\n    }\n  }]);\n\n  return PeerConnectionManager;\n}(QueueingEventEmitter);\n\n/**\n * Create a dummy audio MediaStreamTrack with the given AudioContext.\n * @private\n * @param {AudioContext} audioContext\n * @return {MediaStreamTrack}\n */\n\n\nfunction createDummyAudioMediaStreamTrack(audioContext) {\n  var mediaStreamDestination = audioContext.createMediaStreamDestination();\n  return mediaStreamDestination.stream.getAudioTracks()[0];\n}\n\n/**\n * @event {PeerConnectionManager#candidates}\n * @param {object} candidates\n */\n\n/**\n * @event {PeerConnectionManager#connectionStateChanged}\n */\n\n/**\n * @event {PeerConnectionManager#description}\n * @param {object} description\n */\n\n/**\n * @event {PeerConnectionManager#iceConnectionStateChanged}\n */\n\n/**\n * @event {PeerConnectionManager#trackAdded}\n * @param {MediaStreamTrack|DataTrackReceiver} mediaStreamTrackOrDataTrackReceiver\n */\n\n/**\n * Apply {@link TrackSenderChanges}.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {TrackSenderChanges} changes\n * @returns {void}\n */\nfunction applyTrackSenderChanges(peerConnectionManager, changes) {\n  if (changes.data.add.size || changes.data.remove.size || changes.media.add.size || changes.media.remove.size) {\n    peerConnectionManager._peerConnections.forEach(function (peerConnection) {\n      changes.data.remove.forEach(peerConnection.removeDataTrackSender, peerConnection);\n      changes.media.remove.forEach(peerConnection.removeMediaTrackSender, peerConnection);\n      changes.data.add.forEach(peerConnection.addDataTrackSender, peerConnection);\n      changes.media.add.forEach(peerConnection.addMediaTrackSender, peerConnection);\n      if (changes.media.add.size || changes.media.remove.size || changes.data.add.size && !peerConnection.isApplicationSectionNegotiated) {\n        peerConnection.offer();\n      }\n    });\n  }\n}\n\n/**\n * @interface DataTrackSenderChanges\n * @property {Set<DataTrackSender>} add\n * @property {Set<DataTrackSender>} remove\n */\n\n/**\n * Get the {@Link DataTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @returns {DataTrackSenderChanges} changes\n */\nfunction getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders) {\n  var dataTrackSendersToAdd = util.difference(dataTrackSenders, peerConnectionManager._dataTrackSenders);\n  var dataTrackSendersToRemove = util.difference(peerConnectionManager._dataTrackSenders, dataTrackSenders);\n  return {\n    add: dataTrackSendersToAdd,\n    remove: dataTrackSendersToRemove\n  };\n}\n\n/**\n * @interface TrackSenderChanges\n * @property {DataTrackSenderChanges} data\n * @property {MediaTrackSenderChanges} media\n */\n\n/**\n * Get {@link DataTrackSender} and {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<DataTrackSender>} dataTrackSenders\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {TrackSenderChanges} changes\n */\nfunction getTrackSenderChanges(peerConnectionManager, dataTrackSenders, mediaTrackSenders) {\n  return {\n    data: getDataTrackSenderChanges(peerConnectionManager, dataTrackSenders),\n    media: getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders)\n  };\n}\n\n/**\n * @interface MediaTrackSenderChanges\n * @property {Set<MediaTrackSender>} add\n * @property {Set<MediaTrackSender>} remove\n */\n\n/**\n * Get the {@link MediaTrackSender} changes.\n * @param {PeerConnectionManager} peerConnectionManager\n * @param {Array<MediaTrackSender>} mediaTrackSenders\n * @returns {MediaTrackSenderChanges} changes\n */\nfunction getMediaTrackSenderChanges(peerConnectionManager, mediaTrackSenders) {\n  var mediaTrackSendersToAdd = util.difference(mediaTrackSenders, peerConnectionManager._mediaTrackSenders);\n  var mediaTrackSendersToRemove = util.difference(peerConnectionManager._mediaTrackSenders, mediaTrackSenders);\n  return {\n    add: mediaTrackSendersToAdd,\n    remove: mediaTrackSendersToRemove\n  };\n}\n\n/**\n * This object maps RTCIceConnectionState and RTCPeerConnectionState values to a \"rank\".\n */\nvar toRank = {\n  new: 0,\n  checking: 1,\n  connecting: 2,\n  connected: 3,\n  completed: 4,\n  disconnected: -1,\n  failed: -2,\n  closed: -3\n};\n\n/**\n * This object maps \"rank\" back to RTCIceConnectionState or RTCPeerConnectionState values.\n */\nvar fromRank = void 0;\n\n/**\n * `Object.keys` is not supported in older browsers, so we can't just\n * synchronously call it in this module; we need to defer invoking it until we\n * know we're in a modern environment (i.e., anything that supports WebRTC).\n * @returns {object} fromRank\n */\nfunction createFromRank() {\n  return Object.keys(toRank).reduce(function (fromRank, state) {\n    return Object.assign(fromRank, _defineProperty({}, toRank[state], state));\n  }, {});\n}\n\n/**\n * Summarize RTCIceConnectionStates or RTCPeerConnectionStates.\n * @param {Array<RTCIceConnectionState>|Array<RTCPeerConnectionState>} states\n * @returns {RTCIceConnectionState|RTCPeerConnectionState} summary\n */\nfunction summarizeIceOrPeerConnectionStates(states) {\n  if (!states.length) {\n    return 'new';\n  }\n  fromRank = fromRank || createFromRank();\n  return states.reduce(function (state1, state2) {\n    return fromRank[Math.max(toRank[state1], toRank[state2])];\n  });\n}\n\n/**\n * Update the {@link PeerConnectionManager}'s `iceConnectionState`, and emit an\n * \"iceConnectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\nfunction updateIceConnectionState(pcm) {\n  pcm._lastIceConnectionState = pcm.iceConnectionState;\n  pcm._iceConnectionState = summarizeIceOrPeerConnectionStates([].concat(_toConsumableArray(pcm._peerConnections.values())).map(function (pcv2) {\n    return pcv2.iceConnectionState;\n  }));\n  if (pcm.iceConnectionState !== pcm._lastIceConnectionState) {\n    pcm.emit('iceConnectionStateChanged');\n  }\n}\n\n/**\n * Update the {@link PeerConnectionManager}'s `connectionState`, and emit a\n * \"connectionStateChanged\" event, if necessary.\n * @param {PeerConnectionManager} pcm\n * @returns {void}\n */\nfunction updateConnectionState(pcm) {\n  pcm._lastConnectionState = pcm.connectionState;\n  pcm._connectionState = summarizeIceOrPeerConnectionStates([].concat(_toConsumableArray(pcm._peerConnections.values())).map(function (pcv2) {\n    return pcv2.connectionState;\n  }));\n  if (pcm.connectionState !== pcm._lastConnectionState) {\n    pcm.emit('connectionStateChanged');\n  }\n}\n\nmodule.exports = PeerConnectionManager;"]},"metadata":{},"sourceType":"script"}