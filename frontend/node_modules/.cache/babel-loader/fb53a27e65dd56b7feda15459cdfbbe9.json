{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst SUBSCRIPTIONS_PATH = '/v4/Subscriptions';\nconst MAPS_PATH = '/v3/Maps';\nconst LISTS_PATH = '/v3/Lists';\nconst DOCUMENTS_PATH = '/v3/Documents';\nconst STREAMS_PATH = '/v3/Streams';\nconst INSIGHTS_PATH = '/v3/Insights';\n\nfunction getWithDefault(container, key, defaultValue) {\n  if (container && typeof container[key] !== 'undefined') {\n    return container[key];\n  }\n\n  return defaultValue;\n}\n/**\n * Settings container for Sync library\n */\n\n\nclass Configuration {\n  /**\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    const region = options.region || 'us1';\n    const defaultCdsUrl = `https://cds.${region}.twilio.com`;\n    const baseUri = options.cdsUri || defaultCdsUrl;\n    this.settings = {\n      subscriptionsUri: baseUri + SUBSCRIPTIONS_PATH,\n      documentsUri: baseUri + DOCUMENTS_PATH,\n      listsUri: baseUri + LISTS_PATH,\n      mapsUri: baseUri + MAPS_PATH,\n      streamsUri: baseUri + STREAMS_PATH,\n      insightsUri: baseUri + INSIGHTS_PATH,\n      sessionStorageEnabled: getWithDefault(options.Sync, 'enableSessionStorage', true)\n    };\n  }\n\n  get subscriptionsUri() {\n    return this.settings.subscriptionsUri;\n  }\n\n  get documentsUri() {\n    return this.settings.documentsUri;\n  }\n\n  get listsUri() {\n    return this.settings.listsUri;\n  }\n\n  get mapsUri() {\n    return this.settings.mapsUri;\n  }\n\n  get streamsUri() {\n    return this.settings.streamsUri;\n  }\n\n  get insightsUri() {\n    return this.settings.insightsUri;\n  }\n\n  get backoffConfig() {\n    return this.settings.backoffConfig || {};\n  }\n\n  get sessionStorageEnabled() {\n    return this.settings.sessionStorageEnabled;\n  }\n\n}\n\nexports.Configuration = Configuration;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-sync/lib/configuration.js"],"names":["Object","defineProperty","exports","value","SUBSCRIPTIONS_PATH","MAPS_PATH","LISTS_PATH","DOCUMENTS_PATH","STREAMS_PATH","INSIGHTS_PATH","getWithDefault","container","key","defaultValue","Configuration","constructor","options","region","defaultCdsUrl","baseUri","cdsUri","settings","subscriptionsUri","documentsUri","listsUri","mapsUri","streamsUri","insightsUri","sessionStorageEnabled","Sync","backoffConfig"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA,MAAMC,kBAAkB,GAAG,mBAA3B;AACA,MAAMC,SAAS,GAAG,UAAlB;AACA,MAAMC,UAAU,GAAG,WAAnB;AACA,MAAMC,cAAc,GAAG,eAAvB;AACA,MAAMC,YAAY,GAAG,aAArB;AACA,MAAMC,aAAa,GAAG,cAAtB;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,GAAnC,EAAwCC,YAAxC,EAAsD;AAClD,MAAIF,SAAS,IAAI,OAAOA,SAAS,CAACC,GAAD,CAAhB,KAA0B,WAA3C,EAAwD;AACpD,WAAOD,SAAS,CAACC,GAAD,CAAhB;AACH;;AACD,SAAOC,YAAP;AACH;AACD;;;;;AAGA,MAAMC,aAAN,CAAoB;AAChB;;;AAGAC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACtB,UAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,KAAjC;AACA,UAAMC,aAAa,GAAI,eAAcD,MAAO,aAA5C;AACA,UAAME,OAAO,GAAGH,OAAO,CAACI,MAAR,IAAkBF,aAAlC;AACA,SAAKG,QAAL,GAAgB;AACZC,MAAAA,gBAAgB,EAAEH,OAAO,GAAGf,kBADhB;AAEZmB,MAAAA,YAAY,EAAEJ,OAAO,GAAGZ,cAFZ;AAGZiB,MAAAA,QAAQ,EAAEL,OAAO,GAAGb,UAHR;AAIZmB,MAAAA,OAAO,EAAEN,OAAO,GAAGd,SAJP;AAKZqB,MAAAA,UAAU,EAAEP,OAAO,GAAGX,YALV;AAMZmB,MAAAA,WAAW,EAAER,OAAO,GAAGV,aANX;AAOZmB,MAAAA,qBAAqB,EAAElB,cAAc,CAACM,OAAO,CAACa,IAAT,EAAe,sBAAf,EAAuC,IAAvC;AAPzB,KAAhB;AASH;;AACD,MAAIP,gBAAJ,GAAuB;AACnB,WAAO,KAAKD,QAAL,CAAcC,gBAArB;AACH;;AACD,MAAIC,YAAJ,GAAmB;AACf,WAAO,KAAKF,QAAL,CAAcE,YAArB;AACH;;AACD,MAAIC,QAAJ,GAAe;AACX,WAAO,KAAKH,QAAL,CAAcG,QAArB;AACH;;AACD,MAAIC,OAAJ,GAAc;AACV,WAAO,KAAKJ,QAAL,CAAcI,OAArB;AACH;;AACD,MAAIC,UAAJ,GAAiB;AACb,WAAO,KAAKL,QAAL,CAAcK,UAArB;AACH;;AACD,MAAIC,WAAJ,GAAkB;AACd,WAAO,KAAKN,QAAL,CAAcM,WAArB;AACH;;AACD,MAAIG,aAAJ,GAAoB;AAChB,WAAO,KAAKT,QAAL,CAAcS,aAAd,IAA+B,EAAtC;AACH;;AACD,MAAIF,qBAAJ,GAA4B;AACxB,WAAO,KAAKP,QAAL,CAAcO,qBAArB;AACH;;AAzCe;;AA2CpB1B,OAAO,CAACY,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SUBSCRIPTIONS_PATH = '/v4/Subscriptions';\nconst MAPS_PATH = '/v3/Maps';\nconst LISTS_PATH = '/v3/Lists';\nconst DOCUMENTS_PATH = '/v3/Documents';\nconst STREAMS_PATH = '/v3/Streams';\nconst INSIGHTS_PATH = '/v3/Insights';\nfunction getWithDefault(container, key, defaultValue) {\n    if (container && typeof container[key] !== 'undefined') {\n        return container[key];\n    }\n    return defaultValue;\n}\n/**\n * Settings container for Sync library\n */\nclass Configuration {\n    /**\n     * @param {Object} options\n     */\n    constructor(options = {}) {\n        const region = options.region || 'us1';\n        const defaultCdsUrl = `https://cds.${region}.twilio.com`;\n        const baseUri = options.cdsUri || defaultCdsUrl;\n        this.settings = {\n            subscriptionsUri: baseUri + SUBSCRIPTIONS_PATH,\n            documentsUri: baseUri + DOCUMENTS_PATH,\n            listsUri: baseUri + LISTS_PATH,\n            mapsUri: baseUri + MAPS_PATH,\n            streamsUri: baseUri + STREAMS_PATH,\n            insightsUri: baseUri + INSIGHTS_PATH,\n            sessionStorageEnabled: getWithDefault(options.Sync, 'enableSessionStorage', true)\n        };\n    }\n    get subscriptionsUri() {\n        return this.settings.subscriptionsUri;\n    }\n    get documentsUri() {\n        return this.settings.documentsUri;\n    }\n    get listsUri() {\n        return this.settings.listsUri;\n    }\n    get mapsUri() {\n        return this.settings.mapsUri;\n    }\n    get streamsUri() {\n        return this.settings.streamsUri;\n    }\n    get insightsUri() {\n        return this.settings.insightsUri;\n    }\n    get backoffConfig() {\n        return this.settings.backoffConfig || {};\n    }\n    get sessionStorageEnabled() {\n        return this.settings.sessionStorageEnabled;\n    }\n}\nexports.Configuration = Configuration;\n"]},"metadata":{},"sourceType":"script"}