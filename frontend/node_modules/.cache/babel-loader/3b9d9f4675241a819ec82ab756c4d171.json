{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @description A module for parsing ISO8601 durations\n */\n\n/**\n * The pattern used for parsing ISO8601 duration (PnYnMnDTnHnMnS).\n * This does not cover the week format PnW.\n */\n// PnYnMnDTnHnMnS\n\nvar numbers = '\\\\d+(?:[\\\\.,]\\\\d+)?';\nvar weekPattern = '(' + numbers + 'W)';\nvar datePattern = '(' + numbers + 'Y)?(' + numbers + 'M)?(' + numbers + 'D)?';\nvar timePattern = 'T(' + numbers + 'H)?(' + numbers + 'M)?(' + numbers + 'S)?';\nvar iso8601 = 'P(?:' + weekPattern + '|' + datePattern + '(?:' + timePattern + ')?)';\nvar objMap = ['weeks', 'years', 'months', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * The ISO8601 regex for matching / testing durations\n */\n\nvar pattern = exports.pattern = new RegExp(iso8601);\n/** Parse PnYnMnDTnHnMnS format to object\n * @param {string} durationString - PnYnMnDTnHnMnS formatted string\n * @return {Object} - With a property for each part of the pattern\n */\n\nvar parse = exports.parse = function parse(durationString) {\n  // Slice away first entry in match-array\n  return durationString.match(pattern).slice(1).reduce(function (prev, next, idx) {\n    prev[objMap[idx]] = parseFloat(next) || 0;\n    return prev;\n  }, {});\n};\n/**\n * Convert ISO8601 duration object to an end Date.\n *\n * @param {Object} duration - The duration object\n * @param {Date} startDate - The starting Date for calculating the duration\n * @return {Date} - The resulting end Date\n */\n\n\nvar end = exports.end = function end(duration, startDate) {\n  // Create two equal timestamps, add duration to 'then' and return time difference\n  var timestamp = startDate ? startDate.getTime() : Date.now();\n  var then = new Date(timestamp);\n  then.setFullYear(then.getFullYear() + duration.years);\n  then.setMonth(then.getMonth() + duration.months);\n  then.setDate(then.getDate() + duration.days);\n  then.setHours(then.getHours() + duration.hours);\n  then.setMinutes(then.getMinutes() + duration.minutes); // Then.setSeconds(then.getSeconds() + duration.seconds);\n\n  then.setMilliseconds(then.getMilliseconds() + duration.seconds * 1000); // Special case weeks\n\n  then.setDate(then.getDate() + duration.weeks * 7);\n  return then;\n};\n/**\n * Convert ISO8601 duration object to seconds\n *\n * @param {Object} duration - The duration object\n * @param {Date} startDate - The starting point for calculating the duration\n * @return {Number}\n */\n\n\nvar toSeconds = exports.toSeconds = function toSeconds(duration, startDate) {\n  var timestamp = startDate ? startDate.getTime() : Date.now();\n  var now = new Date(timestamp);\n  var then = end(duration, now);\n  var seconds = (then.getTime() - now.getTime()) / 1000;\n  return seconds;\n};\n\nexports.default = {\n  end: end,\n  toSeconds: toSeconds,\n  pattern: pattern,\n  parse: parse\n};","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/iso8601-duration/lib/index.js"],"names":["Object","defineProperty","exports","value","numbers","weekPattern","datePattern","timePattern","iso8601","objMap","pattern","RegExp","parse","durationString","match","slice","reduce","prev","next","idx","parseFloat","end","duration","startDate","timestamp","getTime","Date","now","then","setFullYear","getFullYear","years","setMonth","getMonth","months","setDate","getDate","days","setHours","getHours","hours","setMinutes","getMinutes","minutes","setMilliseconds","getMilliseconds","seconds","weeks","toSeconds","default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @description A module for parsing ISO8601 durations\n */\n\n/**\n * The pattern used for parsing ISO8601 duration (PnYnMnDTnHnMnS).\n * This does not cover the week format PnW.\n */\n\n// PnYnMnDTnHnMnS\nvar numbers = '\\\\d+(?:[\\\\.,]\\\\d+)?';\nvar weekPattern = '(' + numbers + 'W)';\nvar datePattern = '(' + numbers + 'Y)?(' + numbers + 'M)?(' + numbers + 'D)?';\nvar timePattern = 'T(' + numbers + 'H)?(' + numbers + 'M)?(' + numbers + 'S)?';\n\nvar iso8601 = 'P(?:' + weekPattern + '|' + datePattern + '(?:' + timePattern + ')?)';\nvar objMap = ['weeks', 'years', 'months', 'days', 'hours', 'minutes', 'seconds'];\n\n/**\n * The ISO8601 regex for matching / testing durations\n */\nvar pattern = exports.pattern = new RegExp(iso8601);\n\n/** Parse PnYnMnDTnHnMnS format to object\n * @param {string} durationString - PnYnMnDTnHnMnS formatted string\n * @return {Object} - With a property for each part of the pattern\n */\nvar parse = exports.parse = function parse(durationString) {\n  // Slice away first entry in match-array\n  return durationString.match(pattern).slice(1).reduce(function (prev, next, idx) {\n    prev[objMap[idx]] = parseFloat(next) || 0;\n    return prev;\n  }, {});\n};\n\n/**\n * Convert ISO8601 duration object to an end Date.\n *\n * @param {Object} duration - The duration object\n * @param {Date} startDate - The starting Date for calculating the duration\n * @return {Date} - The resulting end Date\n */\nvar end = exports.end = function end(duration, startDate) {\n  // Create two equal timestamps, add duration to 'then' and return time difference\n  var timestamp = startDate ? startDate.getTime() : Date.now();\n  var then = new Date(timestamp);\n\n  then.setFullYear(then.getFullYear() + duration.years);\n  then.setMonth(then.getMonth() + duration.months);\n  then.setDate(then.getDate() + duration.days);\n  then.setHours(then.getHours() + duration.hours);\n  then.setMinutes(then.getMinutes() + duration.minutes);\n  // Then.setSeconds(then.getSeconds() + duration.seconds);\n  then.setMilliseconds(then.getMilliseconds() + duration.seconds * 1000);\n  // Special case weeks\n  then.setDate(then.getDate() + duration.weeks * 7);\n\n  return then;\n};\n\n/**\n * Convert ISO8601 duration object to seconds\n *\n * @param {Object} duration - The duration object\n * @param {Date} startDate - The starting point for calculating the duration\n * @return {Number}\n */\nvar toSeconds = exports.toSeconds = function toSeconds(duration, startDate) {\n  var timestamp = startDate ? startDate.getTime() : Date.now();\n  var now = new Date(timestamp);\n  var then = end(duration, now);\n\n  var seconds = (then.getTime() - now.getTime()) / 1000;\n  return seconds;\n};\n\nexports.default = {\n  end: end,\n  toSeconds: toSeconds,\n  pattern: pattern,\n  parse: parse\n};"]},"metadata":{},"sourceType":"script"}