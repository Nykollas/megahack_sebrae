{"ast":null,"code":"'use strict';\n\nvar XHR = require('xmlhttprequest').XMLHttpRequest;\n/**\n * Make a network request.\n * @param {String} method - HTTP method to use. e.g: GET, POST.\n * @param {RequestParams} params\n * @returns {Promise<String>} responseText\n*/\n\n/**\n* @typedef {Object} RequestParams\n* @property {String} url - URL to access.\n* @property {Object} [headers] - An unformatted map of headers.\n* @property {Object} [body] - An unformatted map representing\n*   post body.\n* @property {Boolean} [withCredentials=false] - Whether to set the\n*   XHR withCredentials flag.\n*/\n\n\nfunction request(method, params) {\n  return new Promise(function (resolve, reject) {\n    if (typeof method !== 'string' || !params) {\n      throw new Error('<String>method and <Object>params are required args.');\n    }\n\n    var xhr = new XHR();\n    xhr.open(method.toUpperCase(), params.url, true);\n    xhr.withCredentials = !!params.withCredentials;\n\n    xhr.onreadystatechange = function onreadystatechange() {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (200 <= xhr.status && xhr.status < 300) {\n        resolve(xhr.responseText);\n      } else {\n        reject(xhr.responseText);\n      }\n    };\n\n    for (var headerName in params.headers) {\n      xhr.setRequestHeader(headerName, params.headers[headerName]);\n    }\n\n    xhr.send(params.body);\n  });\n}\n\nrequest.get = request.bind(null, 'GET');\nrequest.post = request.bind(null, 'POST');\nmodule.exports = request;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/request.js"],"names":["XHR","require","XMLHttpRequest","request","method","params","Promise","resolve","reject","Error","xhr","open","toUpperCase","url","withCredentials","onreadystatechange","readyState","status","responseText","headerName","headers","setRequestHeader","send","body","get","bind","post","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,cAApC;AAEA;;;;;;;AAKG;;;;;;;;;;;AASH,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAC/B,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,QAAI,OAAOJ,MAAP,KAAkB,QAAlB,IAA8B,CAACC,MAAnC,EAA2C;AACzC,YAAM,IAAII,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,QAAIC,GAAG,GAAG,IAAIV,GAAJ,EAAV;AACAU,IAAAA,GAAG,CAACC,IAAJ,CAASP,MAAM,CAACQ,WAAP,EAAT,EAA+BP,MAAM,CAACQ,GAAtC,EAA2C,IAA3C;AACAH,IAAAA,GAAG,CAACI,eAAJ,GAAsB,CAAC,CAACT,MAAM,CAACS,eAA/B;;AAEAJ,IAAAA,GAAG,CAACK,kBAAJ,GAAyB,SAASA,kBAAT,GAA8B;AACrD,UAAIL,GAAG,CAACM,UAAJ,KAAmB,CAAvB,EAA0B;AACxB;AACD;;AAED,UAAI,OAAON,GAAG,CAACO,MAAX,IAAqBP,GAAG,CAACO,MAAJ,GAAa,GAAtC,EAA2C;AACzCV,QAAAA,OAAO,CAACG,GAAG,CAACQ,YAAL,CAAP;AACD,OAFD,MAEO;AACLV,QAAAA,MAAM,CAACE,GAAG,CAACQ,YAAL,CAAN;AACD;AACF,KAVD;;AAYA,SAAK,IAAIC,UAAT,IAAuBd,MAAM,CAACe,OAA9B,EAAuC;AACrCV,MAAAA,GAAG,CAACW,gBAAJ,CAAqBF,UAArB,EAAiCd,MAAM,CAACe,OAAP,CAAeD,UAAf,CAAjC;AACD;;AAEDT,IAAAA,GAAG,CAACY,IAAJ,CAASjB,MAAM,CAACkB,IAAhB;AACD,GA1BM,CAAP;AA2BD;;AAEDpB,OAAO,CAACqB,GAAR,GAAcrB,OAAO,CAACsB,IAAR,CAAa,IAAb,EAAmB,KAAnB,CAAd;AACAtB,OAAO,CAACuB,IAAR,GAAevB,OAAO,CAACsB,IAAR,CAAa,IAAb,EAAmB,MAAnB,CAAf;AAEAE,MAAM,CAACC,OAAP,GAAiBzB,OAAjB","sourcesContent":["'use strict';\n\nvar XHR = require('xmlhttprequest').XMLHttpRequest;\n\n/**\n * Make a network request.\n * @param {String} method - HTTP method to use. e.g: GET, POST.\n * @param {RequestParams} params\n * @returns {Promise<String>} responseText\n*/ /**\n   * @typedef {Object} RequestParams\n   * @property {String} url - URL to access.\n   * @property {Object} [headers] - An unformatted map of headers.\n   * @property {Object} [body] - An unformatted map representing\n   *   post body.\n   * @property {Boolean} [withCredentials=false] - Whether to set the\n   *   XHR withCredentials flag.\n   */\nfunction request(method, params) {\n  return new Promise(function (resolve, reject) {\n    if (typeof method !== 'string' || !params) {\n      throw new Error('<String>method and <Object>params are required args.');\n    }\n\n    var xhr = new XHR();\n    xhr.open(method.toUpperCase(), params.url, true);\n    xhr.withCredentials = !!params.withCredentials;\n\n    xhr.onreadystatechange = function onreadystatechange() {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (200 <= xhr.status && xhr.status < 300) {\n        resolve(xhr.responseText);\n      } else {\n        reject(xhr.responseText);\n      }\n    };\n\n    for (var headerName in params.headers) {\n      xhr.setRequestHeader(headerName, params.headers[headerName]);\n    }\n\n    xhr.send(params.body);\n  });\n}\n\nrequest.get = request.bind(null, 'GET');\nrequest.post = request.bind(null, 'POST');\n\nmodule.exports = request;"]},"metadata":{},"sourceType":"script"}