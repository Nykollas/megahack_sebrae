{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar StateMachine = require('./statemachine');\n\nvar _require = require('./util'),\n    buildLogLevels = _require.buildLogLevels,\n    makeUUID = _require.makeUUID;\n\nvar Log = require('./util/log');\n\nvar Timeout = require('./util/timeout');\n\nvar nInstances = 0;\n/*\n  TwilioConnection states\n  -----------------------\n\n  +--------------+       +----------+\n  |  connecting  | ----> |  closed  |\n  +--------------+       +----------+\n         |                    ^\n         v                    |\n     +--------+               |\n     |  open  | ---------------\n     +--------+\n */\n\nvar states = {\n  closed: [],\n  connecting: ['closed', 'open'],\n  open: ['closed']\n};\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\nvar HEARTBEAT_TIMEOUT_OFFSET = 100;\nvar WS_CLOSE_NORMAL = 1000;\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\nvar WS_CLOSE_HELLO_FAILED = 3002;\nvar WS_CLOSE_SEND_FAILED = 3003;\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n */\n\nvar TwilioConnection = function (_StateMachine) {\n  _inherits(TwilioConnection, _StateMachine);\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n\n\n  function TwilioConnection(serverUrl, options) {\n    _classCallCheck(this, TwilioConnection);\n\n    var _this = _possibleConstructorReturn(this, (TwilioConnection.__proto__ || Object.getPrototypeOf(TwilioConnection)).call(this, 'connecting', states));\n\n    options = Object.assign({\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log: Log,\n      WebSocket: WebSocket\n    }, options);\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = new options.Log('default', _this, logLevels);\n    Object.defineProperties(_this, {\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _options: {\n        value: options\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n\n    _this.on('stateChanged', function (state, error) {\n      return {\n        closed: function closed() {\n          return _this.emit('close', error);\n        },\n        open: function open() {\n          return _this.emit('open');\n        }\n      }[state]();\n    });\n\n    _this._connect(serverUrl);\n\n    return _this;\n  }\n\n  _createClass(TwilioConnection, [{\n    key: 'toString',\n    value: function toString() {\n      return '[TwilioConnection #' + this._instanceId + ': ' + this._ws.url + ']';\n    }\n    /**\n     * The number of consecutive \"hearbeat\" messages missed.\n     * @property {number}\n     */\n\n  }, {\n    key: '_close',\n\n    /**\n     * Close the {@link TwilioConnection}.\n     * @param {{code: number, reason: string}} event\n     * @private\n     */\n    value: function _close(_ref) {\n      var code = _ref.code,\n          reason = _ref.reason;\n\n      if (this.state === 'closed') {\n        return;\n      }\n\n      if (this._welcomeTimeout) {\n        this._welcomeTimeout.clear();\n      }\n\n      if (this._heartbeatTimeout) {\n        this._heartbeatTimeout.clear();\n      }\n\n      if (this._sendHeartbeatTimeout) {\n        this._sendHeartbeatTimeout.clear();\n      }\n\n      this._messageQueue.splice(0);\n\n      var log = this._log;\n\n      if (code === WS_CLOSE_NORMAL) {\n        log.debug('Closed');\n      } else {\n        log.warn('Closed: ' + code + ' - ' + reason);\n      }\n\n      this.transition('closed', null, code !== WS_CLOSE_NORMAL ? new Error('WebSocket Error ' + code + ': ' + reason) : null);\n      var readyState = this._ws.readyState;\n      var WebSocket = this._options.WebSocket;\n\n      if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n        this._ws.close(code, reason);\n      }\n    }\n    /**\n     * Connect to the TCMP server.\n     * @param {string} serverUrl\n     * @private\n     */\n\n  }, {\n    key: '_connect',\n    value: function _connect(serverUrl) {\n      var _this2 = this;\n\n      this._ws = new this._options.WebSocket(serverUrl);\n      var log = this._log;\n      var ws = this._ws;\n      log.debug('Created a new WebSocket:', ws);\n      ws.addEventListener('close', function (event) {\n        return _this2._close(event);\n      });\n      ws.addEventListener('message', function (message) {\n        log.debug('Incoming: ' + message.data);\n\n        try {\n          message = JSON.parse(message.data);\n        } catch (error) {\n          _this2.emit('error', error);\n\n          return;\n        }\n\n        switch (message.type) {\n          case 'bad':\n            _this2._handleBad(message);\n\n            break;\n\n          case 'bye':\n            // Do nothing.\n            break;\n\n          case 'heartbeat':\n            _this2._handleHeartbeat();\n\n            break;\n\n          case 'msg':\n            _this2._handleMessage(message);\n\n            break;\n\n          case 'welcome':\n            _this2._handleWelcome(message);\n\n            break;\n\n          default:\n            _this2._log.debug('Unknown message type: ' + message.type);\n\n            _this2.emit('error', new Error('Unknown message type: ' + message.type));\n\n            break;\n        }\n      });\n      ws.addEventListener('open', function () {\n        log.debug('WebSocket opened:', ws);\n\n        _this2._sendHello();\n\n        var welcomeTimeout = _this2._options.welcomeTimeout;\n        _this2._welcomeTimeout = new Timeout(function () {\n          return _this2._handleWelcomeTimeout();\n        }, welcomeTimeout);\n      });\n    }\n    /**\n     * Handle an incoming \"bad\" message.\n     * @param {{reason: string}} message\n     * @private\n     */\n\n  }, {\n    key: '_handleBad',\n    value: function _handleBad(_ref2) {\n      var reason = _ref2.reason;\n      var log = this._log;\n\n      if (this.state === 'connecting') {\n        log.warn('Closing: ' + WS_CLOSE_HELLO_FAILED + ' - ' + reason);\n\n        this._close({\n          code: WS_CLOSE_HELLO_FAILED,\n          reason: reason\n        });\n\n        return;\n      }\n\n      log.debug('Error: ' + reason);\n      this.emit('error', new Error(reason));\n    }\n    /**\n     * Handle an incoming \"heartbeat\" message.\n     * @private\n     */\n\n  }, {\n    key: '_handleHeartbeat',\n    value: function _handleHeartbeat() {\n      if (this.state !== 'open') {\n        return;\n      }\n\n      this._consecutiveHeartbeatsMissed = 0;\n\n      this._heartbeatTimeout.reset();\n    }\n    /**\n     * Handle a missed \"heartbeat\" message.\n     * @private\n     */\n\n  }, {\n    key: '_handleHeartbeatTimeout',\n    value: function _handleHeartbeatTimeout() {\n      if (this.state !== 'open') {\n        return;\n      }\n\n      this._consecutiveHeartbeatsMissed++;\n      var log = this._log;\n      var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n      log.debug('Consecutive heartbeats missed: ' + this._consecutiveHeartbeatsMissed);\n\n      if (this._consecutiveHeartbeatsMissed < maxConsecutiveMissedHeartbeats) {\n        this._heartbeatTimeout.reset();\n\n        return;\n      }\n\n      var reason = 'Missed ' + maxConsecutiveMissedHeartbeats + ' \"heartbeat\" messages';\n      log.warn('Closing: ' + WS_CLOSE_HEARTBEATS_MISSED + ' - ' + reason);\n\n      this._close({\n        code: WS_CLOSE_HEARTBEATS_MISSED,\n        reason: reason\n      });\n    }\n    /**\n     * Handle an incoming \"msg\" message.\n     * @param {{body: object}} message\n     * @private\n     */\n\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(_ref3) {\n      var body = _ref3.body;\n\n      if (this.state !== 'open') {\n        return;\n      }\n\n      this.emit('message', body);\n    }\n    /**\n     * Handle an incoming \"welcome\" message.\n     * @param {{ negotiatedTimeout: number }} message\n     * @private\n     */\n\n  }, {\n    key: '_handleWelcome',\n    value: function _handleWelcome(_ref4) {\n      var _this3 = this;\n\n      var negotiatedTimeout = _ref4.negotiatedTimeout;\n\n      if (this.state !== 'connecting') {\n        return;\n      }\n\n      var heartbeatTimeout = negotiatedTimeout + HEARTBEAT_TIMEOUT_OFFSET;\n\n      this._welcomeTimeout.clear();\n\n      this._heartbeatTimeout = new Timeout(function () {\n        return _this3._handleHeartbeatTimeout();\n      }, heartbeatTimeout);\n\n      this._messageQueue.splice(0).forEach(function (message) {\n        return _this3._send(message);\n      });\n\n      this._sendHeartbeatTimeout = new Timeout(function () {\n        return _this3._sendHeartbeat();\n      }, negotiatedTimeout);\n      this.transition('open');\n    }\n    /**\n     * Handle a missed \"welcome\" message.\n     * @private\n     */\n\n  }, {\n    key: '_handleWelcomeTimeout',\n    value: function _handleWelcomeTimeout() {\n      if (this.state !== 'connecting') {\n        return;\n      }\n\n      var reason = '\"welcome\" message timeout expired';\n\n      this._log.warn('Closing: ' + WS_CLOSE_WELCOME_TIMEOUT + ' - ' + reason);\n\n      this._close({\n        code: WS_CLOSE_WELCOME_TIMEOUT,\n        reason: reason\n      });\n    }\n    /**\n     * Send a message to the TCMP server.\n     * @param {*} message\n     * @private\n     */\n\n  }, {\n    key: '_send',\n    value: function _send(message) {\n      var readyState = this._ws.readyState;\n      var WebSocket = this._options.WebSocket;\n\n      if (readyState === WebSocket.OPEN) {\n        var data = JSON.stringify(message);\n\n        this._log.debug('Outgoing: ' + data);\n\n        try {\n          this._ws.send(data);\n        } catch (error) {\n          var reason = 'Failed to send message';\n\n          this._log.warn('Closing: ' + WS_CLOSE_SEND_FAILED + ' - ' + reason);\n\n          this._close({\n            code: WS_CLOSE_SEND_FAILED,\n            reason: reason\n          });\n        }\n      }\n    }\n    /**\n     * Send a \"heartbeat\" message.\n     * @private\n     */\n\n  }, {\n    key: '_sendHeartbeat',\n    value: function _sendHeartbeat() {\n      if (this.state === 'closed') {\n        return;\n      }\n\n      this._send({\n        type: 'heartbeat'\n      });\n\n      this._sendHeartbeatTimeout.reset();\n    }\n    /**\n     * Send a \"hello\" message.\n     * @private\n     */\n\n  }, {\n    key: '_sendHello',\n    value: function _sendHello() {\n      var requestedHeartbeatTimeout = this._options.requestedHeartbeatTimeout;\n\n      this._send({\n        id: makeUUID(),\n        timeout: requestedHeartbeatTimeout,\n        type: 'hello'\n      });\n    }\n    /**\n     * Send or enqueue a message.\n     * @param {*} message\n     * @private\n     */\n\n  }, {\n    key: '_sendOrEnqueue',\n    value: function _sendOrEnqueue(message) {\n      var _this4 = this;\n\n      if (this.state === 'closed') {\n        return;\n      }\n\n      var sendOrEnqueue = this.state === 'open' ? function (message) {\n        return _this4._send(message);\n      } : function (message) {\n        return _this4._messageQueue.push(message);\n      };\n      sendOrEnqueue(message);\n    }\n    /**\n     * Close the {@link TwilioConnection}.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this.state === 'closed') {\n        return;\n      }\n\n      this._sendOrEnqueue({\n        type: 'bye'\n      });\n\n      this._ws.close(WS_CLOSE_NORMAL);\n    }\n    /**\n     * Send a \"msg\" message.\n     * @param {*} body\n     * @returns {void}\n     */\n\n  }, {\n    key: 'sendMessage',\n    value: function sendMessage(body) {\n      this._sendOrEnqueue({\n        body: body,\n        type: 'msg'\n      });\n    }\n  }, {\n    key: 'consecutiveHeartbeatsMissed',\n    get: function get() {\n      return this._consecutiveHeartbeatsMissed;\n    }\n  }]);\n\n  return TwilioConnection;\n}(StateMachine);\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {?Error} error - If closed by the client, then this is null\n */\n\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveMissedHeartbeats=5] - Max. number of consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\n\n\nmodule.exports = TwilioConnection;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-video/es5/twilioconnection.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","StateMachine","require","_require","buildLogLevels","makeUUID","Log","Timeout","nInstances","states","closed","connecting","open","DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS","DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT","DEFAULT_WELCOME_TIMEOUT","HEARTBEAT_TIMEOUT_OFFSET","WS_CLOSE_NORMAL","WS_CLOSE_WELCOME_TIMEOUT","WS_CLOSE_HEARTBEATS_MISSED","WS_CLOSE_HELLO_FAILED","WS_CLOSE_SEND_FAILED","toplevel","global","window","WebSocket","TwilioConnection","_StateMachine","serverUrl","options","_this","getPrototypeOf","assign","maxConsecutiveMissedHeartbeats","requestedHeartbeatTimeout","welcomeTimeout","logLevels","logLevel","log","_consecutiveHeartbeatsMissed","_heartbeatTimeout","_instanceId","_log","_messageQueue","_options","_sendHeartbeatTimeout","_welcomeTimeout","_ws","on","state","error","emit","_connect","toString","url","_close","_ref","code","reason","clear","splice","debug","warn","transition","Error","readyState","CLOSING","CLOSED","close","_this2","ws","addEventListener","event","message","data","JSON","parse","type","_handleBad","_handleHeartbeat","_handleMessage","_handleWelcome","_sendHello","_handleWelcomeTimeout","_ref2","reset","_handleHeartbeatTimeout","_ref3","body","_ref4","_this3","negotiatedTimeout","heartbeatTimeout","forEach","_send","_sendHeartbeat","OPEN","stringify","send","id","timeout","_sendOrEnqueue","_this4","sendOrEnqueue","push","sendMessage","get","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar StateMachine = require('./statemachine');\n\nvar _require = require('./util'),\n    buildLogLevels = _require.buildLogLevels,\n    makeUUID = _require.makeUUID;\n\nvar Log = require('./util/log');\nvar Timeout = require('./util/timeout');\n\nvar nInstances = 0;\n\n/*\n  TwilioConnection states\n  -----------------------\n\n  +--------------+       +----------+\n  |  connecting  | ----> |  closed  |\n  +--------------+       +----------+\n         |                    ^\n         v                    |\n     +--------+               |\n     |  open  | ---------------\n     +--------+\n */\n\nvar states = {\n  closed: [],\n  connecting: ['closed', 'open'],\n  open: ['closed']\n};\n\nvar DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS = 3;\nvar DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT = 5000;\nvar DEFAULT_WELCOME_TIMEOUT = 5000;\nvar HEARTBEAT_TIMEOUT_OFFSET = 100;\nvar WS_CLOSE_NORMAL = 1000;\nvar WS_CLOSE_WELCOME_TIMEOUT = 3000;\nvar WS_CLOSE_HEARTBEATS_MISSED = 3001;\nvar WS_CLOSE_HELLO_FAILED = 3002;\nvar WS_CLOSE_SEND_FAILED = 3003;\n\nvar toplevel = global.window || global;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n\n/**\n * A {@link TwilioConnection} represents a WebSocket connection\n * to a Twilio Connections Messaging Protocol (TCMP) server.\n * @fires TwilioConnection#close\n * @fires TwilioConnection#error\n * @fires TwilioConnection#message\n * @fires TwilioConnection#open\n */\n\nvar TwilioConnection = function (_StateMachine) {\n  _inherits(TwilioConnection, _StateMachine);\n\n  /**\n   * Construct a {@link TwilioConnection}.\n   * @param {string} serverUrl - TCMP server url\n   * @param {TwilioConnectionOptions} options - {@link TwilioConnection} options\n   */\n  function TwilioConnection(serverUrl, options) {\n    _classCallCheck(this, TwilioConnection);\n\n    var _this = _possibleConstructorReturn(this, (TwilioConnection.__proto__ || Object.getPrototypeOf(TwilioConnection)).call(this, 'connecting', states));\n\n    options = Object.assign({\n      maxConsecutiveMissedHeartbeats: DEFAULT_MAX_CONSECUTIVE_MISSED_HEARTBEATS,\n      requestedHeartbeatTimeout: DEFAULT_MAX_REQUESTED_HEARTBEAT_TIMEOUT,\n      welcomeTimeout: DEFAULT_WELCOME_TIMEOUT,\n      Log: Log,\n      WebSocket: WebSocket\n    }, options);\n\n    var logLevels = buildLogLevels(options.logLevel);\n    var log = new options.Log('default', _this, logLevels);\n\n    Object.defineProperties(_this, {\n      _consecutiveHeartbeatsMissed: {\n        value: 0,\n        writable: true\n      },\n      _heartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _log: {\n        value: log\n      },\n      _messageQueue: {\n        value: []\n      },\n      _options: {\n        value: options\n      },\n      _sendHeartbeatTimeout: {\n        value: null,\n        writable: true\n      },\n      _welcomeTimeout: {\n        value: null,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      }\n    });\n\n    _this.on('stateChanged', function (state, error) {\n      return {\n        closed: function closed() {\n          return _this.emit('close', error);\n        },\n        open: function open() {\n          return _this.emit('open');\n        }\n      }[state]();\n    });\n\n    _this._connect(serverUrl);\n    return _this;\n  }\n\n  _createClass(TwilioConnection, [{\n    key: 'toString',\n    value: function toString() {\n      return '[TwilioConnection #' + this._instanceId + ': ' + this._ws.url + ']';\n    }\n\n    /**\n     * The number of consecutive \"hearbeat\" messages missed.\n     * @property {number}\n     */\n\n  }, {\n    key: '_close',\n\n\n    /**\n     * Close the {@link TwilioConnection}.\n     * @param {{code: number, reason: string}} event\n     * @private\n     */\n    value: function _close(_ref) {\n      var code = _ref.code,\n          reason = _ref.reason;\n\n      if (this.state === 'closed') {\n        return;\n      }\n      if (this._welcomeTimeout) {\n        this._welcomeTimeout.clear();\n      }\n      if (this._heartbeatTimeout) {\n        this._heartbeatTimeout.clear();\n      }\n      if (this._sendHeartbeatTimeout) {\n        this._sendHeartbeatTimeout.clear();\n      }\n      this._messageQueue.splice(0);\n\n      var log = this._log;\n      if (code === WS_CLOSE_NORMAL) {\n        log.debug('Closed');\n      } else {\n        log.warn('Closed: ' + code + ' - ' + reason);\n      }\n\n      this.transition('closed', null, code !== WS_CLOSE_NORMAL ? new Error('WebSocket Error ' + code + ': ' + reason) : null);\n\n      var readyState = this._ws.readyState;\n      var WebSocket = this._options.WebSocket;\n\n      if (readyState !== WebSocket.CLOSING && readyState !== WebSocket.CLOSED) {\n        this._ws.close(code, reason);\n      }\n    }\n\n    /**\n     * Connect to the TCMP server.\n     * @param {string} serverUrl\n     * @private\n     */\n\n  }, {\n    key: '_connect',\n    value: function _connect(serverUrl) {\n      var _this2 = this;\n\n      this._ws = new this._options.WebSocket(serverUrl);\n      var log = this._log;\n      var ws = this._ws;\n\n      log.debug('Created a new WebSocket:', ws);\n      ws.addEventListener('close', function (event) {\n        return _this2._close(event);\n      });\n\n      ws.addEventListener('message', function (message) {\n        log.debug('Incoming: ' + message.data);\n        try {\n          message = JSON.parse(message.data);\n        } catch (error) {\n          _this2.emit('error', error);\n          return;\n        }\n        switch (message.type) {\n          case 'bad':\n            _this2._handleBad(message);\n            break;\n          case 'bye':\n            // Do nothing.\n            break;\n          case 'heartbeat':\n            _this2._handleHeartbeat();\n            break;\n          case 'msg':\n            _this2._handleMessage(message);\n            break;\n          case 'welcome':\n            _this2._handleWelcome(message);\n            break;\n          default:\n            _this2._log.debug('Unknown message type: ' + message.type);\n            _this2.emit('error', new Error('Unknown message type: ' + message.type));\n            break;\n        }\n      });\n\n      ws.addEventListener('open', function () {\n        log.debug('WebSocket opened:', ws);\n        _this2._sendHello();\n        var welcomeTimeout = _this2._options.welcomeTimeout;\n\n        _this2._welcomeTimeout = new Timeout(function () {\n          return _this2._handleWelcomeTimeout();\n        }, welcomeTimeout);\n      });\n    }\n\n    /**\n     * Handle an incoming \"bad\" message.\n     * @param {{reason: string}} message\n     * @private\n     */\n\n  }, {\n    key: '_handleBad',\n    value: function _handleBad(_ref2) {\n      var reason = _ref2.reason;\n\n      var log = this._log;\n      if (this.state === 'connecting') {\n        log.warn('Closing: ' + WS_CLOSE_HELLO_FAILED + ' - ' + reason);\n        this._close({ code: WS_CLOSE_HELLO_FAILED, reason: reason });\n        return;\n      }\n      log.debug('Error: ' + reason);\n      this.emit('error', new Error(reason));\n    }\n\n    /**\n     * Handle an incoming \"heartbeat\" message.\n     * @private\n     */\n\n  }, {\n    key: '_handleHeartbeat',\n    value: function _handleHeartbeat() {\n      if (this.state !== 'open') {\n        return;\n      }\n      this._consecutiveHeartbeatsMissed = 0;\n      this._heartbeatTimeout.reset();\n    }\n\n    /**\n     * Handle a missed \"heartbeat\" message.\n     * @private\n     */\n\n  }, {\n    key: '_handleHeartbeatTimeout',\n    value: function _handleHeartbeatTimeout() {\n      if (this.state !== 'open') {\n        return;\n      }\n      this._consecutiveHeartbeatsMissed++;\n      var log = this._log;\n      var maxConsecutiveMissedHeartbeats = this._options.maxConsecutiveMissedHeartbeats;\n\n\n      log.debug('Consecutive heartbeats missed: ' + this._consecutiveHeartbeatsMissed);\n      if (this._consecutiveHeartbeatsMissed < maxConsecutiveMissedHeartbeats) {\n        this._heartbeatTimeout.reset();\n        return;\n      }\n\n      var reason = 'Missed ' + maxConsecutiveMissedHeartbeats + ' \"heartbeat\" messages';\n      log.warn('Closing: ' + WS_CLOSE_HEARTBEATS_MISSED + ' - ' + reason);\n      this._close({ code: WS_CLOSE_HEARTBEATS_MISSED, reason: reason });\n    }\n\n    /**\n     * Handle an incoming \"msg\" message.\n     * @param {{body: object}} message\n     * @private\n     */\n\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(_ref3) {\n      var body = _ref3.body;\n\n      if (this.state !== 'open') {\n        return;\n      }\n      this.emit('message', body);\n    }\n\n    /**\n     * Handle an incoming \"welcome\" message.\n     * @param {{ negotiatedTimeout: number }} message\n     * @private\n     */\n\n  }, {\n    key: '_handleWelcome',\n    value: function _handleWelcome(_ref4) {\n      var _this3 = this;\n\n      var negotiatedTimeout = _ref4.negotiatedTimeout;\n\n      if (this.state !== 'connecting') {\n        return;\n      }\n      var heartbeatTimeout = negotiatedTimeout + HEARTBEAT_TIMEOUT_OFFSET;\n      this._welcomeTimeout.clear();\n      this._heartbeatTimeout = new Timeout(function () {\n        return _this3._handleHeartbeatTimeout();\n      }, heartbeatTimeout);\n      this._messageQueue.splice(0).forEach(function (message) {\n        return _this3._send(message);\n      });\n      this._sendHeartbeatTimeout = new Timeout(function () {\n        return _this3._sendHeartbeat();\n      }, negotiatedTimeout);\n      this.transition('open');\n    }\n\n    /**\n     * Handle a missed \"welcome\" message.\n     * @private\n     */\n\n  }, {\n    key: '_handleWelcomeTimeout',\n    value: function _handleWelcomeTimeout() {\n      if (this.state !== 'connecting') {\n        return;\n      }\n      var reason = '\"welcome\" message timeout expired';\n      this._log.warn('Closing: ' + WS_CLOSE_WELCOME_TIMEOUT + ' - ' + reason);\n      this._close({ code: WS_CLOSE_WELCOME_TIMEOUT, reason: reason });\n    }\n\n    /**\n     * Send a message to the TCMP server.\n     * @param {*} message\n     * @private\n     */\n\n  }, {\n    key: '_send',\n    value: function _send(message) {\n      var readyState = this._ws.readyState;\n      var WebSocket = this._options.WebSocket;\n\n      if (readyState === WebSocket.OPEN) {\n        var data = JSON.stringify(message);\n        this._log.debug('Outgoing: ' + data);\n        try {\n          this._ws.send(data);\n        } catch (error) {\n          var reason = 'Failed to send message';\n          this._log.warn('Closing: ' + WS_CLOSE_SEND_FAILED + ' - ' + reason);\n          this._close({ code: WS_CLOSE_SEND_FAILED, reason: reason });\n        }\n      }\n    }\n\n    /**\n     * Send a \"heartbeat\" message.\n     * @private\n     */\n\n  }, {\n    key: '_sendHeartbeat',\n    value: function _sendHeartbeat() {\n      if (this.state === 'closed') {\n        return;\n      }\n      this._send({ type: 'heartbeat' });\n      this._sendHeartbeatTimeout.reset();\n    }\n\n    /**\n     * Send a \"hello\" message.\n     * @private\n     */\n\n  }, {\n    key: '_sendHello',\n    value: function _sendHello() {\n      var requestedHeartbeatTimeout = this._options.requestedHeartbeatTimeout;\n\n      this._send({\n        id: makeUUID(),\n        timeout: requestedHeartbeatTimeout,\n        type: 'hello'\n      });\n    }\n\n    /**\n     * Send or enqueue a message.\n     * @param {*} message\n     * @private\n     */\n\n  }, {\n    key: '_sendOrEnqueue',\n    value: function _sendOrEnqueue(message) {\n      var _this4 = this;\n\n      if (this.state === 'closed') {\n        return;\n      }\n      var sendOrEnqueue = this.state === 'open' ? function (message) {\n        return _this4._send(message);\n      } : function (message) {\n        return _this4._messageQueue.push(message);\n      };\n\n      sendOrEnqueue(message);\n    }\n\n    /**\n     * Close the {@link TwilioConnection}.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this.state === 'closed') {\n        return;\n      }\n      this._sendOrEnqueue({ type: 'bye' });\n      this._ws.close(WS_CLOSE_NORMAL);\n    }\n\n    /**\n     * Send a \"msg\" message.\n     * @param {*} body\n     * @returns {void}\n     */\n\n  }, {\n    key: 'sendMessage',\n    value: function sendMessage(body) {\n      this._sendOrEnqueue({ body: body, type: 'msg' });\n    }\n  }, {\n    key: 'consecutiveHeartbeatsMissed',\n    get: function get() {\n      return this._consecutiveHeartbeatsMissed;\n    }\n  }]);\n\n  return TwilioConnection;\n}(StateMachine);\n\n/**\n * A {@link TwilioConnection} was closed.\n * @event TwilioConnection#close\n * @param {?Error} error - If closed by the client, then this is null\n */\n\n/**\n * A {@link TwilioConnection} received an error from the TCMP server.\n * @event TwilioConnection#error\n * @param {Error} error - The TCMP server error\n */\n\n/**\n * A {@link TwilioConnection} received a message from the TCMP server.\n * @event TwilioConnection#message\n * @param {*} body - Message body\n */\n\n/**\n * A {@link TwilioConnection} completed a hello/welcome handshake with the TCMP server.\n * @event TwilioConnection#open\n */\n\n/**\n * {@link TwilioConnection} options\n * @typedef {object} TwilioConnectionOptions\n * @property {LogLevel} [logLevel=warn] - Log level of the {@link TwilioConnection}\n * @property {number} [maxConsecutiveMissedHeartbeats=5] - Max. number of consecutive \"heartbeat\" messages that can be missed\n * @property {number} [requestedHeartbeatTimeout=5000] - \"heartbeat\" timeout (ms) requested by the {@link TwilioConnection}\n * @property {number} [welcomeTimeout=5000] - Time (ms) to wait for the \"welcome\" message after sending the \"hello\" message\n */\n\nmodule.exports = TwilioConnection;"]},"metadata":{},"sourceType":"script"}