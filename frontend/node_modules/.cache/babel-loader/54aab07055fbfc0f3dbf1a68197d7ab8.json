{"ast":null,"code":"var _jsxFileName = \"/home/ascencion/sebrae_megahack/src/components/MenuBar/FlipCameraButton/FlipCameraButton.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport FlipCameraIosIcon from '@material-ui/icons/FlipCameraIos';\nimport { IconButton } from '@material-ui/core';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\nexport default function FlipCameraButton() {\n  const {\n    room: {\n      localParticipant\n    },\n    localTracks,\n    getLocalVideoTrack\n  } = useVideoContext();\n  const [supportsFacingMode, setSupportsFacingMode] = useState(null);\n  const videoTrack = localTracks.find(track => track.name === 'camera');\n  const facingMode = videoTrack === null || videoTrack === void 0 ? void 0 : videoTrack.mediaStreamTrack.getSettings().facingMode;\n  useEffect(() => {\n    // The 'supportsFacingMode' variable determines if this component is rendered\n    // If 'facingMode' exists, we will set supportsFacingMode to true.\n    // However, if facingMode is ever undefined again (when the user unpublishes video), we\n    // won't set 'supportsFacingMode' to false. This prevents the icon from briefly\n    // disappearing when the user switches their front/rear camera.\n    if (facingMode && supportsFacingMode === null) {\n      setSupportsFacingMode(Boolean(facingMode));\n    }\n  }, [facingMode, supportsFacingMode]);\n  const toggleFacingMode = useCallback(() => {\n    const localTrackPublication = localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.unpublishTrack(videoTrack); // TODO: remove when SDK implements this event. See: https://issues.corp.twilio.com/browse/JSDK-2592\n\n    localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.emit('trackUnpublished', localTrackPublication);\n    videoTrack.stop();\n    const newFacingMode = facingMode === 'user' ? 'environment' : 'user';\n    getLocalVideoTrack(newFacingMode).then(newVideoTrack => {\n      localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.publishTrack(newVideoTrack, {\n        priority: 'low'\n      });\n    });\n  }, [facingMode, getLocalVideoTrack, localParticipant, videoTrack]);\n  return supportsFacingMode ? /*#__PURE__*/React.createElement(IconButton, {\n    onClick: toggleFacingMode,\n    disabled: !videoTrack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FlipCameraIosIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  })) : null;\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/components/MenuBar/FlipCameraButton/FlipCameraButton.tsx"],"names":["React","useCallback","useEffect","useState","FlipCameraIosIcon","IconButton","useVideoContext","FlipCameraButton","room","localParticipant","localTracks","getLocalVideoTrack","supportsFacingMode","setSupportsFacingMode","videoTrack","find","track","name","facingMode","mediaStreamTrack","getSettings","Boolean","toggleFacingMode","localTrackPublication","unpublishTrack","emit","stop","newFacingMode","then","newVideoTrack","publishTrack","priority"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,eAAP,MAA4B,gDAA5B;AAEA,eAAe,SAASC,gBAAT,GAA4B;AACzC,QAAM;AACJC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF,KADF;AAEJC,IAAAA,WAFI;AAGJC,IAAAA;AAHI,MAIFL,eAAe,EAJnB;AAKA,QAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAiB,IAAjB,CAA5D;AACA,QAAMW,UAAU,GAAGJ,WAAW,CAACK,IAAZ,CAAiBC,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,QAAzC,CAAnB;AACA,QAAMC,UAAU,GAAGJ,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEK,gBAAZ,CAA6BC,WAA7B,GAA2CF,UAA9D;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA,QAAIgB,UAAU,IAAIN,kBAAkB,KAAK,IAAzC,EAA+C;AAC7CC,MAAAA,qBAAqB,CAACQ,OAAO,CAACH,UAAD,CAAR,CAArB;AACD;AACF,GATQ,EASN,CAACA,UAAD,EAAaN,kBAAb,CATM,CAAT;AAWA,QAAMU,gBAAgB,GAAGrB,WAAW,CAAC,MAAM;AACzC,UAAMsB,qBAAqB,GAAGd,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEe,cAAlB,CAAiCV,UAAjC,CAA9B,CADyC,CAEzC;;AACAL,IAAAA,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEgB,IAAlB,CAAuB,kBAAvB,EAA2CF,qBAA3C;AACAT,IAAAA,UAAU,CAAEY,IAAZ;AAEA,UAAMC,aAAa,GAAGT,UAAU,KAAK,MAAf,GAAwB,aAAxB,GAAwC,MAA9D;AAEAP,IAAAA,kBAAkB,CAACgB,aAAD,CAAlB,CAAkCC,IAAlC,CAAuCC,aAAa,IAAI;AACtDpB,MAAAA,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEqB,YAAlB,CAA+BD,aAA/B,EAA8C;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OAA9C;AACD,KAFD;AAGD,GAXmC,EAWjC,CAACb,UAAD,EAAaP,kBAAb,EAAiCF,gBAAjC,EAAmDK,UAAnD,CAXiC,CAApC;AAaA,SAAOF,kBAAkB,gBACvB,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEU,gBAArB;AAAuC,IAAA,QAAQ,EAAE,CAACR,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADuB,GAIrB,IAJJ;AAKD","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport FlipCameraIosIcon from '@material-ui/icons/FlipCameraIos';\nimport { IconButton } from '@material-ui/core';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\n\nexport default function FlipCameraButton() {\n  const {\n    room: { localParticipant },\n    localTracks,\n    getLocalVideoTrack,\n  } = useVideoContext();\n  const [supportsFacingMode, setSupportsFacingMode] = useState<Boolean | null>(null);\n  const videoTrack = localTracks.find(track => track.name === 'camera');\n  const facingMode = videoTrack?.mediaStreamTrack.getSettings().facingMode;\n\n  useEffect(() => {\n    // The 'supportsFacingMode' variable determines if this component is rendered\n    // If 'facingMode' exists, we will set supportsFacingMode to true.\n    // However, if facingMode is ever undefined again (when the user unpublishes video), we\n    // won't set 'supportsFacingMode' to false. This prevents the icon from briefly\n    // disappearing when the user switches their front/rear camera.\n    if (facingMode && supportsFacingMode === null) {\n      setSupportsFacingMode(Boolean(facingMode));\n    }\n  }, [facingMode, supportsFacingMode]);\n\n  const toggleFacingMode = useCallback(() => {\n    const localTrackPublication = localParticipant?.unpublishTrack(videoTrack!);\n    // TODO: remove when SDK implements this event. See: https://issues.corp.twilio.com/browse/JSDK-2592\n    localParticipant?.emit('trackUnpublished', localTrackPublication);\n    videoTrack!.stop();\n\n    const newFacingMode = facingMode === 'user' ? 'environment' : 'user';\n\n    getLocalVideoTrack(newFacingMode).then(newVideoTrack => {\n      localParticipant?.publishTrack(newVideoTrack, { priority: 'low' });\n    });\n  }, [facingMode, getLocalVideoTrack, localParticipant, videoTrack]);\n\n  return supportsFacingMode ? (\n    <IconButton onClick={toggleFacingMode} disabled={!videoTrack}>\n      <FlipCameraIosIcon />\n    </IconButton>\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}