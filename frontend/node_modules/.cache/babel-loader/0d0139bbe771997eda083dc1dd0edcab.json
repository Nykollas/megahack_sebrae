{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useDominantSpeaker from '../useDominantSpeaker/useDominantSpeaker';\nimport useVideoContext from '../useVideoContext/useVideoContext';\nexport default function useParticipants() {\n  const {\n    room\n  } = useVideoContext();\n  const dominantSpeaker = useDominantSpeaker();\n  const [participants, setParticipants] = useState(Array.from(room.participants.values())); // When the dominant speaker changes, they are moved to the front of the participants array.\n  // This means that the most recent dominant speakers will always be near the top of the\n  // ParticipantStrip component.\n\n  useEffect(() => {\n    if (dominantSpeaker) {\n      setParticipants(prevParticipants => [dominantSpeaker, ...prevParticipants.filter(participant => participant !== dominantSpeaker)]);\n    }\n  }, [dominantSpeaker]);\n  useEffect(() => {\n    const participantConnected = participant => setParticipants(prevParticipants => [...prevParticipants, participant]);\n\n    const participantDisconnected = participant => setParticipants(prevParticipants => prevParticipants.filter(p => p !== participant));\n\n    room.on('participantConnected', participantConnected);\n    room.on('participantDisconnected', participantDisconnected);\n    return () => {\n      room.off('participantConnected', participantConnected);\n      room.off('participantDisconnected', participantDisconnected);\n    };\n  }, [room]);\n  return participants;\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/hooks/useParticipants/useParticipants.tsx"],"names":["useEffect","useState","useDominantSpeaker","useVideoContext","useParticipants","room","dominantSpeaker","participants","setParticipants","Array","from","values","prevParticipants","filter","participant","participantConnected","participantDisconnected","p","on","off"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAWF,eAAe,EAAhC;AACA,QAAMG,eAAe,GAAGJ,kBAAkB,EAA1C;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAACQ,KAAK,CAACC,IAAN,CAAWL,IAAI,CAACE,YAAL,CAAkBI,MAAlB,EAAX,CAAD,CAAhD,CAHwC,CAKxC;AACA;AACA;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,eAAJ,EAAqB;AACnBE,MAAAA,eAAe,CAACI,gBAAgB,IAAI,CAClCN,eADkC,EAElC,GAAGM,gBAAgB,CAACC,MAAjB,CAAwBC,WAAW,IAAIA,WAAW,KAAKR,eAAvD,CAF+B,CAArB,CAAf;AAID;AACF,GAPQ,EAON,CAACA,eAAD,CAPM,CAAT;AASAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,oBAAoB,GAAID,WAAD,IAC3BN,eAAe,CAACI,gBAAgB,IAAI,CAAC,GAAGA,gBAAJ,EAAsBE,WAAtB,CAArB,CADjB;;AAEA,UAAME,uBAAuB,GAAIF,WAAD,IAC9BN,eAAe,CAACI,gBAAgB,IAAIA,gBAAgB,CAACC,MAAjB,CAAwBI,CAAC,IAAIA,CAAC,KAAKH,WAAnC,CAArB,CADjB;;AAEAT,IAAAA,IAAI,CAACa,EAAL,CAAQ,sBAAR,EAAgCH,oBAAhC;AACAV,IAAAA,IAAI,CAACa,EAAL,CAAQ,yBAAR,EAAmCF,uBAAnC;AACA,WAAO,MAAM;AACXX,MAAAA,IAAI,CAACc,GAAL,CAAS,sBAAT,EAAiCJ,oBAAjC;AACAV,MAAAA,IAAI,CAACc,GAAL,CAAS,yBAAT,EAAoCH,uBAApC;AACD,KAHD;AAID,GAXQ,EAWN,CAACX,IAAD,CAXM,CAAT;AAaA,SAAOE,YAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport { RemoteParticipant } from 'twilio-video';\nimport useDominantSpeaker from '../useDominantSpeaker/useDominantSpeaker';\nimport useVideoContext from '../useVideoContext/useVideoContext';\n\nexport default function useParticipants() {\n  const { room } = useVideoContext();\n  const dominantSpeaker = useDominantSpeaker();\n  const [participants, setParticipants] = useState(Array.from(room.participants.values()));\n\n  // When the dominant speaker changes, they are moved to the front of the participants array.\n  // This means that the most recent dominant speakers will always be near the top of the\n  // ParticipantStrip component.\n  useEffect(() => {\n    if (dominantSpeaker) {\n      setParticipants(prevParticipants => [\n        dominantSpeaker,\n        ...prevParticipants.filter(participant => participant !== dominantSpeaker),\n      ]);\n    }\n  }, [dominantSpeaker]);\n\n  useEffect(() => {\n    const participantConnected = (participant: RemoteParticipant) =>\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    const participantDisconnected = (participant: RemoteParticipant) =>\n      setParticipants(prevParticipants => prevParticipants.filter(p => p !== participant));\n    room.on('participantConnected', participantConnected);\n    room.on('participantDisconnected', participantDisconnected);\n    return () => {\n      room.off('participantConnected', participantConnected);\n      room.off('participantDisconnected', participantDisconnected);\n    };\n  }, [room]);\n\n  return participants;\n}\n"]},"metadata":{},"sourceType":"module"}