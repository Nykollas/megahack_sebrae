{"ast":null,"code":"\"use strict\";\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar members_1 = require(\"./data/members\");\n\nvar member_1 = require(\"./member\");\n\nvar messages_1 = require(\"./data/messages\");\n\nvar util_1 = require(\"./util\");\n\nvar log = logger_1.Logger.scope('Channel');\nvar fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  type: 'type',\n  uniqueName: 'uniqueName'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction filterStatus(status) {\n  switch (status) {\n    case 'notParticipating':\n      return 'known';\n\n    default:\n      return status;\n  }\n}\n\nexports.filterStatus = filterStatus;\n/**\n * @classdesc A Channel represents a remote channel of communication between multiple Programmable Chat Clients\n * @property {Object} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created this Channel\n * @property {Date} dateCreated - The Date this Channel was created\n * @property {Date} dateUpdated - The Date this Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Channel\n * @property {Channel#LastMessage} lastMessage - Last Message sent to this Channel\n * @property {Channel#NotificationLevel} notificationLevel - User Notification level for this Channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name (tag)\n * @fires Channel#memberJoined\n * @fires Channel#memberLeft\n * @fires Channel#memberUpdated\n * @fires Channel#messageAdded\n * @fires Channel#messageRemoved\n * @fires Channel#messageUpdated\n * @fires Channel#typingEnded\n * @fires Channel#typingStarted\n * @fires Channel#updated\n * @fires Channel#removed\n */\n\nvar Channel = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Channel, _events_1$EventEmitte);\n  /**\n   * These options can be passed to {@link Channel#sendMessage}.\n   * @typedef {Object} Channel#SendMediaOptions\n   * @property {String} contentType - content type of media\n   * @property {String | Buffer} media - content to post\n   */\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Channel\n   * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n    'friendlyName' | 'lastConsumedMessageIndex' | 'status' | 'uniqueName' | 'lastMessage' |\n    'notificationLevel' )} Channel#UpdateReason\n   */\n\n  /**\n   * The status of the Channel, relative to the Client: whether the Channel\n   * is <code>known</code> to local Client, Client is <code>invited</code> to or\n   * is <code>joined</code> to this Channel\n   * @typedef {('unknown' | 'known' | 'invited' | 'joined')} Channel#Status\n   */\n\n  /**\n   * The type of Channel (<code>public</code> or <code>private</code>).\n   * @typedef {('public' | 'private')} Channel#Type\n   */\n\n  /**\n   * The User's Notification level for Channel, determines whether the currently logged-in User will receive\n   * pushes for events in this Channel. Can be either <code>muted</code> or <code>default</code>,\n   * where <code>default</code> defers to global Service push configuration.\n   * @typedef {('default' | 'muted')} Channel#NotificationLevel\n   */\n\n  function Channel(services, descriptor, sid) {\n    (0, _classCallCheck3.default)(this, Channel);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Channel.__proto__ || (0, _getPrototypeOf2.default)(Channel)).call(this));\n\n    var attributes = descriptor.attributes || {};\n    var createdBy = descriptor.createdBy;\n    var dateCreated = parseTime(descriptor.dateCreated);\n    var dateUpdated = parseTime(descriptor.dateUpdated);\n    var friendlyName = descriptor.friendlyName || null;\n    var lastConsumedMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    var uniqueName = descriptor.uniqueName || null;\n\n    try {\n      (0, _stringify2.default)(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    _this.services = services;\n    _this.sid = sid;\n    _this.entityName = descriptor.channel;\n    _this.state = {\n      uniqueName: uniqueName,\n      status: 'known',\n      type: descriptor.type,\n      attributes: attributes,\n      createdBy: createdBy,\n      dateCreated: dateCreated,\n      dateUpdated: dateUpdated,\n      friendlyName: friendlyName,\n      lastConsumedMessageIndex: lastConsumedMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      _this.state.notificationLevel = descriptor.notificationLevel;\n    }\n\n    _this.members = new _map2.default();\n    _this.membersEntity = new members_1.Members(_this, _this.services, _this.members);\n\n    _this.membersEntity.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n\n    _this.membersEntity.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n\n    _this.membersEntity.on('memberUpdated', function (args) {\n      return _this.emit('memberUpdated', args);\n    });\n\n    _this.messagesEntity = new messages_1.Messages(_this, services);\n\n    _this.messagesEntity.on('messageAdded', function (message) {\n      return _this._onMessageAdded(message);\n    });\n\n    _this.messagesEntity.on('messageUpdated', function (args) {\n      return _this.emit('messageUpdated', args);\n    });\n\n    _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n    return _this;\n  }\n\n  (0, _createClass3.default)(Channel, [{\n    key: \"_subscribe\",\n\n    /**\n     * The Channel's last message's information.\n     * @typedef {Object} Channel#LastMessage\n     * @property {Number} index - Message's index\n     * @property {Date} timestamp - Message's creation timestamp\n     */\n\n    /**\n     * Load and Subscribe to this Channel and do not subscribe to its Members and Messages.\n     * This or _subscribeStreams will need to be called before any events on Channel will fire.\n     * @returns {Promise}\n     * @private\n     */\n    value: function _subscribe() {\n      var _this2 = this;\n\n      if (this.entityPromise) {\n        return this.entityPromise;\n      }\n\n      return this.entityPromise = this.entityPromise || this.services.syncClient.document({\n        id: this.entityName,\n        mode: 'open_existing'\n      }).then(function (entity) {\n        _this2.entity = entity;\n\n        _this2.entity.on('updated', function (args) {\n          _this2._update(args.value);\n        });\n\n        _this2.entity.on('removed', function () {\n          return _this2.emit('removed', _this2);\n        });\n\n        _this2._update(_this2.entity.value);\n\n        return entity;\n      }).catch(function (err) {\n        _this2.entity = null;\n        _this2.entityPromise = null;\n\n        if (_this2.services.syncClient.connectionState != 'disconnected') {\n          log.error('Failed to get channel object', err);\n        }\n\n        log.debug('ERROR: Failed to get channel object', err);\n        throw err;\n      });\n    }\n    /**\n     * Load the attributes of this Channel and instantiate its Members and Messages.\n     * This or _subscribe will need to be called before any events on Channel will fire.\n     * This will need to be called before any events on Members or Messages will fire\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"_subscribeStreams\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var messagesObjectName, rosterObjectName;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this._subscribe();\n\n              case 3:\n                log.trace('_subscribeStreams, this.entity.value=', this.entity.value);\n                messagesObjectName = this.entity.value.messages;\n                rosterObjectName = this.entity.value.roster;\n                _context.next = 8;\n                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.membersEntity.subscribe(rosterObjectName)]);\n\n              case 8:\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (this.services.syncClient.connectionState !== 'disconnected') {\n                  log.error('Failed to subscribe on channel objects', this.sid, _context.t0);\n                }\n\n                log.debug('ERROR: Failed to subscribe on channel objects', this.sid, _context.t0);\n                throw _context.t0;\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      function _subscribeStreams() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _subscribeStreams;\n    }()\n    /**\n     * Stop listening for and firing events on this Channel.\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.isPrivate && this.entity)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.entity.close();\n\n              case 3:\n                this.entity = null;\n                this.entityPromise = null;\n\n              case 5:\n                return _context2.abrupt(\"return\", _promise2.default.all([this.membersEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _unsubscribe() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _unsubscribe;\n    }()\n    /**\n     * Set channel status\n     * @private\n     */\n\n  }, {\n    key: \"_setStatus\",\n    value: function _setStatus(status, source) {\n      var _this3 = this;\n\n      this.statusSource = source;\n\n      if (this.state.status === status) {\n        return;\n      }\n\n      this.state.status = status;\n\n      if (status === 'joined') {\n        this._subscribeStreams().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (status === 'invited') {\n        this._subscribe().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (this.entityPromise) {\n        this._unsubscribe().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      }\n    }\n    /**\n     * If channel's status update source\n     * @private\n     * @return {Channels.DataSource}\n     */\n\n  }, {\n    key: \"_statusSource\",\n    value: function _statusSource() {\n      return this.statusSource;\n    }\n  }, {\n    key: \"_update\",\n\n    /**\n     * Updates local channel object with new values\n     * @private\n     */\n    value: function _update(update) {\n      log.trace('_update', update);\n      var updateReasons = [];\n      Channel.preprocessUpdate(update, this.sid);\n\n      for (var key in update) {\n        var localKey = fieldMappings[key];\n\n        if (!localKey) {\n          continue;\n        }\n\n        if (localKey === fieldMappings.status) {\n          if (update.status && update.status != 'unknown' && this.state.status !== filterStatus(update.status)) {\n            this.state.status = filterStatus(update.status);\n            updateReasons.push(localKey);\n          }\n        } else if (localKey === fieldMappings.attributes) {\n          if (!util_1.isDeepEqual(this.state.attributes, update.attributes)) {\n            this.state.attributes = update.attributes;\n            updateReasons.push(localKey);\n          }\n        } else if (localKey === fieldMappings.lastConsumedMessageIndex) {\n          if (!(typeof update.lastConsumedMessageIndex === 'undefined') && update.lastConsumedMessageIndex !== this.state.lastConsumedMessageIndex) {\n            this.state.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n            updateReasons.push(localKey);\n          }\n        } else if (localKey === fieldMappings.lastMessage) {\n          var updated = false;\n\n          if (this.state.lastMessage && !update.lastMessage) {\n            delete this.state.lastMessage;\n            updated = true;\n          } else {\n            if (!this.state.lastMessage) {\n              this.state.lastMessage = {};\n            }\n\n            if (update.lastMessage && typeof update.lastMessage.index !== 'undefined' && update.lastMessage.index !== this.state.lastMessage.index) {\n              this.state.lastMessage.index = update.lastMessage.index;\n              updated = true;\n            }\n\n            if (update.lastMessage && update.lastMessage.timestamp && (!this.state.lastMessage.timestamp || this.state.lastMessage.timestamp.getTime() !== update.lastMessage.timestamp.getTime())) {\n              this.state.lastMessage.timestamp = update.lastMessage.timestamp;\n              updated = true;\n            }\n\n            if (util_1.isDeepEqual(this.state.lastMessage, {})) {\n              delete this.state.lastMessage;\n            }\n          }\n\n          if (updated) {\n            updateReasons.push(localKey);\n          }\n        } else if (update[key] instanceof Date) {\n          if (!this.state[localKey] || this.state[localKey].getTime() !== update[key].getTime()) {\n            this.state[localKey] = update[key];\n            updateReasons.push(localKey);\n          }\n        } else if (this[localKey] !== update[key]) {\n          this.state[localKey] = update[key];\n          updateReasons.push(localKey);\n        }\n      }\n\n      if (updateReasons.length > 0) {\n        this.emit('updated', {\n          channel: this,\n          updateReasons: updateReasons\n        });\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_onMessageAdded\",\n    value: function _onMessageAdded(message) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)(this.members.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var member = _step.value;\n\n          if (member.identity === message.author) {\n            member._endTyping();\n\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.emit('messageAdded', message);\n    }\n    /**\n     * Add a participant to the Channel by its Identity.\n     * @param {String} identity - Identity of the Client to add\n     * @returns {Promise<void|Error|SessionError>}\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity) {\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(!identity || typeof identity !== 'string')) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('Channel.add requires an <String>identity parameter');\n\n              case 2:\n                return _context3.abrupt(\"return\", this.membersEntity.add(identity));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function add(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Advance last consumed Channel's Message index to current consumption horizon.\n     * Rejects if User is not Member of Channel.\n     * Last consumed Message index is updated only if new index value is higher than previous.\n     * @param {Number} index - Message index to advance to as last read\n     * @returns {Promise<number|Error|SessionError>} resulting unread messages count in the channel\n     */\n\n  }, {\n    key: \"advanceLastConsumedMessageIndex\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(index) {\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if ((0, _isInteger2.default)(index)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('Channel.advanceLastConsumedMessageIndex requires an integral <Number>index parameter');\n\n              case 2:\n                _context4.next = 4;\n                return this._subscribeStreams();\n\n              case 4:\n                return _context4.abrupt(\"return\", this.services.consumptionHorizon.advanceLastConsumedMessageIndexForChannel(this.sid, index, this.lastConsumedMessageIndex));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function advanceLastConsumedMessageIndex(_x2) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return advanceLastConsumedMessageIndex;\n    }()\n    /**\n     * Decline an invitation to the Channel and unsubscribe from its events.\n     * @returns {Promise<Channel|SessionError>}\n     */\n\n  }, {\n    key: \"decline\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.services.session.addCommand('declineInvitation', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context5.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function decline() {\n        return _ref5.apply(this, arguments);\n      }\n\n      return decline;\n    }()\n    /**\n     * Delete the Channel and unsubscribe from its events.\n     * @returns {Promise<Channel|SessionError>}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.services.session.addCommand('destroyChannel', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _delete() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * Get the custom attributes of this Channel.<br/>\n     *\n     * <i>NOTE: {@link Channel}'s <code>attributes</code> property will be empty for public channels until this function is called.</i>\n     * @returns {Promise<Object>}\n     */\n\n  }, {\n    key: \"getAttributes\",\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._subscribe();\n\n              case 2:\n                return _context7.abrupt(\"return\", this.attributes);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getAttributes() {\n        return _ref7.apply(this, arguments);\n      }\n\n      return getAttributes;\n    }()\n    /**\n     * Returns messages from channel using paginator interface.\n     * @param {Number} [pageSize=30] Number of messages to return in single chunk\n     * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n     * @param {String} [direction=backwards] - Query direction. By default it query backwards\n     *                                         from newer to older. 'forward' will query in opposite direction\n     * @returns {Promise<Paginator<Message>>} page of messages\n     */\n\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(pageSize, anchor, direction) {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(typeof anchor !== 'undefined' && !(0, _isInteger2.default)(anchor))) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw new Error('Anchor should be a valid message index');\n\n              case 2:\n                _context8.next = 4;\n                return this._subscribeStreams();\n\n              case 4:\n                return _context8.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getMessages(_x3, _x4, _x5) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return getMessages;\n    }()\n    /**\n     * Get a list of all Members joined to this Channel.\n     * @returns {Promise<Array<Member>>}\n     */\n\n  }, {\n    key: \"getMembers\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context9.abrupt(\"return\", this.membersEntity.getMembers());\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getMembers() {\n        return _ref9.apply(this, arguments);\n      }\n\n      return getMembers;\n    }()\n    /**\n     * Get channel members count.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any UI badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number|Error>}\n     */\n\n  }, {\n    key: \"getMembersCount\",\n    value: function () {\n      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context10.sent;\n                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                _context10.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context10.sent;\n                return _context10.abrupt(\"return\", response.body.members_count);\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getMembersCount() {\n        return _ref10.apply(this, arguments);\n      }\n\n      return getMembersCount;\n    }()\n    /**\n     * Get a Member by its SID.\n     * @param {String} memberSid - Member sid\n     * @returns {Promise<Member>}\n     */\n\n  }, {\n    key: \"getMemberBySid\",\n    value: function () {\n      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(memberSid) {\n        return _regenerator2.default.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(!memberSid || typeof memberSid !== 'string')) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                throw new Error('Channel.getMemberBySid requires a <String>memberSid parameter');\n\n              case 2:\n                return _context11.abrupt(\"return\", this.membersEntity.getMemberBySid(memberSid));\n\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getMemberBySid(_x6) {\n        return _ref11.apply(this, arguments);\n      }\n\n      return getMemberBySid;\n    }()\n    /**\n     * Get a Member by its identity.\n     * @param {String} identity - Member identity\n     * @returns {Promise<Member>}\n     */\n\n  }, {\n    key: \"getMemberByIdentity\",\n    value: function () {\n      var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(identity) {\n        return _regenerator2.default.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!(!identity || typeof identity !== 'string')) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw new Error('Channel.getMemberByIdentity requires a <String>identity parameter');\n\n              case 2:\n                return _context12.abrupt(\"return\", this.membersEntity.getMemberByIdentity(identity));\n\n              case 3:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getMemberByIdentity(_x7) {\n        return _ref12.apply(this, arguments);\n      }\n\n      return getMemberByIdentity;\n    }()\n    /**\n     * Get total message count in a channel.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any UI badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number|Error>}\n     */\n\n  }, {\n    key: \"getMessagesCount\",\n    value: function () {\n      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context13.sent;\n                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                _context13.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context13.sent;\n                return _context13.abrupt(\"return\", response.body.messages_count);\n\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getMessagesCount() {\n        return _ref13.apply(this, arguments);\n      }\n\n      return getMessagesCount;\n    }()\n    /**\n     * Get unconsumed messages count for User if he is Member of this Channel.\n     * Rejects if User is not Member of Channel.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any “unread messages count” badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number|Error>}\n     */\n\n  }, {\n    key: \"getUnconsumedMessagesCount\",\n    value: function () {\n      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context14.sent;\n                url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\n                _context14.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context14.sent;\n\n                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {\n                  _context14.next = 11;\n                  break;\n                }\n\n                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", response.body.channels[0].unread_messages_count);\n\n              case 10:\n                return _context14.abrupt(\"return\", null);\n\n              case 11:\n                throw new Error('Channel is not in user channels list');\n\n              case 12:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getUnconsumedMessagesCount() {\n        return _ref14.apply(this, arguments);\n      }\n\n      return getUnconsumedMessagesCount;\n    }()\n    /**\n     * Invite a user to the Channel by their Identity.\n     * @param {String} identity - Identity of the user to invite\n     * @returns {Promise<void|Error|SessionError>}\n     */\n\n  }, {\n    key: \"invite\",\n    value: function () {\n      var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(identity) {\n        return _regenerator2.default.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!(typeof identity !== 'string' || !identity.length)) {\n                  _context15.next = 2;\n                  break;\n                }\n\n                throw new Error('Channel.invite requires an <String>identity parameter');\n\n              case 2:\n                _context15.next = 4;\n                return this.membersEntity.invite(identity);\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function invite(_x8) {\n        return _ref15.apply(this, arguments);\n      }\n\n      return invite;\n    }()\n    /**\n     * Join the Channel and subscribe to its events.\n     * @returns {Promise<Channel|SessionError>}\n     */\n\n  }, {\n    key: \"join\",\n    value: function () {\n      var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {\n        return _regenerator2.default.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.services.session.addCommand('joinChannelV2', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context16.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function join() {\n        return _ref16.apply(this, arguments);\n      }\n\n      return join;\n    }()\n    /**\n     * Leave the Channel.\n     * @returns {Promise<Channel|SessionError>}\n     */\n\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17() {\n        return _regenerator2.default.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (!(this.state.status === 'joined')) {\n                  _context17.next = 3;\n                  break;\n                }\n\n                _context17.next = 3;\n                return this.services.session.addCommand('leaveChannel', {\n                  channelSid: this.sid\n                });\n\n              case 3:\n                return _context17.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function leave() {\n        return _ref17.apply(this, arguments);\n      }\n\n      return leave;\n    }()\n    /**\n     * Remove a Member from the Channel.\n     * @param {String} member - identity of member to remove\n     * @returns {Promise<void|Error|SessionError>}\n     */\n\n  }, {\n    key: \"removeMember\",\n    value: function () {\n      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(member) {\n        return _regenerator2.default.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(!member || typeof member !== 'string' && !(member instanceof member_1.Member))) {\n                  _context18.next = 2;\n                  break;\n                }\n\n                throw new Error('Channel.removeMember requires a <String|Member>member parameter.');\n\n              case 2:\n                if (!(member instanceof member_1.Member)) {\n                  _context18.next = 7;\n                  break;\n                }\n\n                _context18.next = 5;\n                return this.membersEntity.removeBySid(member.sid);\n\n              case 5:\n                _context18.next = 9;\n                break;\n\n              case 7:\n                _context18.next = 9;\n                return this.membersEntity.removeByIdentity(member);\n\n              case 9:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function removeMember(_x9) {\n        return _ref18.apply(this, arguments);\n      }\n\n      return removeMember;\n    }()\n    /**\n     * Send a Message in the Channel.\n     * @param {String | FormData | Channel#SendMediaOptions} message - The message body for text message,\n     * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n     * @param {Object} messageAttributes - attributes for the message\n     * @returns {Promise<number|Error|SessionError>} new Message's index in the Channel's messages list\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(message, messageAttributes) {\n        var response, _response;\n\n        return _regenerator2.default.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                if (!(typeof message === 'undefined')) {\n                  _context19.next = 2;\n                  break;\n                }\n\n                throw new Error('Message is required parameter');\n\n              case 2:\n                if (!(typeof message === 'string' || message === null)) {\n                  _context19.next = 9;\n                  break;\n                }\n\n                _context19.next = 5;\n                return this.messagesEntity.send(message, messageAttributes);\n\n              case 5:\n                response = _context19.sent;\n                return _context19.abrupt(\"return\", util_1.parseToNumber(response.messageId));\n\n              case 9:\n                _context19.next = 11;\n                return this.messagesEntity.sendMedia(message, messageAttributes);\n\n              case 11:\n                _response = _context19.sent;\n                return _context19.abrupt(\"return\", util_1.parseToNumber(_response.messageId));\n\n              case 13:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function sendMessage(_x10, _x11) {\n        return _ref19.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n    /**\n     * Set last consumed Channel's Message index to last known Message's index in this Channel.\n     * @returns {Promise<number|SessionError>} resulting unread messages count in the channel\n     */\n\n  }, {\n    key: \"setAllMessagesConsumed\",\n    value: function () {\n      var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {\n        var messagesPage;\n        return _regenerator2.default.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                _context20.next = 4;\n                return this.getMessages(1);\n\n              case 4:\n                messagesPage = _context20.sent;\n\n                if (!(messagesPage.items.length > 0)) {\n                  _context20.next = 7;\n                  break;\n                }\n\n                return _context20.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\n\n              case 7:\n                return _context20.abrupt(\"return\", _promise2.default.resolve(0));\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function setAllMessagesConsumed() {\n        return _ref20.apply(this, arguments);\n      }\n\n      return setAllMessagesConsumed;\n    }()\n    /**\n     * Set all messages in the channel unread.\n     * @returns {Promise<number|SessionError>} resulting unread messages count in the channel\n     */\n\n  }, {\n    key: \"setNoMessagesConsumed\",\n    value: function () {\n      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21() {\n        return _regenerator2.default.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context21.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, null));\n\n              case 3:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setNoMessagesConsumed() {\n        return _ref21.apply(this, arguments);\n      }\n\n      return setNoMessagesConsumed;\n    }()\n    /**\n     * Set User Notification level for this channel.\n     * @param {Channel#NotificationLevel} notificationLevel - The new user notification level\n     * @returns {Promise<void|Error|SessionError>}\n     */\n\n  }, {\n    key: \"setUserNotificationLevel\",\n    value: function () {\n      var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(notificationLevel) {\n        return _regenerator2.default.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                if (notificationLevel) {\n                  _context22.next = 2;\n                  break;\n                }\n\n                throw new Error('notificationLevel can\\'t be null');\n\n              case 2:\n                _context22.next = 4;\n                return this.services.session.addCommand('editNotificationLevel', {\n                  channelSid: this.sid,\n                  notificationLevel: notificationLevel\n                });\n\n              case 4:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function setUserNotificationLevel(_x12) {\n        return _ref22.apply(this, arguments);\n      }\n\n      return setUserNotificationLevel;\n    }()\n    /**\n     * Send a notification to the server indicating that this Client is currently typing in this Channel.\n     * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n     * @returns {Promise<void|SessionError>}\n     */\n\n  }, {\n    key: \"typing\",\n    value: function typing() {\n      return this.services.typingIndicator.send(this.sid);\n    }\n    /**\n     * Update the Channel's attributes.\n     * @param {Object} attributes - The new attributes object\n     * @returns {Promise<Channel|Error|SessionError>}\n     */\n\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(attributes) {\n        return _regenerator2.default.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                if (!(typeof attributes === 'undefined')) {\n                  _context23.next = 4;\n                  break;\n                }\n\n                throw new Error('Attributes is required parameter');\n\n              case 4:\n                if (!(attributes === null)) {\n                  _context23.next = 8;\n                  break;\n                }\n\n                throw new Error('Attributes can\\'t be null');\n\n              case 8:\n                if (!(attributes.constructor !== Object)) {\n                  _context23.next = 10;\n                  break;\n                }\n\n                throw new Error('Attributes must be a valid JSON object.');\n\n              case 10:\n                _context23.next = 12;\n                return this.services.session.addCommand('editAttributes', {\n                  channelSid: this.sid,\n                  attributes: (0, _stringify2.default)(attributes)\n                });\n\n              case 12:\n                return _context23.abrupt(\"return\", this);\n\n              case 13:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function updateAttributes(_x13) {\n        return _ref23.apply(this, arguments);\n      }\n\n      return updateAttributes;\n    }()\n    /**\n     * Update the Channel's friendlyName.\n     * @param {String} name - The new Channel friendlyName\n     * @returns {Promise<Channel|SessionError>}\n     */\n\n  }, {\n    key: \"updateFriendlyName\",\n    value: function () {\n      var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(name) {\n        return _regenerator2.default.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                if (!(this.state.friendlyName !== name)) {\n                  _context24.next = 3;\n                  break;\n                }\n\n                _context24.next = 3;\n                return this.services.session.addCommand('editFriendlyName', {\n                  channelSid: this.sid,\n                  friendlyName: name\n                });\n\n              case 3:\n                return _context24.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function updateFriendlyName(_x14) {\n        return _ref24.apply(this, arguments);\n      }\n\n      return updateFriendlyName;\n    }()\n    /**\n     * Set last consumed Channel's Message index to current consumption horizon.\n     * @param {Number|null} index - Message index to set as last read.\n     * If null provided, then the behavior is identical to {@link Channel#setNoMessagesConsumed}\n     * @returns {Promise<number|Error|SessionError>} resulting unread messages count in the channel\n     */\n\n  }, {\n    key: \"updateLastConsumedMessageIndex\",\n    value: function () {\n      var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(index) {\n        return _regenerator2.default.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                if ((0, _isInteger2.default)(index) || index === null) {\n                  _context25.next = 2;\n                  break;\n                }\n\n                throw new Error('Incorrect argument \"index\": integer number or null expected');\n\n              case 2:\n                _context25.next = 4;\n                return this._subscribeStreams();\n\n              case 4:\n                return _context25.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, index));\n\n              case 5:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function updateLastConsumedMessageIndex(_x15) {\n        return _ref25.apply(this, arguments);\n      }\n\n      return updateLastConsumedMessageIndex;\n    }()\n    /**\n     * Update the Channel's unique name.\n     * @param {String} uniqueName - The new Channel uniqueName\n     * @returns {Promise<Channel|SessionError>}\n     */\n\n  }, {\n    key: \"updateUniqueName\",\n    value: function () {\n      var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(uniqueName) {\n        return _regenerator2.default.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                if (!(this.state.uniqueName !== uniqueName)) {\n                  _context26.next = 4;\n                  break;\n                }\n\n                if (!uniqueName) {\n                  uniqueName = '';\n                }\n\n                _context26.next = 4;\n                return this.services.session.addCommand('editUniqueName', {\n                  channelSid: this.sid,\n                  uniqueName: uniqueName\n                });\n\n              case 4:\n                return _context26.abrupt(\"return\", this);\n\n              case 5:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function updateUniqueName(_x16) {\n        return _ref26.apply(this, arguments);\n      }\n\n      return updateUniqueName;\n    }()\n    /**\n     * Gets User Descriptors for this channel.\n     * @returns {Promise<Paginator<UserDescriptor>>}\n     */\n\n  }, {\n    key: \"getUserDescriptors\",\n    value: function () {\n      var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27() {\n        return _regenerator2.default.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                return _context27.abrupt(\"return\", this.services.users.getChannelUserDescriptors(this.sid));\n\n              case 1:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getUserDescriptors() {\n        return _ref27.apply(this, arguments);\n      }\n\n      return getUserDescriptors;\n    }()\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this.state.status;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.state.type;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.state.uniqueName;\n    }\n  }, {\n    key: \"isPrivate\",\n    get: function get() {\n      return this.state.type === 'private';\n    }\n  }, {\n    key: \"friendlyName\",\n    get: function get() {\n      return this.state.friendlyName;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.state.dateUpdated;\n    }\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.state.dateCreated;\n    }\n  }, {\n    key: \"createdBy\",\n    get: function get() {\n      return this.state.createdBy;\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.state.attributes;\n    }\n  }, {\n    key: \"lastConsumedMessageIndex\",\n    get: function get() {\n      return this.state.lastConsumedMessageIndex;\n    }\n  }, {\n    key: \"lastMessage\",\n    get: function get() {\n      return this.state.lastMessage;\n    }\n  }, {\n    key: \"notificationLevel\",\n    get: function get() {\n      return this.state.notificationLevel;\n    }\n  }], [{\n    key: \"preprocessUpdate\",\n    value: function preprocessUpdate(update, channelSid) {\n      try {\n        if (typeof update.attributes === 'string') {\n          update.attributes = JSON.parse(update.attributes);\n        } else if (update.attributes) {\n          (0, _stringify2.default)(update.attributes);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n        update.attributes = {};\n      }\n\n      try {\n        if (update.dateCreated) {\n          update.dateCreated = new Date(update.dateCreated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n        delete update.dateCreated;\n      }\n\n      try {\n        if (update.dateUpdated) {\n          update.dateUpdated = new Date(update.dateUpdated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n        delete update.dateUpdated;\n      }\n\n      try {\n        if (update.lastMessage && update.lastMessage.timestamp) {\n          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n        delete update.lastMessage.timestamp;\n      }\n    }\n  }]);\n  return Channel;\n}(events_1.EventEmitter);\n\nexports.Channel = Channel;\n/**\n * Fired when a Member has joined the Channel.\n * @event Channel#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when a Member has left the Channel.\n * @event Channel#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when a Member's fields has been updated.\n * @event Channel#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n\n/**\n * Fired when a new Message has been added to the Channel.\n * @event Channel#messageAdded\n * @type {Message}\n */\n\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Channel#messageRemoved\n * @type {Message}\n */\n\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Channel#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n\n/**\n * Fired when a Member has stopped typing.\n * @event Channel#typingEnded\n * @type {Member}\n */\n\n/**\n * Fired when a Member has started typing.\n * @event Channel#typingStarted\n * @type {Member}\n */\n\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create | creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Channel#updated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n\n/**\n * Fired when the Channel was destroyed or currently logged in User has left private Channel\n * @event Channel#removed\n * @type {Channel}\n */","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-chat/browser/channel.js"],"names":["_getIterator2","require","_getIterator3","_interopRequireDefault","_regenerator","_regenerator2","_promise","_promise2","_asyncToGenerator2","_asyncToGenerator3","_map","_map2","_stringify","_stringify2","_isInteger","_isInteger2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","obj","__esModule","default","Object","defineProperty","exports","value","events_1","logger_1","members_1","member_1","messages_1","util_1","log","Logger","scope","fieldMappings","lastMessage","attributes","createdBy","dateCreated","dateUpdated","friendlyName","lastConsumedMessageIndex","notificationLevel","sid","status","type","uniqueName","parseTime","timeString","Date","e","filterStatus","Channel","_events_1$EventEmitte","services","descriptor","_this","__proto__","call","Error","entityName","channel","state","members","membersEntity","Members","on","emit","bind","args","messagesEntity","Messages","message","_onMessageAdded","key","_subscribe","_this2","entityPromise","syncClient","document","id","mode","then","entity","_update","catch","err","connectionState","error","debug","_ref","mark","_callee","messagesObjectName","rosterObjectName","wrap","_callee$","_context","prev","next","trace","messages","roster","all","subscribe","t0","stop","_subscribeStreams","apply","arguments","_ref2","_callee2","_callee2$","_context2","isPrivate","close","abrupt","unsubscribe","_unsubscribe","_setStatus","source","_this3","statusSource","_statusSource","update","updateReasons","preprocessUpdate","localKey","push","isDeepEqual","updated","index","timestamp","getTime","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","values","_step","done","member","identity","author","_endTyping","return","_ref3","_callee3","_callee3$","_context3","add","_x","_ref4","_callee4","_callee4$","_context4","consumptionHorizon","advanceLastConsumedMessageIndexForChannel","advanceLastConsumedMessageIndex","_x2","_ref5","_callee5","_callee5$","_context5","session","addCommand","channelSid","decline","_ref6","_callee6","_callee6$","_context6","_delete","_ref7","_callee7","_callee7$","_context7","getAttributes","_ref8","_callee8","pageSize","anchor","direction","_callee8$","_context8","getMessages","_x3","_x4","_x5","_ref9","_callee9","_callee9$","_context9","getMembers","_ref10","_callee10","links","url","response","_callee10$","_context10","getSessionLinks","sent","UriBuilder","publicChannelsUrl","path","build","network","get","body","members_count","getMembersCount","_ref11","_callee11","memberSid","_callee11$","_context11","getMemberBySid","_x6","_ref12","_callee12","_callee12$","_context12","getMemberByIdentity","_x7","_ref13","_callee13","_callee13$","_context13","messages_count","getMessagesCount","_ref14","_callee14","_callee14$","_context14","myChannelsUrl","arg","channels","channel_sid","unread_messages_count","getUnconsumedMessagesCount","_ref15","_callee15","_callee15$","_context15","invite","_x8","_ref16","_callee16","_callee16$","_context16","join","_ref17","_callee17","_callee17$","_context17","leave","_ref18","_callee18","_callee18$","_context18","Member","removeBySid","removeByIdentity","removeMember","_x9","_ref19","_callee19","messageAttributes","_response","_callee19$","_context19","send","parseToNumber","messageId","sendMedia","sendMessage","_x10","_x11","_ref20","_callee20","messagesPage","_callee20$","_context20","items","resolve","setAllMessagesConsumed","_ref21","_callee21","_callee21$","_context21","updateLastConsumedMessageIndexForChannel","setNoMessagesConsumed","_ref22","_callee22","_callee22$","_context22","setUserNotificationLevel","_x12","typing","typingIndicator","_ref23","_callee23","_callee23$","_context23","constructor","updateAttributes","_x13","_ref24","_callee24","name","_callee24$","_context24","updateFriendlyName","_x14","_ref25","_callee25","_callee25$","_context25","updateLastConsumedMessageIndex","_x15","_ref26","_callee26","_callee26$","_context26","updateUniqueName","_x16","_ref27","_callee27","_callee27$","_context27","users","getChannelUserDescriptors","getUserDescriptors","JSON","parse","warn","EventEmitter"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,oCAAD,CAA3B;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACH,aAAD,CAA1C;;AAEA,IAAII,YAAY,GAAGH,OAAO,CAAC,2BAAD,CAA1B;;AAEA,IAAII,aAAa,GAAGF,sBAAsB,CAACC,YAAD,CAA1C;;AAEA,IAAIE,QAAQ,GAAGL,OAAO,CAAC,+BAAD,CAAtB;;AAEA,IAAIM,SAAS,GAAGJ,sBAAsB,CAACG,QAAD,CAAtC;;AAEA,IAAIE,kBAAkB,GAAGP,OAAO,CAAC,wCAAD,CAAhC;;AAEA,IAAIQ,kBAAkB,GAAGN,sBAAsB,CAACK,kBAAD,CAA/C;;AAEA,IAAIE,IAAI,GAAGT,OAAO,CAAC,2BAAD,CAAlB;;AAEA,IAAIU,KAAK,GAAGR,sBAAsB,CAACO,IAAD,CAAlC;;AAEA,IAAIE,UAAU,GAAGX,OAAO,CAAC,sCAAD,CAAxB;;AAEA,IAAIY,WAAW,GAAGV,sBAAsB,CAACS,UAAD,CAAxC;;AAEA,IAAIE,UAAU,GAAGb,OAAO,CAAC,yCAAD,CAAxB;;AAEA,IAAIc,WAAW,GAAGZ,sBAAsB,CAACW,UAAD,CAAxC;;AAEA,IAAIE,eAAe,GAAGf,OAAO,CAAC,+CAAD,CAA7B;;AAEA,IAAIgB,gBAAgB,GAAGd,sBAAsB,CAACa,eAAD,CAA7C;;AAEA,IAAIE,gBAAgB,GAAGjB,OAAO,CAAC,sCAAD,CAA9B;;AAEA,IAAIkB,gBAAgB,GAAGhB,sBAAsB,CAACe,gBAAD,CAA7C;;AAEA,IAAIE,aAAa,GAAGnB,OAAO,CAAC,mCAAD,CAA3B;;AAEA,IAAIoB,aAAa,GAAGlB,sBAAsB,CAACiB,aAAD,CAA1C;;AAEA,IAAIE,2BAA2B,GAAGrB,OAAO,CAAC,iDAAD,CAAzC;;AAEA,IAAIsB,2BAA2B,GAAGpB,sBAAsB,CAACmB,2BAAD,CAAxD;;AAEA,IAAIE,UAAU,GAAGvB,OAAO,CAAC,gCAAD,CAAxB;;AAEA,IAAIwB,UAAU,GAAGtB,sBAAsB,CAACqB,UAAD,CAAvC;;AAEA,SAASrB,sBAAT,CAAgCuB,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/FG,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,QAAQ,GAAGhC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAIiC,QAAQ,GAAGjC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIkC,SAAS,GAAGlC,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAImC,QAAQ,GAAGnC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIoC,UAAU,GAAGpC,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIqC,MAAM,GAAGrC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIsC,GAAG,GAAGL,QAAQ,CAACM,MAAT,CAAgBC,KAAhB,CAAsB,SAAtB,CAAV;AACA,IAAIC,aAAa,GAAG;AAChBC,EAAAA,WAAW,EAAE,aADG;AAEhBC,EAAAA,UAAU,EAAE,YAFI;AAGhBC,EAAAA,SAAS,EAAE,WAHK;AAIhBC,EAAAA,WAAW,EAAE,aAJG;AAKhBC,EAAAA,WAAW,EAAE,aALG;AAMhBC,EAAAA,YAAY,EAAE,cANE;AAOhBC,EAAAA,wBAAwB,EAAE,0BAPV;AAQhBC,EAAAA,iBAAiB,EAAE,mBARH;AAShBC,EAAAA,GAAG,EAAE,KATW;AAUhBC,EAAAA,MAAM,EAAE,QAVQ;AAWhBC,EAAAA,IAAI,EAAE,MAXU;AAYhBC,EAAAA,UAAU,EAAE;AAZI,CAApB;;AAcA,SAASC,SAAT,CAAmBC,UAAnB,EAA+B;AAC3B,MAAI;AACA,WAAO,IAAIC,IAAJ,CAASD,UAAT,CAAP;AACH,GAFD,CAEE,OAAOE,CAAP,EAAU;AACR,WAAO,IAAP;AACH;AACJ;;AACD,SAASC,YAAT,CAAsBP,MAAtB,EAA8B;AAC1B,UAAQA,MAAR;AACI,SAAK,kBAAL;AACI,aAAO,OAAP;;AACJ;AACI,aAAOA,MAAP;AAJR;AAMH;;AACDrB,OAAO,CAAC4B,YAAR,GAAuBA,YAAvB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIC,OAAO,GAAG,UAAUC,qBAAV,EAAiC;AAC3C,GAAC,GAAGpC,UAAU,CAACG,OAAf,EAAwBgC,OAAxB,EAAiCC,qBAAjC;AAEA;;;;;;;AAMA;;;;;;;AAMA;;;;;;;AAMA;;;;;AAIA;;;;;;;AAMA,WAASD,OAAT,CAAiBE,QAAjB,EAA2BC,UAA3B,EAAuCZ,GAAvC,EAA4C;AACxC,KAAC,GAAGhC,gBAAgB,CAACS,OAArB,EAA8B,IAA9B,EAAoCgC,OAApC;;AAEA,QAAII,KAAK,GAAG,CAAC,GAAGzC,2BAA2B,CAACK,OAAhC,EAAyC,IAAzC,EAA+C,CAACgC,OAAO,CAACK,SAAR,IAAqB,CAAC,GAAGhD,gBAAgB,CAACW,OAArB,EAA8BgC,OAA9B,CAAtB,EAA8DM,IAA9D,CAAmE,IAAnE,CAA/C,CAAZ;;AAEA,QAAItB,UAAU,GAAGmB,UAAU,CAACnB,UAAX,IAAyB,EAA1C;AACA,QAAIC,SAAS,GAAGkB,UAAU,CAAClB,SAA3B;AACA,QAAIC,WAAW,GAAGS,SAAS,CAACQ,UAAU,CAACjB,WAAZ,CAA3B;AACA,QAAIC,WAAW,GAAGQ,SAAS,CAACQ,UAAU,CAAChB,WAAZ,CAA3B;AACA,QAAIC,YAAY,GAAGe,UAAU,CAACf,YAAX,IAA2B,IAA9C;AACA,QAAIC,wBAAwB,GAAG,CAAC,GAAGlC,WAAW,CAACa,OAAhB,EAAyBmC,UAAU,CAACd,wBAApC,IAAgEc,UAAU,CAACd,wBAA3E,GAAsG,IAArI;AACA,QAAIK,UAAU,GAAGS,UAAU,CAACT,UAAX,IAAyB,IAA1C;;AACA,QAAI;AACA,OAAC,GAAGzC,WAAW,CAACe,OAAhB,EAAyBgB,UAAzB;AACH,KAFD,CAEE,OAAOc,CAAP,EAAU;AACR,YAAM,IAAIS,KAAJ,CAAU,yCAAV,CAAN;AACH;;AACDH,IAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACAE,IAAAA,KAAK,CAACb,GAAN,GAAYA,GAAZ;AACAa,IAAAA,KAAK,CAACI,UAAN,GAAmBL,UAAU,CAACM,OAA9B;AACAL,IAAAA,KAAK,CAACM,KAAN,GAAc;AACVhB,MAAAA,UAAU,EAAEA,UADF;AAEVF,MAAAA,MAAM,EAAE,OAFE;AAGVC,MAAAA,IAAI,EAAEU,UAAU,CAACV,IAHP;AAIVT,MAAAA,UAAU,EAAEA,UAJF;AAKVC,MAAAA,SAAS,EAAEA,SALD;AAMVC,MAAAA,WAAW,EAAEA,WANH;AAOVC,MAAAA,WAAW,EAAEA,WAPH;AAQVC,MAAAA,YAAY,EAAEA,YARJ;AASVC,MAAAA,wBAAwB,EAAEA;AAThB,KAAd;;AAWA,QAAIc,UAAU,CAACb,iBAAf,EAAkC;AAC9Bc,MAAAA,KAAK,CAACM,KAAN,CAAYpB,iBAAZ,GAAgCa,UAAU,CAACb,iBAA3C;AACH;;AACDc,IAAAA,KAAK,CAACO,OAAN,GAAgB,IAAI5D,KAAK,CAACiB,OAAV,EAAhB;AACAoC,IAAAA,KAAK,CAACQ,aAAN,GAAsB,IAAIrC,SAAS,CAACsC,OAAd,CAAsBT,KAAtB,EAA6BA,KAAK,CAACF,QAAnC,EAA6CE,KAAK,CAACO,OAAnD,CAAtB;;AACAP,IAAAA,KAAK,CAACQ,aAAN,CAAoBE,EAApB,CAAuB,cAAvB,EAAuCV,KAAK,CAACW,IAAN,CAAWC,IAAX,CAAgBZ,KAAhB,EAAuB,cAAvB,CAAvC;;AACAA,IAAAA,KAAK,CAACQ,aAAN,CAAoBE,EAApB,CAAuB,YAAvB,EAAqCV,KAAK,CAACW,IAAN,CAAWC,IAAX,CAAgBZ,KAAhB,EAAuB,YAAvB,CAArC;;AACAA,IAAAA,KAAK,CAACQ,aAAN,CAAoBE,EAApB,CAAuB,eAAvB,EAAwC,UAAUG,IAAV,EAAgB;AACpD,aAAOb,KAAK,CAACW,IAAN,CAAW,eAAX,EAA4BE,IAA5B,CAAP;AACH,KAFD;;AAGAb,IAAAA,KAAK,CAACc,cAAN,GAAuB,IAAIzC,UAAU,CAAC0C,QAAf,CAAwBf,KAAxB,EAA+BF,QAA/B,CAAvB;;AACAE,IAAAA,KAAK,CAACc,cAAN,CAAqBJ,EAArB,CAAwB,cAAxB,EAAwC,UAAUM,OAAV,EAAmB;AACvD,aAAOhB,KAAK,CAACiB,eAAN,CAAsBD,OAAtB,CAAP;AACH,KAFD;;AAGAhB,IAAAA,KAAK,CAACc,cAAN,CAAqBJ,EAArB,CAAwB,gBAAxB,EAA0C,UAAUG,IAAV,EAAgB;AACtD,aAAOb,KAAK,CAACW,IAAN,CAAW,gBAAX,EAA6BE,IAA7B,CAAP;AACH,KAFD;;AAGAb,IAAAA,KAAK,CAACc,cAAN,CAAqBJ,EAArB,CAAwB,gBAAxB,EAA0CV,KAAK,CAACW,IAAN,CAAWC,IAAX,CAAgBZ,KAAhB,EAAuB,gBAAvB,CAA1C;;AACA,WAAOA,KAAP;AACH;;AAED,GAAC,GAAG3C,aAAa,CAACO,OAAlB,EAA2BgC,OAA3B,EAAoC,CAAC;AACjCsB,IAAAA,GAAG,EAAE,YAD4B;;AAGjC;;;;;;;AAMA;;;;;;AAMAlD,IAAAA,KAAK,EAAE,SAASmD,UAAT,GAAsB;AACzB,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAI,KAAKC,aAAT,EAAwB;AACpB,eAAO,KAAKA,aAAZ;AACH;;AACD,aAAO,KAAKA,aAAL,GAAqB,KAAKA,aAAL,IAAsB,KAAKvB,QAAL,CAAcwB,UAAd,CAAyBC,QAAzB,CAAkC;AAAEC,QAAAA,EAAE,EAAE,KAAKpB,UAAX;AAAuBqB,QAAAA,IAAI,EAAE;AAA7B,OAAlC,EAAkFC,IAAlF,CAAuF,UAAUC,MAAV,EAAkB;AACvJP,QAAAA,MAAM,CAACO,MAAP,GAAgBA,MAAhB;;AACAP,QAAAA,MAAM,CAACO,MAAP,CAAcjB,EAAd,CAAiB,SAAjB,EAA4B,UAAUG,IAAV,EAAgB;AACxCO,UAAAA,MAAM,CAACQ,OAAP,CAAef,IAAI,CAAC7C,KAApB;AACH,SAFD;;AAGAoD,QAAAA,MAAM,CAACO,MAAP,CAAcjB,EAAd,CAAiB,SAAjB,EAA4B,YAAY;AACpC,iBAAOU,MAAM,CAACT,IAAP,CAAY,SAAZ,EAAuBS,MAAvB,CAAP;AACH,SAFD;;AAGAA,QAAAA,MAAM,CAACQ,OAAP,CAAeR,MAAM,CAACO,MAAP,CAAc3D,KAA7B;;AACA,eAAO2D,MAAP;AACH,OAViD,EAU/CE,KAV+C,CAUzC,UAAUC,GAAV,EAAe;AACpBV,QAAAA,MAAM,CAACO,MAAP,GAAgB,IAAhB;AACAP,QAAAA,MAAM,CAACC,aAAP,GAAuB,IAAvB;;AACA,YAAID,MAAM,CAACtB,QAAP,CAAgBwB,UAAhB,CAA2BS,eAA3B,IAA8C,cAAlD,EAAkE;AAC9DxD,UAAAA,GAAG,CAACyD,KAAJ,CAAU,8BAAV,EAA0CF,GAA1C;AACH;;AACDvD,QAAAA,GAAG,CAAC0D,KAAJ,CAAU,qCAAV,EAAiDH,GAAjD;AACA,cAAMA,GAAN;AACH,OAlBiD,CAAlD;AAmBH;AACD;;;;;;;;AAzCiC,GAAD,EAiDjC;AACCZ,IAAAA,GAAG,EAAE,mBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIkE,IAAI,GAAG,CAAC,GAAGzF,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASC,OAAT,GAAmB;AACnG,YAAIC,kBAAJ,EAAwBC,gBAAxB;AACA,eAAOjG,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1D,iBAAO,CAAP,EAAU;AACN,oBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACI,mBAAK,CAAL;AACIF,gBAAAA,QAAQ,CAACC,IAAT,GAAgB,CAAhB;AACAD,gBAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA,uBAAO,KAAKxB,UAAL,EAAP;;AAEJ,mBAAK,CAAL;AACI5C,gBAAAA,GAAG,CAACqE,KAAJ,CAAU,uCAAV,EAAmD,KAAKjB,MAAL,CAAY3D,KAA/D;AACAqE,gBAAAA,kBAAkB,GAAG,KAAKV,MAAL,CAAY3D,KAAZ,CAAkB6E,QAAvC;AACAP,gBAAAA,gBAAgB,GAAG,KAAKX,MAAL,CAAY3D,KAAZ,CAAkB8E,MAArC;AACAL,gBAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA,uBAAOpG,SAAS,CAACqB,OAAV,CAAkBmF,GAAlB,CAAsB,CAAC,KAAKjC,cAAL,CAAoBkC,SAApB,CAA8BX,kBAA9B,CAAD,EAAoD,KAAK7B,aAAL,CAAmBwC,SAAnB,CAA6BV,gBAA7B,CAApD,CAAtB,CAAP;;AAEJ,mBAAK,CAAL;AACIG,gBAAAA,QAAQ,CAACE,IAAT,GAAgB,EAAhB;AACA;;AAEJ,mBAAK,EAAL;AACIF,gBAAAA,QAAQ,CAACC,IAAT,GAAgB,EAAhB;AACAD,gBAAAA,QAAQ,CAACQ,EAAT,GAAcR,QAAQ,CAAC,OAAD,CAAR,CAAkB,CAAlB,CAAd;;AAEA,oBAAI,KAAK3C,QAAL,CAAcwB,UAAd,CAAyBS,eAAzB,KAA6C,cAAjD,EAAiE;AAC7DxD,kBAAAA,GAAG,CAACyD,KAAJ,CAAU,wCAAV,EAAoD,KAAK7C,GAAzD,EAA8DsD,QAAQ,CAACQ,EAAvE;AACH;;AACD1E,gBAAAA,GAAG,CAAC0D,KAAJ,CAAU,+CAAV,EAA2D,KAAK9C,GAAhE,EAAqEsD,QAAQ,CAACQ,EAA9E;AACA,sBAAMR,QAAQ,CAACQ,EAAf;;AAEJ,mBAAK,EAAL;AACA,mBAAK,KAAL;AACI,uBAAOR,QAAQ,CAACS,IAAT,EAAP;AA7BR;AA+BH;AACJ,SAlCM,EAkCJd,OAlCI,EAkCK,IAlCL,EAkCW,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,CAlCX,CAAP;AAmCH,OArCwD,CAA9C,CAAX;;AAuCA,eAASe,iBAAT,GAA6B;AACzB,eAAOjB,IAAI,CAACkB,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACH;;AAED,aAAOF,iBAAP;AACH,KA7CM;AA8CP;;;;;;AAhDD,GAjDiC,EAuGjC;AACCjC,IAAAA,GAAG,EAAE,cADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIsF,KAAK,GAAG,CAAC,GAAG7G,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASoB,QAAT,GAAoB;AACrG,eAAOlH,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASiB,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAACf,IAAV,GAAiBe,SAAS,CAACd,IAAnC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,KAAKe,SAAL,IAAkB,KAAK/B,MAAzB,CAAJ,EAAsC;AAClC8B,kBAAAA,SAAS,CAACd,IAAV,GAAiB,CAAjB;AACA;AACH;;AAEDc,gBAAAA,SAAS,CAACd,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAKhB,MAAL,CAAYgC,KAAZ,EAAP;;AAEJ,mBAAK,CAAL;AACI,qBAAKhC,MAAL,GAAc,IAAd;AACA,qBAAKN,aAAL,GAAqB,IAArB;;AAEJ,mBAAK,CAAL;AACI,uBAAOoC,SAAS,CAACG,MAAV,CAAiB,QAAjB,EAA2BrH,SAAS,CAACqB,OAAV,CAAkBmF,GAAlB,CAAsB,CAAC,KAAKvC,aAAL,CAAmBqD,WAAnB,EAAD,EAAmC,KAAK/C,cAAL,CAAoB+C,WAApB,EAAnC,CAAtB,CAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOJ,SAAS,CAACP,IAAV,EAAP;AAnBR;AAqBH;AACJ,SAxBM,EAwBJK,QAxBI,EAwBM,IAxBN,CAAP;AAyBH,OA1ByD,CAA9C,CAAZ;;AA4BA,eAASO,YAAT,GAAwB;AACpB,eAAOR,KAAK,CAACF,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACH;;AAED,aAAOS,YAAP;AACH,KAlCM;AAmCP;;;;;AArCD,GAvGiC,EAiJjC;AACC5C,IAAAA,GAAG,EAAE,YADN;AAEClD,IAAAA,KAAK,EAAE,SAAS+F,UAAT,CAAoB3E,MAApB,EAA4B4E,MAA5B,EAAoC;AACvC,UAAIC,MAAM,GAAG,IAAb;;AAEA,WAAKC,YAAL,GAAoBF,MAApB;;AACA,UAAI,KAAK1D,KAAL,CAAWlB,MAAX,KAAsBA,MAA1B,EAAkC;AAC9B;AACH;;AACD,WAAKkB,KAAL,CAAWlB,MAAX,GAAoBA,MAApB;;AACA,UAAIA,MAAM,KAAK,QAAf,EAAyB;AACrB,aAAK+D,iBAAL,GAAyBtB,KAAzB,CAA+B,UAAUC,GAAV,EAAe;AAC1CvD,UAAAA,GAAG,CAAC0D,KAAJ,CAAU,wCAAwC7C,MAAlD,EAA0D0C,GAA1D;;AACA,cAAImC,MAAM,CAACnE,QAAP,CAAgBwB,UAAhB,CAA2BS,eAA3B,KAA+C,cAAnD,EAAmE;AAC/D,kBAAMD,GAAN;AACH;AACJ,SALD;AAMH,OAPD,MAOO,IAAI1C,MAAM,KAAK,SAAf,EAA0B;AAC7B,aAAK+B,UAAL,GAAkBU,KAAlB,CAAwB,UAAUC,GAAV,EAAe;AACnCvD,UAAAA,GAAG,CAAC0D,KAAJ,CAAU,wCAAwC7C,MAAlD,EAA0D0C,GAA1D;;AACA,cAAImC,MAAM,CAACnE,QAAP,CAAgBwB,UAAhB,CAA2BS,eAA3B,KAA+C,cAAnD,EAAmE;AAC/D,kBAAMD,GAAN;AACH;AACJ,SALD;AAMH,OAPM,MAOA,IAAI,KAAKT,aAAT,EAAwB;AAC3B,aAAKyC,YAAL,GAAoBjC,KAApB,CAA0B,UAAUC,GAAV,EAAe;AACrCvD,UAAAA,GAAG,CAAC0D,KAAJ,CAAU,wCAAwC7C,MAAlD,EAA0D0C,GAA1D;;AACA,cAAImC,MAAM,CAACnE,QAAP,CAAgBwB,UAAhB,CAA2BS,eAA3B,KAA+C,cAAnD,EAAmE;AAC/D,kBAAMD,GAAN;AACH;AACJ,SALD;AAMH;AACJ;AACD;;;;;;AAjCD,GAjJiC,EAwLjC;AACCZ,IAAAA,GAAG,EAAE,eADN;AAEClD,IAAAA,KAAK,EAAE,SAASmG,aAAT,GAAyB;AAC5B,aAAO,KAAKD,YAAZ;AACH;AAJF,GAxLiC,EA6LjC;AACChD,IAAAA,GAAG,EAAE,SADN;;AAGC;;;;AAIAlD,IAAAA,KAAK,EAAE,SAAS4D,OAAT,CAAiBwC,MAAjB,EAAyB;AAC5B7F,MAAAA,GAAG,CAACqE,KAAJ,CAAU,SAAV,EAAqBwB,MAArB;AACA,UAAIC,aAAa,GAAG,EAApB;AACAzE,MAAAA,OAAO,CAAC0E,gBAAR,CAAyBF,MAAzB,EAAiC,KAAKjF,GAAtC;;AACA,WAAK,IAAI+B,GAAT,IAAgBkD,MAAhB,EAAwB;AACpB,YAAIG,QAAQ,GAAG7F,aAAa,CAACwC,GAAD,CAA5B;;AACA,YAAI,CAACqD,QAAL,EAAe;AACX;AACH;;AACD,YAAIA,QAAQ,KAAK7F,aAAa,CAACU,MAA/B,EAAuC;AACnC,cAAIgF,MAAM,CAAChF,MAAP,IAAiBgF,MAAM,CAAChF,MAAP,IAAiB,SAAlC,IAA+C,KAAKkB,KAAL,CAAWlB,MAAX,KAAsBO,YAAY,CAACyE,MAAM,CAAChF,MAAR,CAArF,EAAsG;AAClG,iBAAKkB,KAAL,CAAWlB,MAAX,GAAoBO,YAAY,CAACyE,MAAM,CAAChF,MAAR,CAAhC;AACAiF,YAAAA,aAAa,CAACG,IAAd,CAAmBD,QAAnB;AACH;AACJ,SALD,MAKO,IAAIA,QAAQ,KAAK7F,aAAa,CAACE,UAA/B,EAA2C;AAC9C,cAAI,CAACN,MAAM,CAACmG,WAAP,CAAmB,KAAKnE,KAAL,CAAW1B,UAA9B,EAA0CwF,MAAM,CAACxF,UAAjD,CAAL,EAAmE;AAC/D,iBAAK0B,KAAL,CAAW1B,UAAX,GAAwBwF,MAAM,CAACxF,UAA/B;AACAyF,YAAAA,aAAa,CAACG,IAAd,CAAmBD,QAAnB;AACH;AACJ,SALM,MAKA,IAAIA,QAAQ,KAAK7F,aAAa,CAACO,wBAA/B,EAAyD;AAC5D,cAAI,EAAE,OAAOmF,MAAM,CAACnF,wBAAd,KAA2C,WAA7C,KAA6DmF,MAAM,CAACnF,wBAAP,KAAoC,KAAKqB,KAAL,CAAWrB,wBAAhH,EAA0I;AACtI,iBAAKqB,KAAL,CAAWrB,wBAAX,GAAsCmF,MAAM,CAACnF,wBAA7C;AACAoF,YAAAA,aAAa,CAACG,IAAd,CAAmBD,QAAnB;AACH;AACJ,SALM,MAKA,IAAIA,QAAQ,KAAK7F,aAAa,CAACC,WAA/B,EAA4C;AAC/C,cAAI+F,OAAO,GAAG,KAAd;;AACA,cAAI,KAAKpE,KAAL,CAAW3B,WAAX,IAA0B,CAACyF,MAAM,CAACzF,WAAtC,EAAmD;AAC/C,mBAAO,KAAK2B,KAAL,CAAW3B,WAAlB;AACA+F,YAAAA,OAAO,GAAG,IAAV;AACH,WAHD,MAGO;AACH,gBAAI,CAAC,KAAKpE,KAAL,CAAW3B,WAAhB,EAA6B;AACzB,mBAAK2B,KAAL,CAAW3B,WAAX,GAAyB,EAAzB;AACH;;AACD,gBAAIyF,MAAM,CAACzF,WAAP,IAAsB,OAAOyF,MAAM,CAACzF,WAAP,CAAmBgG,KAA1B,KAAoC,WAA1D,IAAyEP,MAAM,CAACzF,WAAP,CAAmBgG,KAAnB,KAA6B,KAAKrE,KAAL,CAAW3B,WAAX,CAAuBgG,KAAjI,EAAwI;AACpI,mBAAKrE,KAAL,CAAW3B,WAAX,CAAuBgG,KAAvB,GAA+BP,MAAM,CAACzF,WAAP,CAAmBgG,KAAlD;AACAD,cAAAA,OAAO,GAAG,IAAV;AACH;;AACD,gBAAIN,MAAM,CAACzF,WAAP,IAAsByF,MAAM,CAACzF,WAAP,CAAmBiG,SAAzC,KAAuD,CAAC,KAAKtE,KAAL,CAAW3B,WAAX,CAAuBiG,SAAxB,IAAqC,KAAKtE,KAAL,CAAW3B,WAAX,CAAuBiG,SAAvB,CAAiCC,OAAjC,OAA+CT,MAAM,CAACzF,WAAP,CAAmBiG,SAAnB,CAA6BC,OAA7B,EAA3I,CAAJ,EAAwL;AACpL,mBAAKvE,KAAL,CAAW3B,WAAX,CAAuBiG,SAAvB,GAAmCR,MAAM,CAACzF,WAAP,CAAmBiG,SAAtD;AACAF,cAAAA,OAAO,GAAG,IAAV;AACH;;AACD,gBAAIpG,MAAM,CAACmG,WAAP,CAAmB,KAAKnE,KAAL,CAAW3B,WAA9B,EAA2C,EAA3C,CAAJ,EAAoD;AAChD,qBAAO,KAAK2B,KAAL,CAAW3B,WAAlB;AACH;AACJ;;AACD,cAAI+F,OAAJ,EAAa;AACTL,YAAAA,aAAa,CAACG,IAAd,CAAmBD,QAAnB;AACH;AACJ,SAxBM,MAwBA,IAAIH,MAAM,CAAClD,GAAD,CAAN,YAAuBzB,IAA3B,EAAiC;AACpC,cAAI,CAAC,KAAKa,KAAL,CAAWiE,QAAX,CAAD,IAAyB,KAAKjE,KAAL,CAAWiE,QAAX,EAAqBM,OAArB,OAAmCT,MAAM,CAAClD,GAAD,CAAN,CAAY2D,OAAZ,EAAhE,EAAuF;AACnF,iBAAKvE,KAAL,CAAWiE,QAAX,IAAuBH,MAAM,CAAClD,GAAD,CAA7B;AACAmD,YAAAA,aAAa,CAACG,IAAd,CAAmBD,QAAnB;AACH;AACJ,SALM,MAKA,IAAI,KAAKA,QAAL,MAAmBH,MAAM,CAAClD,GAAD,CAA7B,EAAoC;AACvC,eAAKZ,KAAL,CAAWiE,QAAX,IAAuBH,MAAM,CAAClD,GAAD,CAA7B;AACAmD,UAAAA,aAAa,CAACG,IAAd,CAAmBD,QAAnB;AACH;AACJ;;AACD,UAAIF,aAAa,CAACS,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,aAAKnE,IAAL,CAAU,SAAV,EAAqB;AAAEN,UAAAA,OAAO,EAAE,IAAX;AAAiBgE,UAAAA,aAAa,EAAEA;AAAhC,SAArB;AACH;AACJ;AACD;;;;AArED,GA7LiC,EAsQjC;AACCnD,IAAAA,GAAG,EAAE,iBADN;AAEClD,IAAAA,KAAK,EAAE,SAASiD,eAAT,CAAyBD,OAAzB,EAAkC;AACrC,UAAI+D,yBAAyB,GAAG,IAAhC;AACA,UAAIC,iBAAiB,GAAG,KAAxB;AACA,UAAIC,cAAc,GAAGC,SAArB;;AAEA,UAAI;AACA,aAAK,IAAIC,SAAS,GAAG,CAAC,GAAGjJ,aAAa,CAAC0B,OAAlB,EAA2B,KAAK2C,OAAL,CAAa6E,MAAb,EAA3B,CAAhB,EAAmEC,KAAxE,EAA+E,EAAEN,yBAAyB,GAAG,CAACM,KAAK,GAAGF,SAAS,CAACxC,IAAV,EAAT,EAA2B2C,IAAzD,CAA/E,EAA+IP,yBAAyB,GAAG,IAA3K,EAAiL;AAC7K,cAAIQ,MAAM,GAAGF,KAAK,CAACrH,KAAnB;;AAEA,cAAIuH,MAAM,CAACC,QAAP,KAAoBxE,OAAO,CAACyE,MAAhC,EAAwC;AACpCF,YAAAA,MAAM,CAACG,UAAP;;AACA;AACH;AACJ;AACJ,OATD,CASE,OAAO5D,GAAP,EAAY;AACVkD,QAAAA,iBAAiB,GAAG,IAApB;AACAC,QAAAA,cAAc,GAAGnD,GAAjB;AACH,OAZD,SAYU;AACN,YAAI;AACA,cAAI,CAACiD,yBAAD,IAA8BI,SAAS,CAACQ,MAA5C,EAAoD;AAChDR,YAAAA,SAAS,CAACQ,MAAV;AACH;AACJ,SAJD,SAIU;AACN,cAAIX,iBAAJ,EAAuB;AACnB,kBAAMC,cAAN;AACH;AACJ;AACJ;;AAED,WAAKtE,IAAL,CAAU,cAAV,EAA0BK,OAA1B;AACH;AACD;;;;;;AAjCD,GAtQiC,EA6SjC;AACCE,IAAAA,GAAG,EAAE,KADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI4H,KAAK,GAAG,CAAC,GAAGnJ,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS0D,QAAT,CAAkBL,QAAlB,EAA4B;AAC7G,eAAOnJ,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASuD,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAACrD,IAAV,GAAiBqD,SAAS,CAACpD,IAAnC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,CAAC6C,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAAnC,CAAJ,EAAkD;AAC9CO,kBAAAA,SAAS,CAACpD,IAAV,GAAiB,CAAjB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,oDAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI,uBAAO4F,SAAS,CAACnC,MAAV,CAAiB,QAAjB,EAA2B,KAAKpD,aAAL,CAAmBwF,GAAnB,CAAuBR,QAAvB,CAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOO,SAAS,CAAC7C,IAAV,EAAP;AAdR;AAgBH;AACJ,SAnBM,EAmBJ2C,QAnBI,EAmBM,IAnBN,CAAP;AAoBH,OArByD,CAA9C,CAAZ;;AAuBA,eAASG,GAAT,CAAaC,EAAb,EAAiB;AACb,eAAOL,KAAK,CAACxC,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACH;;AAED,aAAO2C,GAAP;AACH,KA7BM;AA8BP;;;;;;;;AAhCD,GA7SiC,EAqVjC;AACC9E,IAAAA,GAAG,EAAE,iCADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIkI,KAAK,GAAG,CAAC,GAAGzJ,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASgE,QAAT,CAAkBxB,KAAlB,EAAyB;AAC1G,eAAOtI,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS6D,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAC3D,IAAV,GAAiB2D,SAAS,CAAC1D,IAAnC;AACI,mBAAK,CAAL;AACI,oBAAI,CAAC,GAAG5F,WAAW,CAACa,OAAhB,EAAyB+G,KAAzB,CAAJ,EAAqC;AACjC0B,kBAAAA,SAAS,CAAC1D,IAAV,GAAiB,CAAjB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,sFAAV,CAAN;;AAEJ,mBAAK,CAAL;AACIkG,gBAAAA,SAAS,CAAC1D,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAKQ,iBAAL,EAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAOkD,SAAS,CAACzC,MAAV,CAAiB,QAAjB,EAA2B,KAAK9D,QAAL,CAAcwG,kBAAd,CAAiCC,yCAAjC,CAA2E,KAAKpH,GAAhF,EAAqFwF,KAArF,EAA4F,KAAK1F,wBAAjG,CAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOoH,SAAS,CAACnD,IAAV,EAAP;AAlBR;AAoBH;AACJ,SAvBM,EAuBJiD,QAvBI,EAuBM,IAvBN,CAAP;AAwBH,OAzByD,CAA9C,CAAZ;;AA2BA,eAASK,+BAAT,CAAyCC,GAAzC,EAA8C;AAC1C,eAAOP,KAAK,CAAC9C,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACH;;AAED,aAAOmD,+BAAP;AACH,KAjCM;AAkCP;;;;;AApCD,GArViC,EA8XjC;AACCtF,IAAAA,GAAG,EAAE,SADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI0I,KAAK,GAAG,CAAC,GAAGjK,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASwE,QAAT,GAAoB;AACrG,eAAOtK,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASqE,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAACnE,IAAV,GAAiBmE,SAAS,CAAClE,IAAnC;AACI,mBAAK,CAAL;AACIkE,gBAAAA,SAAS,CAAClE,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBC,UAAtB,CAAiC,mBAAjC,EAAsD;AACzDC,kBAAAA,UAAU,EAAE,KAAK7H;AADwC,iBAAtD,CAAP;;AAIJ,mBAAK,CAAL;AACI,uBAAO0H,SAAS,CAACjD,MAAV,CAAiB,QAAjB,EAA2B,IAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOiD,SAAS,CAAC3D,IAAV,EAAP;AAZR;AAcH;AACJ,SAjBM,EAiBJyD,QAjBI,EAiBM,IAjBN,CAAP;AAkBH,OAnByD,CAA9C,CAAZ;;AAqBA,eAASM,OAAT,GAAmB;AACf,eAAOP,KAAK,CAACtD,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACH;;AAED,aAAO4D,OAAP;AACH,KA3BM;AA4BP;;;;;AA9BD,GA9XiC,EAiajC;AACC/F,IAAAA,GAAG,EAAE,QADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIkJ,KAAK,GAAG,CAAC,GAAGzK,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASgF,QAAT,GAAoB;AACrG,eAAO9K,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS6E,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAC3E,IAAV,GAAiB2E,SAAS,CAAC1E,IAAnC;AACI,mBAAK,CAAL;AACI0E,gBAAAA,SAAS,CAAC1E,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBC,UAAtB,CAAiC,gBAAjC,EAAmD;AACtDC,kBAAAA,UAAU,EAAE,KAAK7H;AADqC,iBAAnD,CAAP;;AAIJ,mBAAK,CAAL;AACI,uBAAOkI,SAAS,CAACzD,MAAV,CAAiB,QAAjB,EAA2B,IAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOyD,SAAS,CAACnE,IAAV,EAAP;AAZR;AAcH;AACJ,SAjBM,EAiBJiE,QAjBI,EAiBM,IAjBN,CAAP;AAkBH,OAnByD,CAA9C,CAAZ;;AAqBA,eAASG,OAAT,GAAmB;AACf,eAAOJ,KAAK,CAAC9D,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACH;;AAED,aAAOiE,OAAP;AACH,KA3BM;AA4BP;;;;;;;AA9BD,GAjaiC,EAscjC;AACCpG,IAAAA,GAAG,EAAE,eADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIuJ,KAAK,GAAG,CAAC,GAAG9K,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASqF,QAAT,GAAoB;AACrG,eAAOnL,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASkF,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAChF,IAAV,GAAiBgF,SAAS,CAAC/E,IAAnC;AACI,mBAAK,CAAL;AACI+E,gBAAAA,SAAS,CAAC/E,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAKxB,UAAL,EAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAOuG,SAAS,CAAC9D,MAAV,CAAiB,QAAjB,EAA2B,KAAKhF,UAAhC,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAO8I,SAAS,CAACxE,IAAV,EAAP;AAVR;AAYH;AACJ,SAfM,EAeJsE,QAfI,EAeM,IAfN,CAAP;AAgBH,OAjByD,CAA9C,CAAZ;;AAmBA,eAASG,aAAT,GAAyB;AACrB,eAAOJ,KAAK,CAACnE,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACH;;AAED,aAAOsE,aAAP;AACH,KAzBM;AA0BP;;;;;;;;;AA5BD,GAtciC,EA2ejC;AACCzG,IAAAA,GAAG,EAAE,aADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI4J,KAAK,GAAG,CAAC,GAAGnL,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS0F,QAAT,CAAkBC,QAAlB,EAA4BC,MAA5B,EAAoCC,SAApC,EAA+C;AAChI,eAAO3L,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS0F,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAACxF,IAAV,GAAiBwF,SAAS,CAACvF,IAAnC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,OAAOoF,MAAP,KAAkB,WAAlB,IAAiC,CAAC,CAAC,GAAGhL,WAAW,CAACa,OAAhB,EAAyBmK,MAAzB,CAApC,CAAJ,EAA2E;AACvEG,kBAAAA,SAAS,CAACvF,IAAV,GAAiB,CAAjB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,wCAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI+H,gBAAAA,SAAS,CAACvF,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAKQ,iBAAL,EAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAO+E,SAAS,CAACtE,MAAV,CAAiB,QAAjB,EAA2B,KAAK9C,cAAL,CAAoBqH,WAApB,CAAgCL,QAAhC,EAA0CC,MAA1C,EAAkDC,SAAlD,CAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOE,SAAS,CAAChF,IAAV,EAAP;AAlBR;AAoBH;AACJ,SAvBM,EAuBJ2E,QAvBI,EAuBM,IAvBN,CAAP;AAwBH,OAzByD,CAA9C,CAAZ;;AA2BA,eAASM,WAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AAChC,eAAOV,KAAK,CAACxE,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACH;;AAED,aAAO8E,WAAP;AACH,KAjCM;AAkCP;;;;;AApCD,GA3eiC,EAohBjC;AACCjH,IAAAA,GAAG,EAAE,YADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIuK,KAAK,GAAG,CAAC,GAAG9L,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASqG,QAAT,GAAoB;AACrG,eAAOnM,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASkG,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAChG,IAAV,GAAiBgG,SAAS,CAAC/F,IAAnC;AACI,mBAAK,CAAL;AACI+F,gBAAAA,SAAS,CAAC/F,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAKQ,iBAAL,EAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAOuF,SAAS,CAAC9E,MAAV,CAAiB,QAAjB,EAA2B,KAAKpD,aAAL,CAAmBmI,UAAnB,EAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOD,SAAS,CAACxF,IAAV,EAAP;AAVR;AAYH;AACJ,SAfM,EAeJsF,QAfI,EAeM,IAfN,CAAP;AAgBH,OAjByD,CAA9C,CAAZ;;AAmBA,eAASG,UAAT,GAAsB;AAClB,eAAOJ,KAAK,CAACnF,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACH;;AAED,aAAOsF,UAAP;AACH,KAzBM;AA0BP;;;;;;;;;;;;AA5BD,GAphBiC,EA4jBjC;AACCzH,IAAAA,GAAG,EAAE,iBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI4K,MAAM,GAAG,CAAC,GAAGnM,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS0G,SAAT,GAAqB;AACvG,YAAIC,KAAJ,EAAWC,GAAX,EAAgBC,QAAhB;AACA,eAAO3M,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS0G,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAACxG,IAAX,GAAkBwG,UAAU,CAACvG,IAArC;AACI,mBAAK,CAAL;AACIuG,gBAAAA,UAAU,CAACvG,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBqC,eAAtB,EAAP;;AAEJ,mBAAK,CAAL;AACIL,gBAAAA,KAAK,GAAGI,UAAU,CAACE,IAAnB;AACAL,gBAAAA,GAAG,GAAG,IAAIzK,MAAM,CAAC+K,UAAX,CAAsBP,KAAK,CAACQ,iBAA5B,EAA+CC,IAA/C,CAAoD,KAAKpK,GAAzD,EAA8DqK,KAA9D,EAAN;AACAN,gBAAAA,UAAU,CAACvG,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAc2J,OAAd,CAAsBC,GAAtB,CAA0BX,GAA1B,CAAP;;AAEJ,mBAAK,CAAL;AACIC,gBAAAA,QAAQ,GAAGE,UAAU,CAACE,IAAtB;AACA,uBAAOF,UAAU,CAACtF,MAAX,CAAkB,QAAlB,EAA4BoF,QAAQ,CAACW,IAAT,CAAcC,aAA1C,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOV,UAAU,CAAChG,IAAX,EAAP;AAjBR;AAmBH;AACJ,SAtBM,EAsBJ2F,SAtBI,EAsBO,IAtBP,CAAP;AAuBH,OAzB0D,CAA9C,CAAb;;AA2BA,eAASgB,eAAT,GAA2B;AACvB,eAAOjB,MAAM,CAACxF,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOwG,eAAP;AACH,KAjCM;AAkCP;;;;;;AApCD,GA5jBiC,EAsmBjC;AACC3I,IAAAA,GAAG,EAAE,gBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI8L,MAAM,GAAG,CAAC,GAAGrN,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS4H,SAAT,CAAmBC,SAAnB,EAA8B;AAChH,eAAO3N,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS0H,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAACxH,IAAX,GAAkBwH,UAAU,CAACvH,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,CAACqH,SAAD,IAAc,OAAOA,SAAP,KAAqB,QAArC,CAAJ,EAAoD;AAChDE,kBAAAA,UAAU,CAACvH,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,+DAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI,uBAAO+J,UAAU,CAACtG,MAAX,CAAkB,QAAlB,EAA4B,KAAKpD,aAAL,CAAmB2J,cAAnB,CAAkCH,SAAlC,CAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOE,UAAU,CAAChH,IAAX,EAAP;AAdR;AAgBH;AACJ,SAnBM,EAmBJ6G,SAnBI,EAmBO,IAnBP,CAAP;AAoBH,OArB0D,CAA9C,CAAb;;AAuBA,eAASI,cAAT,CAAwBC,GAAxB,EAA6B;AACzB,eAAON,MAAM,CAAC1G,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAO8G,cAAP;AACH,KA7BM;AA8BP;;;;;;AAhCD,GAtmBiC,EA4oBjC;AACCjJ,IAAAA,GAAG,EAAE,qBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIqM,MAAM,GAAG,CAAC,GAAG5N,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASmI,SAAT,CAAmB9E,QAAnB,EAA6B;AAC/G,eAAOnJ,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASgI,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAC9H,IAAX,GAAkB8H,UAAU,CAAC7H,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,CAAC6C,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAAnC,CAAJ,EAAkD;AAC9CgF,kBAAAA,UAAU,CAAC7H,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,mEAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI,uBAAOqK,UAAU,CAAC5G,MAAX,CAAkB,QAAlB,EAA4B,KAAKpD,aAAL,CAAmBiK,mBAAnB,CAAuCjF,QAAvC,CAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOgF,UAAU,CAACtH,IAAX,EAAP;AAdR;AAgBH;AACJ,SAnBM,EAmBJoH,SAnBI,EAmBO,IAnBP,CAAP;AAoBH,OArB0D,CAA9C,CAAb;;AAuBA,eAASG,mBAAT,CAA6BC,GAA7B,EAAkC;AAC9B,eAAOL,MAAM,CAACjH,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOoH,mBAAP;AACH,KA7BM;AA8BP;;;;;;;;;;;;AAhCD,GA5oBiC,EAwrBjC;AACCvJ,IAAAA,GAAG,EAAE,kBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI2M,MAAM,GAAG,CAAC,GAAGlO,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASyI,SAAT,GAAqB;AACvG,YAAI9B,KAAJ,EAAWC,GAAX,EAAgBC,QAAhB;AACA,eAAO3M,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASsI,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAACpI,IAAX,GAAkBoI,UAAU,CAACnI,IAArC;AACI,mBAAK,CAAL;AACImI,gBAAAA,UAAU,CAACnI,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBqC,eAAtB,EAAP;;AAEJ,mBAAK,CAAL;AACIL,gBAAAA,KAAK,GAAGgC,UAAU,CAAC1B,IAAnB;AACAL,gBAAAA,GAAG,GAAG,IAAIzK,MAAM,CAAC+K,UAAX,CAAsBP,KAAK,CAACQ,iBAA5B,EAA+CC,IAA/C,CAAoD,KAAKpK,GAAzD,EAA8DqK,KAA9D,EAAN;AACAsB,gBAAAA,UAAU,CAACnI,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAc2J,OAAd,CAAsBC,GAAtB,CAA0BX,GAA1B,CAAP;;AAEJ,mBAAK,CAAL;AACIC,gBAAAA,QAAQ,GAAG8B,UAAU,CAAC1B,IAAtB;AACA,uBAAO0B,UAAU,CAAClH,MAAX,CAAkB,QAAlB,EAA4BoF,QAAQ,CAACW,IAAT,CAAcoB,cAA1C,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOD,UAAU,CAAC5H,IAAX,EAAP;AAjBR;AAmBH;AACJ,SAtBM,EAsBJ0H,SAtBI,EAsBO,IAtBP,CAAP;AAuBH,OAzB0D,CAA9C,CAAb;;AA2BA,eAASI,gBAAT,GAA4B;AACxB,eAAOL,MAAM,CAACvH,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAO2H,gBAAP;AACH,KAjCM;AAkCP;;;;;;;;;;;;;AApCD,GAxrBiC,EAyuBjC;AACC9J,IAAAA,GAAG,EAAE,4BADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIiN,MAAM,GAAG,CAAC,GAAGxO,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS+I,SAAT,GAAqB;AACvG,YAAIpC,KAAJ,EAAWC,GAAX,EAAgBC,QAAhB;AACA,eAAO3M,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS4I,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAC1I,IAAX,GAAkB0I,UAAU,CAACzI,IAArC;AACI,mBAAK,CAAL;AACIyI,gBAAAA,UAAU,CAACzI,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBqC,eAAtB,EAAP;;AAEJ,mBAAK,CAAL;AACIL,gBAAAA,KAAK,GAAGsC,UAAU,CAAChC,IAAnB;AACAL,gBAAAA,GAAG,GAAG,IAAIzK,MAAM,CAAC+K,UAAX,CAAsBP,KAAK,CAACuC,aAA5B,EAA2CC,GAA3C,CAA+C,YAA/C,EAA6D,KAAKnM,GAAlE,EAAuEqK,KAAvE,EAAN;AACA4B,gBAAAA,UAAU,CAACzI,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAc2J,OAAd,CAAsBC,GAAtB,CAA0BX,GAA1B,CAAP;;AAEJ,mBAAK,CAAL;AACIC,gBAAAA,QAAQ,GAAGoC,UAAU,CAAChC,IAAtB;;AAEA,oBAAI,EAAEJ,QAAQ,CAACW,IAAT,CAAc4B,QAAd,CAAuBzG,MAAvB,IAAiCkE,QAAQ,CAACW,IAAT,CAAc4B,QAAd,CAAuB,CAAvB,EAA0BC,WAA1B,IAAyC,KAAKrM,GAAjF,CAAJ,EAA2F;AACvFiM,kBAAAA,UAAU,CAACzI,IAAX,GAAkB,EAAlB;AACA;AACH;;AAED,oBAAI,EAAE,OAAOqG,QAAQ,CAACW,IAAT,CAAc4B,QAAd,CAAuB,CAAvB,EAA0BE,qBAAjC,KAA2D,WAA3D,IAA0EzC,QAAQ,CAACW,IAAT,CAAc4B,QAAd,CAAuB,CAAvB,EAA0BE,qBAA1B,IAAmD,IAA/H,CAAJ,EAA0I;AACtIL,kBAAAA,UAAU,CAACzI,IAAX,GAAkB,EAAlB;AACA;AACH;;AAED,uBAAOyI,UAAU,CAACxH,MAAX,CAAkB,QAAlB,EAA4BoF,QAAQ,CAACW,IAAT,CAAc4B,QAAd,CAAuB,CAAvB,EAA0BE,qBAAtD,CAAP;;AAEJ,mBAAK,EAAL;AACI,uBAAOL,UAAU,CAACxH,MAAX,CAAkB,QAAlB,EAA4B,IAA5B,CAAP;;AAEJ,mBAAK,EAAL;AACI,sBAAM,IAAIzD,KAAJ,CAAU,sCAAV,CAAN;;AAEJ,mBAAK,EAAL;AACA,mBAAK,KAAL;AACI,uBAAOiL,UAAU,CAAClI,IAAX,EAAP;AAlCR;AAoCH;AACJ,SAvCM,EAuCJgI,SAvCI,EAuCO,IAvCP,CAAP;AAwCH,OA1C0D,CAA9C,CAAb;;AA4CA,eAASQ,0BAAT,GAAsC;AAClC,eAAOT,MAAM,CAAC7H,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOqI,0BAAP;AACH,KAlDM;AAmDP;;;;;;AArDD,GAzuBiC,EAoyBjC;AACCxK,IAAAA,GAAG,EAAE,QADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI2N,MAAM,GAAG,CAAC,GAAGlP,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASyJ,SAAT,CAAmBpG,QAAnB,EAA6B;AAC/G,eAAOnJ,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASsJ,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAACpJ,IAAX,GAAkBoJ,UAAU,CAACnJ,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,OAAO6C,QAAP,KAAoB,QAApB,IAAgC,CAACA,QAAQ,CAACV,MAA5C,CAAJ,EAAyD;AACrDgH,kBAAAA,UAAU,CAACnJ,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,uDAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI2L,gBAAAA,UAAU,CAACnJ,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAKnC,aAAL,CAAmBuL,MAAnB,CAA0BvG,QAA1B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOsG,UAAU,CAAC5I,IAAX,EAAP;AAfR;AAiBH;AACJ,SApBM,EAoBJ0I,SApBI,EAoBO,IApBP,CAAP;AAqBH,OAtB0D,CAA9C,CAAb;;AAwBA,eAASG,MAAT,CAAgBC,GAAhB,EAAqB;AACjB,eAAOL,MAAM,CAACvI,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAO0I,MAAP;AACH,KA9BM;AA+BP;;;;;AAjCD,GApyBiC,EA00BjC;AACC7K,IAAAA,GAAG,EAAE,MADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIiO,MAAM,GAAG,CAAC,GAAGxP,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS+J,SAAT,GAAqB;AACvG,eAAO7P,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS4J,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAC1J,IAAX,GAAkB0J,UAAU,CAACzJ,IAArC;AACI,mBAAK,CAAL;AACIyJ,gBAAAA,UAAU,CAACzJ,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBC,UAAtB,CAAiC,eAAjC,EAAkD;AAAEC,kBAAAA,UAAU,EAAE,KAAK7H;AAAnB,iBAAlD,CAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAOiN,UAAU,CAACxI,MAAX,CAAkB,QAAlB,EAA4B,IAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOwI,UAAU,CAAClJ,IAAX,EAAP;AAVR;AAYH;AACJ,SAfM,EAeJgJ,SAfI,EAeO,IAfP,CAAP;AAgBH,OAjB0D,CAA9C,CAAb;;AAmBA,eAASG,IAAT,GAAgB;AACZ,eAAOJ,MAAM,CAAC7I,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOgJ,IAAP;AACH,KAzBM;AA0BP;;;;;AA5BD,GA10BiC,EA22BjC;AACCnL,IAAAA,GAAG,EAAE,OADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIsO,MAAM,GAAG,CAAC,GAAG7P,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASoK,SAAT,GAAqB;AACvG,eAAOlQ,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASiK,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAC/J,IAAX,GAAkB+J,UAAU,CAAC9J,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,KAAKrC,KAAL,CAAWlB,MAAX,KAAsB,QAAxB,CAAJ,EAAuC;AACnCqN,kBAAAA,UAAU,CAAC9J,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED8J,gBAAAA,UAAU,CAAC9J,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBC,UAAtB,CAAiC,cAAjC,EAAiD;AAAEC,kBAAAA,UAAU,EAAE,KAAK7H;AAAnB,iBAAjD,CAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAOsN,UAAU,CAAC7I,MAAX,CAAkB,QAAlB,EAA4B,IAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAO6I,UAAU,CAACvJ,IAAX,EAAP;AAfR;AAiBH;AACJ,SApBM,EAoBJqJ,SApBI,EAoBO,IApBP,CAAP;AAqBH,OAtB0D,CAA9C,CAAb;;AAwBA,eAASG,KAAT,GAAiB;AACb,eAAOJ,MAAM,CAAClJ,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOqJ,KAAP;AACH,KA9BM;AA+BP;;;;;;AAjCD,GA32BiC,EAk5BjC;AACCxL,IAAAA,GAAG,EAAE,cADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI2O,MAAM,GAAG,CAAC,GAAGlQ,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASyK,SAAT,CAAmBrH,MAAnB,EAA2B;AAC7G,eAAOlJ,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASsK,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAACpK,IAAX,GAAkBoK,UAAU,CAACnK,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,CAAC4C,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,EAAEA,MAAM,YAAYnH,QAAQ,CAAC2O,MAA7B,CAA3C,CAAJ,EAAsF;AAClFD,kBAAAA,UAAU,CAACnK,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,kEAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI,oBAAI,EAAEoF,MAAM,YAAYnH,QAAQ,CAAC2O,MAA7B,CAAJ,EAA0C;AACtCD,kBAAAA,UAAU,CAACnK,IAAX,GAAkB,CAAlB;AACA;AACH;;AAEDmK,gBAAAA,UAAU,CAACnK,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAKnC,aAAL,CAAmBwM,WAAnB,CAA+BzH,MAAM,CAACpG,GAAtC,CAAP;;AAEJ,mBAAK,CAAL;AACI2N,gBAAAA,UAAU,CAACnK,IAAX,GAAkB,CAAlB;AACA;;AAEJ,mBAAK,CAAL;AACImK,gBAAAA,UAAU,CAACnK,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAKnC,aAAL,CAAmByM,gBAAnB,CAAoC1H,MAApC,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOuH,UAAU,CAAC5J,IAAX,EAAP;AA5BR;AA8BH;AACJ,SAjCM,EAiCJ0J,SAjCI,EAiCO,IAjCP,CAAP;AAkCH,OAnC0D,CAA9C,CAAb;;AAqCA,eAASM,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,eAAOR,MAAM,CAACvJ,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAO6J,YAAP;AACH,KA3CM;AA4CP;;;;;;;;AA9CD,GAl5BiC,EAw8BjC;AACChM,IAAAA,GAAG,EAAE,aADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIoP,MAAM,GAAG,CAAC,GAAG3Q,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASkL,SAAT,CAAmBrM,OAAnB,EAA4BsM,iBAA5B,EAA+C;AACjI,YAAItE,QAAJ,EAAcuE,SAAd;;AAEA,eAAOlR,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASiL,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAC/K,IAAX,GAAkB+K,UAAU,CAAC9K,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,OAAO3B,OAAP,KAAmB,WAArB,CAAJ,EAAuC;AACnCyM,kBAAAA,UAAU,CAAC9K,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,+BAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI,oBAAI,EAAE,OAAOa,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA7C,CAAJ,EAAwD;AACpDyM,kBAAAA,UAAU,CAAC9K,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED8K,gBAAAA,UAAU,CAAC9K,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7B,cAAL,CAAoB4M,IAApB,CAAyB1M,OAAzB,EAAkCsM,iBAAlC,CAAP;;AAEJ,mBAAK,CAAL;AACItE,gBAAAA,QAAQ,GAAGyE,UAAU,CAACrE,IAAtB;AACA,uBAAOqE,UAAU,CAAC7J,MAAX,CAAkB,QAAlB,EAA4BtF,MAAM,CAACqP,aAAP,CAAqB3E,QAAQ,CAAC4E,SAA9B,CAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACIH,gBAAAA,UAAU,CAAC9K,IAAX,GAAkB,EAAlB;AACA,uBAAO,KAAK7B,cAAL,CAAoB+M,SAApB,CAA8B7M,OAA9B,EAAuCsM,iBAAvC,CAAP;;AAEJ,mBAAK,EAAL;AACIC,gBAAAA,SAAS,GAAGE,UAAU,CAACrE,IAAvB;AACA,uBAAOqE,UAAU,CAAC7J,MAAX,CAAkB,QAAlB,EAA4BtF,MAAM,CAACqP,aAAP,CAAqBJ,SAAS,CAACK,SAA/B,CAA5B,CAAP;;AAEJ,mBAAK,EAAL;AACA,mBAAK,KAAL;AACI,uBAAOH,UAAU,CAACvK,IAAX,EAAP;AAhCR;AAkCH;AACJ,SArCM,EAqCJmK,SArCI,EAqCO,IArCP,CAAP;AAsCH,OAzC0D,CAA9C,CAAb;;AA2CA,eAASS,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC7B,eAAOZ,MAAM,CAAChK,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOyK,WAAP;AACH,KAjDM;AAkDP;;;;;AApDD,GAx8BiC,EAigCjC;AACC5M,IAAAA,GAAG,EAAE,wBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIiQ,MAAM,GAAG,CAAC,GAAGxR,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS+L,SAAT,GAAqB;AACvG,YAAIC,YAAJ;AACA,eAAO9R,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS6L,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAC3L,IAAX,GAAkB2L,UAAU,CAAC1L,IAArC;AACI,mBAAK,CAAL;AACI0L,gBAAAA,UAAU,CAAC1L,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAKQ,iBAAL,EAAP;;AAEJ,mBAAK,CAAL;AACIkL,gBAAAA,UAAU,CAAC1L,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAKwF,WAAL,CAAiB,CAAjB,CAAP;;AAEJ,mBAAK,CAAL;AACIgG,gBAAAA,YAAY,GAAGE,UAAU,CAACjF,IAA1B;;AAEA,oBAAI,EAAE+E,YAAY,CAACG,KAAb,CAAmBxJ,MAAnB,GAA4B,CAA9B,CAAJ,EAAsC;AAClCuJ,kBAAAA,UAAU,CAAC1L,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,uBAAO0L,UAAU,CAACzK,MAAX,CAAkB,QAAlB,EAA4B,KAAK4C,+BAAL,CAAqC2H,YAAY,CAACG,KAAb,CAAmB,CAAnB,EAAsB3J,KAA3D,CAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAO0J,UAAU,CAACzK,MAAX,CAAkB,QAAlB,EAA4BrH,SAAS,CAACqB,OAAV,CAAkB2Q,OAAlB,CAA0B,CAA1B,CAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOF,UAAU,CAACnL,IAAX,EAAP;AAxBR;AA0BH;AACJ,SA7BM,EA6BJgL,SA7BI,EA6BO,IA7BP,CAAP;AA8BH,OAhC0D,CAA9C,CAAb;;AAkCA,eAASM,sBAAT,GAAkC;AAC9B,eAAOP,MAAM,CAAC7K,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOmL,sBAAP;AACH,KAxCM;AAyCP;;;;;AA3CD,GAjgCiC,EAijCjC;AACCtN,IAAAA,GAAG,EAAE,uBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIyQ,MAAM,GAAG,CAAC,GAAGhS,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASuM,SAAT,GAAqB;AACvG,eAAOrS,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASoM,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAClM,IAAX,GAAkBkM,UAAU,CAACjM,IAArC;AACI,mBAAK,CAAL;AACIiM,gBAAAA,UAAU,CAACjM,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAKQ,iBAAL,EAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAOyL,UAAU,CAAChL,MAAX,CAAkB,QAAlB,EAA4B,KAAK9D,QAAL,CAAcwG,kBAAd,CAAiCuI,wCAAjC,CAA0E,KAAK1P,GAA/E,EAAoF,IAApF,CAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOyP,UAAU,CAAC1L,IAAX,EAAP;AAVR;AAYH;AACJ,SAfM,EAeJwL,SAfI,EAeO,IAfP,CAAP;AAgBH,OAjB0D,CAA9C,CAAb;;AAmBA,eAASI,qBAAT,GAAiC;AAC7B,eAAOL,MAAM,CAACrL,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOyL,qBAAP;AACH,KAzBM;AA0BP;;;;;;AA5BD,GAjjCiC,EAmlCjC;AACC5N,IAAAA,GAAG,EAAE,0BADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI+Q,MAAM,GAAG,CAAC,GAAGtS,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS6M,SAAT,CAAmB9P,iBAAnB,EAAsC;AACxH,eAAO7C,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS0M,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAACxM,IAAX,GAAkBwM,UAAU,CAACvM,IAArC;AACI,mBAAK,CAAL;AACI,oBAAIzD,iBAAJ,EAAuB;AACnBgQ,kBAAAA,UAAU,CAACvM,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,kCAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI+O,gBAAAA,UAAU,CAACvM,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBC,UAAtB,CAAiC,uBAAjC,EAA0D;AAAEC,kBAAAA,UAAU,EAAE,KAAK7H,GAAnB;AAAwBD,kBAAAA,iBAAiB,EAAEA;AAA3C,iBAA1D,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOgQ,UAAU,CAAChM,IAAX,EAAP;AAfR;AAiBH;AACJ,SApBM,EAoBJ8L,SApBI,EAoBO,IApBP,CAAP;AAqBH,OAtB0D,CAA9C,CAAb;;AAwBA,eAASG,wBAAT,CAAkCC,IAAlC,EAAwC;AACpC,eAAOL,MAAM,CAAC3L,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAO8L,wBAAP;AACH,KA9BM;AA+BP;;;;;;AAjCD,GAnlCiC,EA0nCjC;AACCjO,IAAAA,GAAG,EAAE,QADN;AAEClD,IAAAA,KAAK,EAAE,SAASqR,MAAT,GAAkB;AACrB,aAAO,KAAKvP,QAAL,CAAcwP,eAAd,CAA8B5B,IAA9B,CAAmC,KAAKvO,GAAxC,CAAP;AACH;AACD;;;;;;AALD,GA1nCiC,EAqoCjC;AACC+B,IAAAA,GAAG,EAAE,kBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIuR,MAAM,GAAG,CAAC,GAAG9S,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASqN,SAAT,CAAmB5Q,UAAnB,EAA+B;AACjH,eAAOvC,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASkN,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAChN,IAAX,GAAkBgN,UAAU,CAAC/M,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,OAAO/D,UAAP,KAAsB,WAAxB,CAAJ,EAA0C;AACtC8Q,kBAAAA,UAAU,CAAC/M,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,kCAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI,oBAAI,EAAEvB,UAAU,KAAK,IAAjB,CAAJ,EAA4B;AACxB8Q,kBAAAA,UAAU,CAAC/M,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,2BAAV,CAAN;;AAEJ,mBAAK,CAAL;AACI,oBAAI,EAAEvB,UAAU,CAAC+Q,WAAX,KAA2B9R,MAA7B,CAAJ,EAA0C;AACtC6R,kBAAAA,UAAU,CAAC/M,IAAX,GAAkB,EAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,yCAAV,CAAN;;AAEJ,mBAAK,EAAL;AACIuP,gBAAAA,UAAU,CAAC/M,IAAX,GAAkB,EAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBC,UAAtB,CAAiC,gBAAjC,EAAmD;AACtDC,kBAAAA,UAAU,EAAE,KAAK7H,GADqC;AAEtDP,kBAAAA,UAAU,EAAE,CAAC,GAAG/B,WAAW,CAACe,OAAhB,EAAyBgB,UAAzB;AAF0C,iBAAnD,CAAP;;AAKJ,mBAAK,EAAL;AACI,uBAAO8Q,UAAU,CAAC9L,MAAX,CAAkB,QAAlB,EAA4B,IAA5B,CAAP;;AAEJ,mBAAK,EAAL;AACA,mBAAK,KAAL;AACI,uBAAO8L,UAAU,CAACxM,IAAX,EAAP;AArCR;AAuCH;AACJ,SA1CM,EA0CJsM,SA1CI,EA0CO,IA1CP,CAAP;AA2CH,OA5C0D,CAA9C,CAAb;;AA8CA,eAASI,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,eAAON,MAAM,CAACnM,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOuM,gBAAP;AACH,KApDM;AAqDP;;;;;;AAvDD,GAroCiC,EAksCjC;AACC1O,IAAAA,GAAG,EAAE,oBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI8R,MAAM,GAAG,CAAC,GAAGrT,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS4N,SAAT,CAAmBC,IAAnB,EAAyB;AAC3G,eAAO3T,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS0N,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAACxN,IAAX,GAAkBwN,UAAU,CAACvN,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,KAAKrC,KAAL,CAAWtB,YAAX,KAA4BgR,IAA9B,CAAJ,EAAyC;AACrCE,kBAAAA,UAAU,CAACvN,IAAX,GAAkB,CAAlB;AACA;AACH;;AAEDuN,gBAAAA,UAAU,CAACvN,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBC,UAAtB,CAAiC,kBAAjC,EAAqD;AACxDC,kBAAAA,UAAU,EAAE,KAAK7H,GADuC;AAExDH,kBAAAA,YAAY,EAAEgR;AAF0C,iBAArD,CAAP;;AAKJ,mBAAK,CAAL;AACI,uBAAOE,UAAU,CAACtM,MAAX,CAAkB,QAAlB,EAA4B,IAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOsM,UAAU,CAAChN,IAAX,EAAP;AAlBR;AAoBH;AACJ,SAvBM,EAuBJ6M,SAvBI,EAuBO,IAvBP,CAAP;AAwBH,OAzB0D,CAA9C,CAAb;;AA2BA,eAASI,kBAAT,CAA4BC,IAA5B,EAAkC;AAC9B,eAAON,MAAM,CAAC1M,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAO8M,kBAAP;AACH,KAjCM;AAkCP;;;;;;;AApCD,GAlsCiC,EA6uCjC;AACCjP,IAAAA,GAAG,EAAE,gCADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIqS,MAAM,GAAG,CAAC,GAAG5T,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASmO,SAAT,CAAmB3L,KAAnB,EAA0B;AAC5G,eAAOtI,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASgO,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAC9N,IAAX,GAAkB8N,UAAU,CAAC7N,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,CAAC,GAAG5F,WAAW,CAACa,OAAhB,EAAyB+G,KAAzB,KAAmCA,KAAK,KAAK,IAAjD,EAAuD;AACnD6L,kBAAAA,UAAU,CAAC7N,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,sBAAM,IAAIxC,KAAJ,CAAU,6DAAV,CAAN;;AAEJ,mBAAK,CAAL;AACIqQ,gBAAAA,UAAU,CAAC7N,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAKQ,iBAAL,EAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAOqN,UAAU,CAAC5M,MAAX,CAAkB,QAAlB,EAA4B,KAAK9D,QAAL,CAAcwG,kBAAd,CAAiCuI,wCAAjC,CAA0E,KAAK1P,GAA/E,EAAoFwF,KAApF,CAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAO6L,UAAU,CAACtN,IAAX,EAAP;AAlBR;AAoBH;AACJ,SAvBM,EAuBJoN,SAvBI,EAuBO,IAvBP,CAAP;AAwBH,OAzB0D,CAA9C,CAAb;;AA2BA,eAASG,8BAAT,CAAwCC,IAAxC,EAA8C;AAC1C,eAAOL,MAAM,CAACjN,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOoN,8BAAP;AACH,KAjCM;AAkCP;;;;;;AApCD,GA7uCiC,EAuxCjC;AACCvP,IAAAA,GAAG,EAAE,kBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI2S,MAAM,GAAG,CAAC,GAAGlU,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAASyO,SAAT,CAAmBtR,UAAnB,EAA+B;AACjH,eAAOjD,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAASsO,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAACpO,IAAX,GAAkBoO,UAAU,CAACnO,IAArC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAE,KAAKrC,KAAL,CAAWhB,UAAX,KAA0BA,UAA5B,CAAJ,EAA6C;AACzCwR,kBAAAA,UAAU,CAACnO,IAAX,GAAkB,CAAlB;AACA;AACH;;AAED,oBAAI,CAACrD,UAAL,EAAiB;AACbA,kBAAAA,UAAU,GAAG,EAAb;AACH;;AACDwR,gBAAAA,UAAU,CAACnO,IAAX,GAAkB,CAAlB;AACA,uBAAO,KAAK7C,QAAL,CAAcgH,OAAd,CAAsBC,UAAtB,CAAiC,gBAAjC,EAAmD;AACtDC,kBAAAA,UAAU,EAAE,KAAK7H,GADqC;AAEtDG,kBAAAA,UAAU,EAAEA;AAF0C,iBAAnD,CAAP;;AAKJ,mBAAK,CAAL;AACI,uBAAOwR,UAAU,CAAClN,MAAX,CAAkB,QAAlB,EAA4B,IAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOkN,UAAU,CAAC5N,IAAX,EAAP;AArBR;AAuBH;AACJ,SA1BM,EA0BJ0N,SA1BI,EA0BO,IA1BP,CAAP;AA2BH,OA5B0D,CAA9C,CAAb;;AA8BA,eAASG,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,eAAOL,MAAM,CAACvN,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAO0N,gBAAP;AACH,KApCM;AAqCP;;;;;AAvCD,GAvxCiC,EAm0CjC;AACC7P,IAAAA,GAAG,EAAE,oBADN;AAEClD,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIiT,MAAM,GAAG,CAAC,GAAGxU,kBAAkB,CAACmB,OAAvB,GAAiC,aAAavB,aAAa,CAACuB,OAAd,CAAsBuE,IAAtB,CAA2B,SAAS+O,SAAT,GAAqB;AACvG,eAAO7U,aAAa,CAACuB,OAAd,CAAsB2E,IAAtB,CAA2B,SAAS4O,UAAT,CAAoBC,UAApB,EAAgC;AAC9D,iBAAO,CAAP,EAAU;AACN,oBAAQA,UAAU,CAAC1O,IAAX,GAAkB0O,UAAU,CAACzO,IAArC;AACI,mBAAK,CAAL;AACI,uBAAOyO,UAAU,CAACxN,MAAX,CAAkB,QAAlB,EAA4B,KAAK9D,QAAL,CAAcuR,KAAd,CAAoBC,yBAApB,CAA8C,KAAKnS,GAAnD,CAA5B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOiS,UAAU,CAAClO,IAAX,EAAP;AANR;AAQH;AACJ,SAXM,EAWJgO,SAXI,EAWO,IAXP,CAAP;AAYH,OAb0D,CAA9C,CAAb;;AAeA,eAASK,kBAAT,GAA8B;AAC1B,eAAON,MAAM,CAAC7N,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACH;;AAED,aAAOkO,kBAAP;AACH,KArBM;AAFR,GAn0CiC,EA21CjC;AACCrQ,IAAAA,GAAG,EAAE,QADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWlB,MAAlB;AACH;AAJF,GA31CiC,EAg2CjC;AACC8B,IAAAA,GAAG,EAAE,MADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWjB,IAAlB;AACH;AAJF,GAh2CiC,EAq2CjC;AACC6B,IAAAA,GAAG,EAAE,YADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWhB,UAAlB;AACH;AAJF,GAr2CiC,EA02CjC;AACC4B,IAAAA,GAAG,EAAE,WADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWjB,IAAX,KAAoB,SAA3B;AACH;AAJF,GA12CiC,EA+2CjC;AACC6B,IAAAA,GAAG,EAAE,cADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWtB,YAAlB;AACH;AAJF,GA/2CiC,EAo3CjC;AACCkC,IAAAA,GAAG,EAAE,aADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWvB,WAAlB;AACH;AAJF,GAp3CiC,EAy3CjC;AACCmC,IAAAA,GAAG,EAAE,aADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWxB,WAAlB;AACH;AAJF,GAz3CiC,EA83CjC;AACCoC,IAAAA,GAAG,EAAE,WADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWzB,SAAlB;AACH;AAJF,GA93CiC,EAm4CjC;AACCqC,IAAAA,GAAG,EAAE,YADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAW1B,UAAlB;AACH;AAJF,GAn4CiC,EAw4CjC;AACCsC,IAAAA,GAAG,EAAE,0BADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWrB,wBAAlB;AACH;AAJF,GAx4CiC,EA64CjC;AACCiC,IAAAA,GAAG,EAAE,aADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAW3B,WAAlB;AACH;AAJF,GA74CiC,EAk5CjC;AACCuC,IAAAA,GAAG,EAAE,mBADN;AAECwI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKpJ,KAAL,CAAWpB,iBAAlB;AACH;AAJF,GAl5CiC,CAApC,EAu5CI,CAAC;AACDgC,IAAAA,GAAG,EAAE,kBADJ;AAEDlD,IAAAA,KAAK,EAAE,SAASsG,gBAAT,CAA0BF,MAA1B,EAAkC4C,UAAlC,EAA8C;AACjD,UAAI;AACA,YAAI,OAAO5C,MAAM,CAACxF,UAAd,KAA6B,QAAjC,EAA2C;AACvCwF,UAAAA,MAAM,CAACxF,UAAP,GAAoB4S,IAAI,CAACC,KAAL,CAAWrN,MAAM,CAACxF,UAAlB,CAApB;AACH,SAFD,MAEO,IAAIwF,MAAM,CAACxF,UAAX,EAAuB;AAC1B,WAAC,GAAG/B,WAAW,CAACe,OAAhB,EAAyBwG,MAAM,CAACxF,UAAhC;AACH;AACJ,OAND,CAME,OAAOc,CAAP,EAAU;AACRnB,QAAAA,GAAG,CAACmT,IAAJ,CAAS,iEAAiE1K,UAA1E;AACA5C,QAAAA,MAAM,CAACxF,UAAP,GAAoB,EAApB;AACH;;AACD,UAAI;AACA,YAAIwF,MAAM,CAACtF,WAAX,EAAwB;AACpBsF,UAAAA,MAAM,CAACtF,WAAP,GAAqB,IAAIW,IAAJ,CAAS2E,MAAM,CAACtF,WAAhB,CAArB;AACH;AACJ,OAJD,CAIE,OAAOY,CAAP,EAAU;AACRnB,QAAAA,GAAG,CAACmT,IAAJ,CAAS,kEAAkE1K,UAA3E;AACA,eAAO5C,MAAM,CAACtF,WAAd;AACH;;AACD,UAAI;AACA,YAAIsF,MAAM,CAACrF,WAAX,EAAwB;AACpBqF,UAAAA,MAAM,CAACrF,WAAP,GAAqB,IAAIU,IAAJ,CAAS2E,MAAM,CAACrF,WAAhB,CAArB;AACH;AACJ,OAJD,CAIE,OAAOW,CAAP,EAAU;AACRnB,QAAAA,GAAG,CAACmT,IAAJ,CAAS,kEAAkE1K,UAA3E;AACA,eAAO5C,MAAM,CAACrF,WAAd;AACH;;AACD,UAAI;AACA,YAAIqF,MAAM,CAACzF,WAAP,IAAsByF,MAAM,CAACzF,WAAP,CAAmBiG,SAA7C,EAAwD;AACpDR,UAAAA,MAAM,CAACzF,WAAP,CAAmBiG,SAAnB,GAA+B,IAAInF,IAAJ,CAAS2E,MAAM,CAACzF,WAAP,CAAmBiG,SAA5B,CAA/B;AACH;AACJ,OAJD,CAIE,OAAOlF,CAAP,EAAU;AACRnB,QAAAA,GAAG,CAACmT,IAAJ,CAAS,4EAA4E1K,UAArF;AACA,eAAO5C,MAAM,CAACzF,WAAP,CAAmBiG,SAA1B;AACH;AACJ;AArCA,GAAD,CAv5CJ;AA87CA,SAAOhF,OAAP;AACH,CAlhDa,CAkhDZ3B,QAAQ,CAAC0T,YAlhDG,CAAd;;AAohDA5T,OAAO,CAAC6B,OAAR,GAAkBA,OAAlB;AACA;;;;;;AAKA;;;;;;AAKA;;;;;;;;AAOA;;;;;;AAKA;;;;;;AAKA;;;;;;;;AAOA;;;;;;AAKA;;;;;;AAKA;;;;;;;;;;AASA","sourcesContent":["\"use strict\";\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"./logger\");\nvar members_1 = require(\"./data/members\");\nvar member_1 = require(\"./member\");\nvar messages_1 = require(\"./data/messages\");\nvar util_1 = require(\"./util\");\nvar log = logger_1.Logger.scope('Channel');\nvar fieldMappings = {\n    lastMessage: 'lastMessage',\n    attributes: 'attributes',\n    createdBy: 'createdBy',\n    dateCreated: 'dateCreated',\n    dateUpdated: 'dateUpdated',\n    friendlyName: 'friendlyName',\n    lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n    notificationLevel: 'notificationLevel',\n    sid: 'sid',\n    status: 'status',\n    type: 'type',\n    uniqueName: 'uniqueName'\n};\nfunction parseTime(timeString) {\n    try {\n        return new Date(timeString);\n    } catch (e) {\n        return null;\n    }\n}\nfunction filterStatus(status) {\n    switch (status) {\n        case 'notParticipating':\n            return 'known';\n        default:\n            return status;\n    }\n}\nexports.filterStatus = filterStatus;\n/**\n * @classdesc A Channel represents a remote channel of communication between multiple Programmable Chat Clients\n * @property {Object} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created this Channel\n * @property {Date} dateCreated - The Date this Channel was created\n * @property {Date} dateUpdated - The Date this Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Channel\n * @property {Channel#LastMessage} lastMessage - Last Message sent to this Channel\n * @property {Channel#NotificationLevel} notificationLevel - User Notification level for this Channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name (tag)\n * @fires Channel#memberJoined\n * @fires Channel#memberLeft\n * @fires Channel#memberUpdated\n * @fires Channel#messageAdded\n * @fires Channel#messageRemoved\n * @fires Channel#messageUpdated\n * @fires Channel#typingEnded\n * @fires Channel#typingStarted\n * @fires Channel#updated\n * @fires Channel#removed\n */\n\nvar Channel = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Channel, _events_1$EventEmitte);\n\n    /**\n     * These options can be passed to {@link Channel#sendMessage}.\n     * @typedef {Object} Channel#SendMediaOptions\n     * @property {String} contentType - content type of media\n     * @property {String | Buffer} media - content to post\n     */\n    /**\n     * The update reason for <code>updated</code> event emitted on Channel\n     * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n      'friendlyName' | 'lastConsumedMessageIndex' | 'status' | 'uniqueName' | 'lastMessage' |\n      'notificationLevel' )} Channel#UpdateReason\n     */\n    /**\n     * The status of the Channel, relative to the Client: whether the Channel\n     * is <code>known</code> to local Client, Client is <code>invited</code> to or\n     * is <code>joined</code> to this Channel\n     * @typedef {('unknown' | 'known' | 'invited' | 'joined')} Channel#Status\n     */\n    /**\n     * The type of Channel (<code>public</code> or <code>private</code>).\n     * @typedef {('public' | 'private')} Channel#Type\n     */\n    /**\n     * The User's Notification level for Channel, determines whether the currently logged-in User will receive\n     * pushes for events in this Channel. Can be either <code>muted</code> or <code>default</code>,\n     * where <code>default</code> defers to global Service push configuration.\n     * @typedef {('default' | 'muted')} Channel#NotificationLevel\n     */\n    function Channel(services, descriptor, sid) {\n        (0, _classCallCheck3.default)(this, Channel);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Channel.__proto__ || (0, _getPrototypeOf2.default)(Channel)).call(this));\n\n        var attributes = descriptor.attributes || {};\n        var createdBy = descriptor.createdBy;\n        var dateCreated = parseTime(descriptor.dateCreated);\n        var dateUpdated = parseTime(descriptor.dateUpdated);\n        var friendlyName = descriptor.friendlyName || null;\n        var lastConsumedMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n        var uniqueName = descriptor.uniqueName || null;\n        try {\n            (0, _stringify2.default)(attributes);\n        } catch (e) {\n            throw new Error('Attributes must be a valid JSON object.');\n        }\n        _this.services = services;\n        _this.sid = sid;\n        _this.entityName = descriptor.channel;\n        _this.state = {\n            uniqueName: uniqueName,\n            status: 'known',\n            type: descriptor.type,\n            attributes: attributes,\n            createdBy: createdBy,\n            dateCreated: dateCreated,\n            dateUpdated: dateUpdated,\n            friendlyName: friendlyName,\n            lastConsumedMessageIndex: lastConsumedMessageIndex\n        };\n        if (descriptor.notificationLevel) {\n            _this.state.notificationLevel = descriptor.notificationLevel;\n        }\n        _this.members = new _map2.default();\n        _this.membersEntity = new members_1.Members(_this, _this.services, _this.members);\n        _this.membersEntity.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n        _this.membersEntity.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n        _this.membersEntity.on('memberUpdated', function (args) {\n            return _this.emit('memberUpdated', args);\n        });\n        _this.messagesEntity = new messages_1.Messages(_this, services);\n        _this.messagesEntity.on('messageAdded', function (message) {\n            return _this._onMessageAdded(message);\n        });\n        _this.messagesEntity.on('messageUpdated', function (args) {\n            return _this.emit('messageUpdated', args);\n        });\n        _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n        return _this;\n    }\n\n    (0, _createClass3.default)(Channel, [{\n        key: \"_subscribe\",\n\n        /**\n         * The Channel's last message's information.\n         * @typedef {Object} Channel#LastMessage\n         * @property {Number} index - Message's index\n         * @property {Date} timestamp - Message's creation timestamp\n         */\n        /**\n         * Load and Subscribe to this Channel and do not subscribe to its Members and Messages.\n         * This or _subscribeStreams will need to be called before any events on Channel will fire.\n         * @returns {Promise}\n         * @private\n         */\n        value: function _subscribe() {\n            var _this2 = this;\n\n            if (this.entityPromise) {\n                return this.entityPromise;\n            }\n            return this.entityPromise = this.entityPromise || this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' }).then(function (entity) {\n                _this2.entity = entity;\n                _this2.entity.on('updated', function (args) {\n                    _this2._update(args.value);\n                });\n                _this2.entity.on('removed', function () {\n                    return _this2.emit('removed', _this2);\n                });\n                _this2._update(_this2.entity.value);\n                return entity;\n            }).catch(function (err) {\n                _this2.entity = null;\n                _this2.entityPromise = null;\n                if (_this2.services.syncClient.connectionState != 'disconnected') {\n                    log.error('Failed to get channel object', err);\n                }\n                log.debug('ERROR: Failed to get channel object', err);\n                throw err;\n            });\n        }\n        /**\n         * Load the attributes of this Channel and instantiate its Members and Messages.\n         * This or _subscribe will need to be called before any events on Channel will fire.\n         * This will need to be called before any events on Members or Messages will fire\n         * @returns {Promise}\n         * @private\n         */\n\n    }, {\n        key: \"_subscribeStreams\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var messagesObjectName, rosterObjectName;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this._subscribe();\n\n                            case 3:\n                                log.trace('_subscribeStreams, this.entity.value=', this.entity.value);\n                                messagesObjectName = this.entity.value.messages;\n                                rosterObjectName = this.entity.value.roster;\n                                _context.next = 8;\n                                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.membersEntity.subscribe(rosterObjectName)]);\n\n                            case 8:\n                                _context.next = 15;\n                                break;\n\n                            case 10:\n                                _context.prev = 10;\n                                _context.t0 = _context[\"catch\"](0);\n\n                                if (this.services.syncClient.connectionState !== 'disconnected') {\n                                    log.error('Failed to subscribe on channel objects', this.sid, _context.t0);\n                                }\n                                log.debug('ERROR: Failed to subscribe on channel objects', this.sid, _context.t0);\n                                throw _context.t0;\n\n                            case 15:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this, [[0, 10]]);\n            }));\n\n            function _subscribeStreams() {\n                return _ref.apply(this, arguments);\n            }\n\n            return _subscribeStreams;\n        }()\n        /**\n         * Stop listening for and firing events on this Channel.\n         * @returns {Promise}\n         * @private\n         */\n\n    }, {\n        key: \"_unsubscribe\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                if (!(this.isPrivate && this.entity)) {\n                                    _context2.next = 5;\n                                    break;\n                                }\n\n                                _context2.next = 3;\n                                return this.entity.close();\n\n                            case 3:\n                                this.entity = null;\n                                this.entityPromise = null;\n\n                            case 5:\n                                return _context2.abrupt(\"return\", _promise2.default.all([this.membersEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n                            case 6:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function _unsubscribe() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return _unsubscribe;\n        }()\n        /**\n         * Set channel status\n         * @private\n         */\n\n    }, {\n        key: \"_setStatus\",\n        value: function _setStatus(status, source) {\n            var _this3 = this;\n\n            this.statusSource = source;\n            if (this.state.status === status) {\n                return;\n            }\n            this.state.status = status;\n            if (status === 'joined') {\n                this._subscribeStreams().catch(function (err) {\n                    log.debug('ERROR while setting channel status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            } else if (status === 'invited') {\n                this._subscribe().catch(function (err) {\n                    log.debug('ERROR while setting channel status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            } else if (this.entityPromise) {\n                this._unsubscribe().catch(function (err) {\n                    log.debug('ERROR while setting channel status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            }\n        }\n        /**\n         * If channel's status update source\n         * @private\n         * @return {Channels.DataSource}\n         */\n\n    }, {\n        key: \"_statusSource\",\n        value: function _statusSource() {\n            return this.statusSource;\n        }\n    }, {\n        key: \"_update\",\n\n        /**\n         * Updates local channel object with new values\n         * @private\n         */\n        value: function _update(update) {\n            log.trace('_update', update);\n            var updateReasons = [];\n            Channel.preprocessUpdate(update, this.sid);\n            for (var key in update) {\n                var localKey = fieldMappings[key];\n                if (!localKey) {\n                    continue;\n                }\n                if (localKey === fieldMappings.status) {\n                    if (update.status && update.status != 'unknown' && this.state.status !== filterStatus(update.status)) {\n                        this.state.status = filterStatus(update.status);\n                        updateReasons.push(localKey);\n                    }\n                } else if (localKey === fieldMappings.attributes) {\n                    if (!util_1.isDeepEqual(this.state.attributes, update.attributes)) {\n                        this.state.attributes = update.attributes;\n                        updateReasons.push(localKey);\n                    }\n                } else if (localKey === fieldMappings.lastConsumedMessageIndex) {\n                    if (!(typeof update.lastConsumedMessageIndex === 'undefined') && update.lastConsumedMessageIndex !== this.state.lastConsumedMessageIndex) {\n                        this.state.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n                        updateReasons.push(localKey);\n                    }\n                } else if (localKey === fieldMappings.lastMessage) {\n                    var updated = false;\n                    if (this.state.lastMessage && !update.lastMessage) {\n                        delete this.state.lastMessage;\n                        updated = true;\n                    } else {\n                        if (!this.state.lastMessage) {\n                            this.state.lastMessage = {};\n                        }\n                        if (update.lastMessage && typeof update.lastMessage.index !== 'undefined' && update.lastMessage.index !== this.state.lastMessage.index) {\n                            this.state.lastMessage.index = update.lastMessage.index;\n                            updated = true;\n                        }\n                        if (update.lastMessage && update.lastMessage.timestamp && (!this.state.lastMessage.timestamp || this.state.lastMessage.timestamp.getTime() !== update.lastMessage.timestamp.getTime())) {\n                            this.state.lastMessage.timestamp = update.lastMessage.timestamp;\n                            updated = true;\n                        }\n                        if (util_1.isDeepEqual(this.state.lastMessage, {})) {\n                            delete this.state.lastMessage;\n                        }\n                    }\n                    if (updated) {\n                        updateReasons.push(localKey);\n                    }\n                } else if (update[key] instanceof Date) {\n                    if (!this.state[localKey] || this.state[localKey].getTime() !== update[key].getTime()) {\n                        this.state[localKey] = update[key];\n                        updateReasons.push(localKey);\n                    }\n                } else if (this[localKey] !== update[key]) {\n                    this.state[localKey] = update[key];\n                    updateReasons.push(localKey);\n                }\n            }\n            if (updateReasons.length > 0) {\n                this.emit('updated', { channel: this, updateReasons: updateReasons });\n            }\n        }\n        /**\n         * @private\n         */\n\n    }, {\n        key: \"_onMessageAdded\",\n        value: function _onMessageAdded(message) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(this.members.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var member = _step.value;\n\n                    if (member.identity === message.author) {\n                        member._endTyping();\n                        break;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            this.emit('messageAdded', message);\n        }\n        /**\n         * Add a participant to the Channel by its Identity.\n         * @param {String} identity - Identity of the Client to add\n         * @returns {Promise<void|Error|SessionError>}\n         */\n\n    }, {\n        key: \"add\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity) {\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                if (!(!identity || typeof identity !== 'string')) {\n                                    _context3.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Channel.add requires an <String>identity parameter');\n\n                            case 2:\n                                return _context3.abrupt(\"return\", this.membersEntity.add(identity));\n\n                            case 3:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function add(_x) {\n                return _ref3.apply(this, arguments);\n            }\n\n            return add;\n        }()\n        /**\n         * Advance last consumed Channel's Message index to current consumption horizon.\n         * Rejects if User is not Member of Channel.\n         * Last consumed Message index is updated only if new index value is higher than previous.\n         * @param {Number} index - Message index to advance to as last read\n         * @returns {Promise<number|Error|SessionError>} resulting unread messages count in the channel\n         */\n\n    }, {\n        key: \"advanceLastConsumedMessageIndex\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(index) {\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                if ((0, _isInteger2.default)(index)) {\n                                    _context4.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Channel.advanceLastConsumedMessageIndex requires an integral <Number>index parameter');\n\n                            case 2:\n                                _context4.next = 4;\n                                return this._subscribeStreams();\n\n                            case 4:\n                                return _context4.abrupt(\"return\", this.services.consumptionHorizon.advanceLastConsumedMessageIndexForChannel(this.sid, index, this.lastConsumedMessageIndex));\n\n                            case 5:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function advanceLastConsumedMessageIndex(_x2) {\n                return _ref4.apply(this, arguments);\n            }\n\n            return advanceLastConsumedMessageIndex;\n        }()\n        /**\n         * Decline an invitation to the Channel and unsubscribe from its events.\n         * @returns {Promise<Channel|SessionError>}\n         */\n\n    }, {\n        key: \"decline\",\n        value: function () {\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                _context5.next = 2;\n                                return this.services.session.addCommand('declineInvitation', {\n                                    channelSid: this.sid\n                                });\n\n                            case 2:\n                                return _context5.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function decline() {\n                return _ref5.apply(this, arguments);\n            }\n\n            return decline;\n        }()\n        /**\n         * Delete the Channel and unsubscribe from its events.\n         * @returns {Promise<Channel|SessionError>}\n         */\n\n    }, {\n        key: \"delete\",\n        value: function () {\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\n                    while (1) {\n                        switch (_context6.prev = _context6.next) {\n                            case 0:\n                                _context6.next = 2;\n                                return this.services.session.addCommand('destroyChannel', {\n                                    channelSid: this.sid\n                                });\n\n                            case 2:\n                                return _context6.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context6.stop();\n                        }\n                    }\n                }, _callee6, this);\n            }));\n\n            function _delete() {\n                return _ref6.apply(this, arguments);\n            }\n\n            return _delete;\n        }()\n        /**\n         * Get the custom attributes of this Channel.<br/>\n         *\n         * <i>NOTE: {@link Channel}'s <code>attributes</code> property will be empty for public channels until this function is called.</i>\n         * @returns {Promise<Object>}\n         */\n\n    }, {\n        key: \"getAttributes\",\n        value: function () {\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\n                    while (1) {\n                        switch (_context7.prev = _context7.next) {\n                            case 0:\n                                _context7.next = 2;\n                                return this._subscribe();\n\n                            case 2:\n                                return _context7.abrupt(\"return\", this.attributes);\n\n                            case 3:\n                            case \"end\":\n                                return _context7.stop();\n                        }\n                    }\n                }, _callee7, this);\n            }));\n\n            function getAttributes() {\n                return _ref7.apply(this, arguments);\n            }\n\n            return getAttributes;\n        }()\n        /**\n         * Returns messages from channel using paginator interface.\n         * @param {Number} [pageSize=30] Number of messages to return in single chunk\n         * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n         * @param {String} [direction=backwards] - Query direction. By default it query backwards\n         *                                         from newer to older. 'forward' will query in opposite direction\n         * @returns {Promise<Paginator<Message>>} page of messages\n         */\n\n    }, {\n        key: \"getMessages\",\n        value: function () {\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(pageSize, anchor, direction) {\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\n                    while (1) {\n                        switch (_context8.prev = _context8.next) {\n                            case 0:\n                                if (!(typeof anchor !== 'undefined' && !(0, _isInteger2.default)(anchor))) {\n                                    _context8.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Anchor should be a valid message index');\n\n                            case 2:\n                                _context8.next = 4;\n                                return this._subscribeStreams();\n\n                            case 4:\n                                return _context8.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n                            case 5:\n                            case \"end\":\n                                return _context8.stop();\n                        }\n                    }\n                }, _callee8, this);\n            }));\n\n            function getMessages(_x3, _x4, _x5) {\n                return _ref8.apply(this, arguments);\n            }\n\n            return getMessages;\n        }()\n        /**\n         * Get a list of all Members joined to this Channel.\n         * @returns {Promise<Array<Member>>}\n         */\n\n    }, {\n        key: \"getMembers\",\n        value: function () {\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\n                    while (1) {\n                        switch (_context9.prev = _context9.next) {\n                            case 0:\n                                _context9.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context9.abrupt(\"return\", this.membersEntity.getMembers());\n\n                            case 3:\n                            case \"end\":\n                                return _context9.stop();\n                        }\n                    }\n                }, _callee9, this);\n            }));\n\n            function getMembers() {\n                return _ref9.apply(this, arguments);\n            }\n\n            return getMembers;\n        }()\n        /**\n         * Get channel members count.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any UI badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number|Error>}\n         */\n\n    }, {\n        key: \"getMembersCount\",\n        value: function () {\n            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee10$(_context10) {\n                    while (1) {\n                        switch (_context10.prev = _context10.next) {\n                            case 0:\n                                _context10.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context10.sent;\n                                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                                _context10.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context10.sent;\n                                return _context10.abrupt(\"return\", response.body.members_count);\n\n                            case 8:\n                            case \"end\":\n                                return _context10.stop();\n                        }\n                    }\n                }, _callee10, this);\n            }));\n\n            function getMembersCount() {\n                return _ref10.apply(this, arguments);\n            }\n\n            return getMembersCount;\n        }()\n        /**\n         * Get a Member by its SID.\n         * @param {String} memberSid - Member sid\n         * @returns {Promise<Member>}\n         */\n\n    }, {\n        key: \"getMemberBySid\",\n        value: function () {\n            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(memberSid) {\n                return _regenerator2.default.wrap(function _callee11$(_context11) {\n                    while (1) {\n                        switch (_context11.prev = _context11.next) {\n                            case 0:\n                                if (!(!memberSid || typeof memberSid !== 'string')) {\n                                    _context11.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Channel.getMemberBySid requires a <String>memberSid parameter');\n\n                            case 2:\n                                return _context11.abrupt(\"return\", this.membersEntity.getMemberBySid(memberSid));\n\n                            case 3:\n                            case \"end\":\n                                return _context11.stop();\n                        }\n                    }\n                }, _callee11, this);\n            }));\n\n            function getMemberBySid(_x6) {\n                return _ref11.apply(this, arguments);\n            }\n\n            return getMemberBySid;\n        }()\n        /**\n         * Get a Member by its identity.\n         * @param {String} identity - Member identity\n         * @returns {Promise<Member>}\n         */\n\n    }, {\n        key: \"getMemberByIdentity\",\n        value: function () {\n            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(identity) {\n                return _regenerator2.default.wrap(function _callee12$(_context12) {\n                    while (1) {\n                        switch (_context12.prev = _context12.next) {\n                            case 0:\n                                if (!(!identity || typeof identity !== 'string')) {\n                                    _context12.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Channel.getMemberByIdentity requires a <String>identity parameter');\n\n                            case 2:\n                                return _context12.abrupt(\"return\", this.membersEntity.getMemberByIdentity(identity));\n\n                            case 3:\n                            case \"end\":\n                                return _context12.stop();\n                        }\n                    }\n                }, _callee12, this);\n            }));\n\n            function getMemberByIdentity(_x7) {\n                return _ref12.apply(this, arguments);\n            }\n\n            return getMemberByIdentity;\n        }()\n        /**\n         * Get total message count in a channel.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any UI badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number|Error>}\n         */\n\n    }, {\n        key: \"getMessagesCount\",\n        value: function () {\n            var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee13$(_context13) {\n                    while (1) {\n                        switch (_context13.prev = _context13.next) {\n                            case 0:\n                                _context13.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context13.sent;\n                                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                                _context13.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context13.sent;\n                                return _context13.abrupt(\"return\", response.body.messages_count);\n\n                            case 8:\n                            case \"end\":\n                                return _context13.stop();\n                        }\n                    }\n                }, _callee13, this);\n            }));\n\n            function getMessagesCount() {\n                return _ref13.apply(this, arguments);\n            }\n\n            return getMessagesCount;\n        }()\n        /**\n         * Get unconsumed messages count for User if he is Member of this Channel.\n         * Rejects if User is not Member of Channel.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any “unread messages count” badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number|Error>}\n         */\n\n    }, {\n        key: \"getUnconsumedMessagesCount\",\n        value: function () {\n            var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee14$(_context14) {\n                    while (1) {\n                        switch (_context14.prev = _context14.next) {\n                            case 0:\n                                _context14.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context14.sent;\n                                url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\n                                _context14.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context14.sent;\n\n                                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {\n                                    _context14.next = 11;\n                                    break;\n                                }\n\n                                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {\n                                    _context14.next = 10;\n                                    break;\n                                }\n\n                                return _context14.abrupt(\"return\", response.body.channels[0].unread_messages_count);\n\n                            case 10:\n                                return _context14.abrupt(\"return\", null);\n\n                            case 11:\n                                throw new Error('Channel is not in user channels list');\n\n                            case 12:\n                            case \"end\":\n                                return _context14.stop();\n                        }\n                    }\n                }, _callee14, this);\n            }));\n\n            function getUnconsumedMessagesCount() {\n                return _ref14.apply(this, arguments);\n            }\n\n            return getUnconsumedMessagesCount;\n        }()\n        /**\n         * Invite a user to the Channel by their Identity.\n         * @param {String} identity - Identity of the user to invite\n         * @returns {Promise<void|Error|SessionError>}\n         */\n\n    }, {\n        key: \"invite\",\n        value: function () {\n            var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(identity) {\n                return _regenerator2.default.wrap(function _callee15$(_context15) {\n                    while (1) {\n                        switch (_context15.prev = _context15.next) {\n                            case 0:\n                                if (!(typeof identity !== 'string' || !identity.length)) {\n                                    _context15.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Channel.invite requires an <String>identity parameter');\n\n                            case 2:\n                                _context15.next = 4;\n                                return this.membersEntity.invite(identity);\n\n                            case 4:\n                            case \"end\":\n                                return _context15.stop();\n                        }\n                    }\n                }, _callee15, this);\n            }));\n\n            function invite(_x8) {\n                return _ref15.apply(this, arguments);\n            }\n\n            return invite;\n        }()\n        /**\n         * Join the Channel and subscribe to its events.\n         * @returns {Promise<Channel|SessionError>}\n         */\n\n    }, {\n        key: \"join\",\n        value: function () {\n            var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {\n                return _regenerator2.default.wrap(function _callee16$(_context16) {\n                    while (1) {\n                        switch (_context16.prev = _context16.next) {\n                            case 0:\n                                _context16.next = 2;\n                                return this.services.session.addCommand('joinChannelV2', { channelSid: this.sid });\n\n                            case 2:\n                                return _context16.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context16.stop();\n                        }\n                    }\n                }, _callee16, this);\n            }));\n\n            function join() {\n                return _ref16.apply(this, arguments);\n            }\n\n            return join;\n        }()\n        /**\n         * Leave the Channel.\n         * @returns {Promise<Channel|SessionError>}\n         */\n\n    }, {\n        key: \"leave\",\n        value: function () {\n            var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17() {\n                return _regenerator2.default.wrap(function _callee17$(_context17) {\n                    while (1) {\n                        switch (_context17.prev = _context17.next) {\n                            case 0:\n                                if (!(this.state.status === 'joined')) {\n                                    _context17.next = 3;\n                                    break;\n                                }\n\n                                _context17.next = 3;\n                                return this.services.session.addCommand('leaveChannel', { channelSid: this.sid });\n\n                            case 3:\n                                return _context17.abrupt(\"return\", this);\n\n                            case 4:\n                            case \"end\":\n                                return _context17.stop();\n                        }\n                    }\n                }, _callee17, this);\n            }));\n\n            function leave() {\n                return _ref17.apply(this, arguments);\n            }\n\n            return leave;\n        }()\n        /**\n         * Remove a Member from the Channel.\n         * @param {String} member - identity of member to remove\n         * @returns {Promise<void|Error|SessionError>}\n         */\n\n    }, {\n        key: \"removeMember\",\n        value: function () {\n            var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(member) {\n                return _regenerator2.default.wrap(function _callee18$(_context18) {\n                    while (1) {\n                        switch (_context18.prev = _context18.next) {\n                            case 0:\n                                if (!(!member || typeof member !== 'string' && !(member instanceof member_1.Member))) {\n                                    _context18.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Channel.removeMember requires a <String|Member>member parameter.');\n\n                            case 2:\n                                if (!(member instanceof member_1.Member)) {\n                                    _context18.next = 7;\n                                    break;\n                                }\n\n                                _context18.next = 5;\n                                return this.membersEntity.removeBySid(member.sid);\n\n                            case 5:\n                                _context18.next = 9;\n                                break;\n\n                            case 7:\n                                _context18.next = 9;\n                                return this.membersEntity.removeByIdentity(member);\n\n                            case 9:\n                            case \"end\":\n                                return _context18.stop();\n                        }\n                    }\n                }, _callee18, this);\n            }));\n\n            function removeMember(_x9) {\n                return _ref18.apply(this, arguments);\n            }\n\n            return removeMember;\n        }()\n        /**\n         * Send a Message in the Channel.\n         * @param {String | FormData | Channel#SendMediaOptions} message - The message body for text message,\n         * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n         * @param {Object} messageAttributes - attributes for the message\n         * @returns {Promise<number|Error|SessionError>} new Message's index in the Channel's messages list\n         */\n\n    }, {\n        key: \"sendMessage\",\n        value: function () {\n            var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(message, messageAttributes) {\n                var response, _response;\n\n                return _regenerator2.default.wrap(function _callee19$(_context19) {\n                    while (1) {\n                        switch (_context19.prev = _context19.next) {\n                            case 0:\n                                if (!(typeof message === 'undefined')) {\n                                    _context19.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Message is required parameter');\n\n                            case 2:\n                                if (!(typeof message === 'string' || message === null)) {\n                                    _context19.next = 9;\n                                    break;\n                                }\n\n                                _context19.next = 5;\n                                return this.messagesEntity.send(message, messageAttributes);\n\n                            case 5:\n                                response = _context19.sent;\n                                return _context19.abrupt(\"return\", util_1.parseToNumber(response.messageId));\n\n                            case 9:\n                                _context19.next = 11;\n                                return this.messagesEntity.sendMedia(message, messageAttributes);\n\n                            case 11:\n                                _response = _context19.sent;\n                                return _context19.abrupt(\"return\", util_1.parseToNumber(_response.messageId));\n\n                            case 13:\n                            case \"end\":\n                                return _context19.stop();\n                        }\n                    }\n                }, _callee19, this);\n            }));\n\n            function sendMessage(_x10, _x11) {\n                return _ref19.apply(this, arguments);\n            }\n\n            return sendMessage;\n        }()\n        /**\n         * Set last consumed Channel's Message index to last known Message's index in this Channel.\n         * @returns {Promise<number|SessionError>} resulting unread messages count in the channel\n         */\n\n    }, {\n        key: \"setAllMessagesConsumed\",\n        value: function () {\n            var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {\n                var messagesPage;\n                return _regenerator2.default.wrap(function _callee20$(_context20) {\n                    while (1) {\n                        switch (_context20.prev = _context20.next) {\n                            case 0:\n                                _context20.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                _context20.next = 4;\n                                return this.getMessages(1);\n\n                            case 4:\n                                messagesPage = _context20.sent;\n\n                                if (!(messagesPage.items.length > 0)) {\n                                    _context20.next = 7;\n                                    break;\n                                }\n\n                                return _context20.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\n\n                            case 7:\n                                return _context20.abrupt(\"return\", _promise2.default.resolve(0));\n\n                            case 8:\n                            case \"end\":\n                                return _context20.stop();\n                        }\n                    }\n                }, _callee20, this);\n            }));\n\n            function setAllMessagesConsumed() {\n                return _ref20.apply(this, arguments);\n            }\n\n            return setAllMessagesConsumed;\n        }()\n        /**\n         * Set all messages in the channel unread.\n         * @returns {Promise<number|SessionError>} resulting unread messages count in the channel\n         */\n\n    }, {\n        key: \"setNoMessagesConsumed\",\n        value: function () {\n            var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21() {\n                return _regenerator2.default.wrap(function _callee21$(_context21) {\n                    while (1) {\n                        switch (_context21.prev = _context21.next) {\n                            case 0:\n                                _context21.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context21.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, null));\n\n                            case 3:\n                            case \"end\":\n                                return _context21.stop();\n                        }\n                    }\n                }, _callee21, this);\n            }));\n\n            function setNoMessagesConsumed() {\n                return _ref21.apply(this, arguments);\n            }\n\n            return setNoMessagesConsumed;\n        }()\n        /**\n         * Set User Notification level for this channel.\n         * @param {Channel#NotificationLevel} notificationLevel - The new user notification level\n         * @returns {Promise<void|Error|SessionError>}\n         */\n\n    }, {\n        key: \"setUserNotificationLevel\",\n        value: function () {\n            var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(notificationLevel) {\n                return _regenerator2.default.wrap(function _callee22$(_context22) {\n                    while (1) {\n                        switch (_context22.prev = _context22.next) {\n                            case 0:\n                                if (notificationLevel) {\n                                    _context22.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('notificationLevel can\\'t be null');\n\n                            case 2:\n                                _context22.next = 4;\n                                return this.services.session.addCommand('editNotificationLevel', { channelSid: this.sid, notificationLevel: notificationLevel });\n\n                            case 4:\n                            case \"end\":\n                                return _context22.stop();\n                        }\n                    }\n                }, _callee22, this);\n            }));\n\n            function setUserNotificationLevel(_x12) {\n                return _ref22.apply(this, arguments);\n            }\n\n            return setUserNotificationLevel;\n        }()\n        /**\n         * Send a notification to the server indicating that this Client is currently typing in this Channel.\n         * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n         * @returns {Promise<void|SessionError>}\n         */\n\n    }, {\n        key: \"typing\",\n        value: function typing() {\n            return this.services.typingIndicator.send(this.sid);\n        }\n        /**\n         * Update the Channel's attributes.\n         * @param {Object} attributes - The new attributes object\n         * @returns {Promise<Channel|Error|SessionError>}\n         */\n\n    }, {\n        key: \"updateAttributes\",\n        value: function () {\n            var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(attributes) {\n                return _regenerator2.default.wrap(function _callee23$(_context23) {\n                    while (1) {\n                        switch (_context23.prev = _context23.next) {\n                            case 0:\n                                if (!(typeof attributes === 'undefined')) {\n                                    _context23.next = 4;\n                                    break;\n                                }\n\n                                throw new Error('Attributes is required parameter');\n\n                            case 4:\n                                if (!(attributes === null)) {\n                                    _context23.next = 8;\n                                    break;\n                                }\n\n                                throw new Error('Attributes can\\'t be null');\n\n                            case 8:\n                                if (!(attributes.constructor !== Object)) {\n                                    _context23.next = 10;\n                                    break;\n                                }\n\n                                throw new Error('Attributes must be a valid JSON object.');\n\n                            case 10:\n                                _context23.next = 12;\n                                return this.services.session.addCommand('editAttributes', {\n                                    channelSid: this.sid,\n                                    attributes: (0, _stringify2.default)(attributes)\n                                });\n\n                            case 12:\n                                return _context23.abrupt(\"return\", this);\n\n                            case 13:\n                            case \"end\":\n                                return _context23.stop();\n                        }\n                    }\n                }, _callee23, this);\n            }));\n\n            function updateAttributes(_x13) {\n                return _ref23.apply(this, arguments);\n            }\n\n            return updateAttributes;\n        }()\n        /**\n         * Update the Channel's friendlyName.\n         * @param {String} name - The new Channel friendlyName\n         * @returns {Promise<Channel|SessionError>}\n         */\n\n    }, {\n        key: \"updateFriendlyName\",\n        value: function () {\n            var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(name) {\n                return _regenerator2.default.wrap(function _callee24$(_context24) {\n                    while (1) {\n                        switch (_context24.prev = _context24.next) {\n                            case 0:\n                                if (!(this.state.friendlyName !== name)) {\n                                    _context24.next = 3;\n                                    break;\n                                }\n\n                                _context24.next = 3;\n                                return this.services.session.addCommand('editFriendlyName', {\n                                    channelSid: this.sid,\n                                    friendlyName: name\n                                });\n\n                            case 3:\n                                return _context24.abrupt(\"return\", this);\n\n                            case 4:\n                            case \"end\":\n                                return _context24.stop();\n                        }\n                    }\n                }, _callee24, this);\n            }));\n\n            function updateFriendlyName(_x14) {\n                return _ref24.apply(this, arguments);\n            }\n\n            return updateFriendlyName;\n        }()\n        /**\n         * Set last consumed Channel's Message index to current consumption horizon.\n         * @param {Number|null} index - Message index to set as last read.\n         * If null provided, then the behavior is identical to {@link Channel#setNoMessagesConsumed}\n         * @returns {Promise<number|Error|SessionError>} resulting unread messages count in the channel\n         */\n\n    }, {\n        key: \"updateLastConsumedMessageIndex\",\n        value: function () {\n            var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(index) {\n                return _regenerator2.default.wrap(function _callee25$(_context25) {\n                    while (1) {\n                        switch (_context25.prev = _context25.next) {\n                            case 0:\n                                if ((0, _isInteger2.default)(index) || index === null) {\n                                    _context25.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Incorrect argument \"index\": integer number or null expected');\n\n                            case 2:\n                                _context25.next = 4;\n                                return this._subscribeStreams();\n\n                            case 4:\n                                return _context25.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, index));\n\n                            case 5:\n                            case \"end\":\n                                return _context25.stop();\n                        }\n                    }\n                }, _callee25, this);\n            }));\n\n            function updateLastConsumedMessageIndex(_x15) {\n                return _ref25.apply(this, arguments);\n            }\n\n            return updateLastConsumedMessageIndex;\n        }()\n        /**\n         * Update the Channel's unique name.\n         * @param {String} uniqueName - The new Channel uniqueName\n         * @returns {Promise<Channel|SessionError>}\n         */\n\n    }, {\n        key: \"updateUniqueName\",\n        value: function () {\n            var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(uniqueName) {\n                return _regenerator2.default.wrap(function _callee26$(_context26) {\n                    while (1) {\n                        switch (_context26.prev = _context26.next) {\n                            case 0:\n                                if (!(this.state.uniqueName !== uniqueName)) {\n                                    _context26.next = 4;\n                                    break;\n                                }\n\n                                if (!uniqueName) {\n                                    uniqueName = '';\n                                }\n                                _context26.next = 4;\n                                return this.services.session.addCommand('editUniqueName', {\n                                    channelSid: this.sid,\n                                    uniqueName: uniqueName\n                                });\n\n                            case 4:\n                                return _context26.abrupt(\"return\", this);\n\n                            case 5:\n                            case \"end\":\n                                return _context26.stop();\n                        }\n                    }\n                }, _callee26, this);\n            }));\n\n            function updateUniqueName(_x16) {\n                return _ref26.apply(this, arguments);\n            }\n\n            return updateUniqueName;\n        }()\n        /**\n         * Gets User Descriptors for this channel.\n         * @returns {Promise<Paginator<UserDescriptor>>}\n         */\n\n    }, {\n        key: \"getUserDescriptors\",\n        value: function () {\n            var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27() {\n                return _regenerator2.default.wrap(function _callee27$(_context27) {\n                    while (1) {\n                        switch (_context27.prev = _context27.next) {\n                            case 0:\n                                return _context27.abrupt(\"return\", this.services.users.getChannelUserDescriptors(this.sid));\n\n                            case 1:\n                            case \"end\":\n                                return _context27.stop();\n                        }\n                    }\n                }, _callee27, this);\n            }));\n\n            function getUserDescriptors() {\n                return _ref27.apply(this, arguments);\n            }\n\n            return getUserDescriptors;\n        }()\n    }, {\n        key: \"status\",\n        get: function get() {\n            return this.state.status;\n        }\n    }, {\n        key: \"type\",\n        get: function get() {\n            return this.state.type;\n        }\n    }, {\n        key: \"uniqueName\",\n        get: function get() {\n            return this.state.uniqueName;\n        }\n    }, {\n        key: \"isPrivate\",\n        get: function get() {\n            return this.state.type === 'private';\n        }\n    }, {\n        key: \"friendlyName\",\n        get: function get() {\n            return this.state.friendlyName;\n        }\n    }, {\n        key: \"dateUpdated\",\n        get: function get() {\n            return this.state.dateUpdated;\n        }\n    }, {\n        key: \"dateCreated\",\n        get: function get() {\n            return this.state.dateCreated;\n        }\n    }, {\n        key: \"createdBy\",\n        get: function get() {\n            return this.state.createdBy;\n        }\n    }, {\n        key: \"attributes\",\n        get: function get() {\n            return this.state.attributes;\n        }\n    }, {\n        key: \"lastConsumedMessageIndex\",\n        get: function get() {\n            return this.state.lastConsumedMessageIndex;\n        }\n    }, {\n        key: \"lastMessage\",\n        get: function get() {\n            return this.state.lastMessage;\n        }\n    }, {\n        key: \"notificationLevel\",\n        get: function get() {\n            return this.state.notificationLevel;\n        }\n    }], [{\n        key: \"preprocessUpdate\",\n        value: function preprocessUpdate(update, channelSid) {\n            try {\n                if (typeof update.attributes === 'string') {\n                    update.attributes = JSON.parse(update.attributes);\n                } else if (update.attributes) {\n                    (0, _stringify2.default)(update.attributes);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n                update.attributes = {};\n            }\n            try {\n                if (update.dateCreated) {\n                    update.dateCreated = new Date(update.dateCreated);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n                delete update.dateCreated;\n            }\n            try {\n                if (update.dateUpdated) {\n                    update.dateUpdated = new Date(update.dateUpdated);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n                delete update.dateUpdated;\n            }\n            try {\n                if (update.lastMessage && update.lastMessage.timestamp) {\n                    update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n                delete update.lastMessage.timestamp;\n            }\n        }\n    }]);\n    return Channel;\n}(events_1.EventEmitter);\n\nexports.Channel = Channel;\n/**\n * Fired when a Member has joined the Channel.\n * @event Channel#memberJoined\n * @type {Member}\n */\n/**\n * Fired when a Member has left the Channel.\n * @event Channel#memberLeft\n * @type {Member}\n */\n/**\n * Fired when a Member's fields has been updated.\n * @event Channel#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Channel.\n * @event Channel#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Channel#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Channel#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when a Member has stopped typing.\n * @event Channel#typingEnded\n * @type {Member}\n */\n/**\n * Fired when a Member has started typing.\n * @event Channel#typingStarted\n * @type {Member}\n */\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create | creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Channel#updated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n/**\n * Fired when the Channel was destroyed or currently logged in User has left private Channel\n * @event Channel#removed\n * @type {Channel}\n */"]},"metadata":{},"sourceType":"script"}