{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nexport function getPasscode() {\n  const match = window.location.search.match(/passcode=(.*)&?/);\n  const passcode = match ? match[1] : window.sessionStorage.getItem('passcode');\n  return passcode;\n}\nexport function fetchToken(name, room, passcode) {\n  return fetch(`/token`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      user_identity: name,\n      room_name: room,\n      passcode\n    })\n  });\n}\nexport function verifyPasscode(passcode) {\n  return fetchToken('temp-name', 'temp-room', passcode).then(async res => {\n    const jsonResponse = await res.json();\n\n    if (res.status === 401) {\n      var _jsonResponse$error;\n\n      return {\n        isValid: false,\n        error: (_jsonResponse$error = jsonResponse.error) === null || _jsonResponse$error === void 0 ? void 0 : _jsonResponse$error.message\n      };\n    }\n\n    if (res.ok && jsonResponse.token) {\n      return {\n        isValid: true\n      };\n    }\n  });\n}\nexport function getErrorMessage(message) {\n  switch (message) {\n    case 'passcode incorrect':\n      return 'Passcode is incorrect';\n\n    case 'passcode expired':\n      return 'Passcode has expired';\n\n    default:\n      return message;\n  }\n}\nexport default function usePasscodeAuth() {\n  const history = useHistory();\n  const [user, setUser] = useState(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n  const getToken = useCallback((name, room) => {\n    return fetchToken(name, room, user.passcode).then(async res => {\n      var _json$error;\n\n      if (res.ok) {\n        return res;\n      }\n\n      const json = await res.json();\n      const errorMessage = getErrorMessage(((_json$error = json.error) === null || _json$error === void 0 ? void 0 : _json$error.message) || res.statusText);\n      throw Error(errorMessage);\n    }).then(res => res.json()).then(res => res.token);\n  }, [user]);\n  useEffect(() => {\n    const passcode = getPasscode();\n\n    if (passcode) {\n      verifyPasscode(passcode).then(verification => {\n        if (verification === null || verification === void 0 ? void 0 : verification.isValid) {\n          setUser({\n            passcode\n          });\n          window.sessionStorage.setItem('passcode', passcode);\n          history.replace(window.location.pathname);\n        }\n      }).then(() => setIsAuthReady(true));\n    } else {\n      setIsAuthReady(true);\n    }\n  }, [history]);\n  const signIn = useCallback(passcode => {\n    return verifyPasscode(passcode).then(verification => {\n      if (verification === null || verification === void 0 ? void 0 : verification.isValid) {\n        setUser({\n          passcode\n        });\n        window.sessionStorage.setItem('passcode', passcode);\n      } else {\n        throw new Error(getErrorMessage(verification === null || verification === void 0 ? void 0 : verification.error));\n      }\n    });\n  }, []);\n  const signOut = useCallback(() => {\n    setUser(null);\n    window.sessionStorage.removeItem('passcode');\n    return Promise.resolve();\n  }, []);\n  return {\n    user,\n    isAuthReady,\n    getToken,\n    signIn,\n    signOut\n  };\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/state/usePasscodeAuth/usePasscodeAuth.ts"],"names":["useCallback","useEffect","useState","useHistory","getPasscode","match","window","location","search","passcode","sessionStorage","getItem","fetchToken","name","room","fetch","method","headers","body","JSON","stringify","user_identity","room_name","verifyPasscode","then","res","jsonResponse","json","status","isValid","error","message","ok","token","getErrorMessage","usePasscodeAuth","history","user","setUser","isAuthReady","setIsAuthReady","getToken","errorMessage","statusText","Error","verification","setItem","replace","pathname","signIn","signOut","removeItem","Promise","resolve"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport function getPasscode() {\n  const match = window.location.search.match(/passcode=(.*)&?/);\n  const passcode = match ? match[1] : window.sessionStorage.getItem('passcode');\n  return passcode;\n}\n\nexport function fetchToken(name: string, room: string, passcode: string) {\n  return fetch(`/token`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({ user_identity: name, room_name: room, passcode }),\n  });\n}\n\nexport function verifyPasscode(passcode: string) {\n  return fetchToken('temp-name', 'temp-room', passcode).then(async res => {\n    const jsonResponse = await res.json();\n    if (res.status === 401) {\n      return { isValid: false, error: jsonResponse.error?.message };\n    }\n\n    if (res.ok && jsonResponse.token) {\n      return { isValid: true };\n    }\n  });\n}\n\nexport function getErrorMessage(message: string) {\n  switch (message) {\n    case 'passcode incorrect':\n      return 'Passcode is incorrect';\n    case 'passcode expired':\n      return 'Passcode has expired';\n    default:\n      return message;\n  }\n}\n\nexport default function usePasscodeAuth() {\n  const history = useHistory();\n\n  const [user, setUser] = useState<{ displayName: undefined; photoURL: undefined; passcode: string } | null>(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n\n  const getToken = useCallback(\n    (name: string, room: string) => {\n      return fetchToken(name, room, user!.passcode)\n        .then(async res => {\n          if (res.ok) {\n            return res;\n          }\n          const json = await res.json();\n          const errorMessage = getErrorMessage(json.error?.message || res.statusText);\n          throw Error(errorMessage);\n        })\n        .then(res => res.json())\n        .then(res => res.token as string);\n    },\n    [user]\n  );\n\n  useEffect(() => {\n    const passcode = getPasscode();\n\n    if (passcode) {\n      verifyPasscode(passcode)\n        .then(verification => {\n          if (verification?.isValid) {\n            setUser({ passcode } as any);\n            window.sessionStorage.setItem('passcode', passcode);\n            history.replace(window.location.pathname);\n          }\n        })\n        .then(() => setIsAuthReady(true));\n    } else {\n      setIsAuthReady(true);\n    }\n  }, [history]);\n\n  const signIn = useCallback((passcode: string) => {\n    return verifyPasscode(passcode).then(verification => {\n      if (verification?.isValid) {\n        setUser({ passcode } as any);\n        window.sessionStorage.setItem('passcode', passcode);\n      } else {\n        throw new Error(getErrorMessage(verification?.error));\n      }\n    });\n  }, []);\n\n  const signOut = useCallback(() => {\n    setUser(null);\n    window.sessionStorage.removeItem('passcode');\n    return Promise.resolve();\n  }, []);\n\n  return { user, isAuthReady, getToken, signIn, signOut };\n}\n"]},"metadata":{},"sourceType":"module"}