{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst twilsock_1 = require(\"twilsock\");\n\nconst twilio_notifications_1 = require(\"twilio-notifications\");\n\nconst uri_1 = require(\"./utils/uri\");\n\nconst syncerror_1 = require(\"./utils/syncerror\");\n\nconst sanitize_1 = require(\"./utils/sanitize\");\n\nconst logger_1 = require(\"./utils/logger\");\n\nconst configuration_1 = require(\"./configuration\");\n\nconst subscriptions_1 = require(\"./subscriptions\");\n\nconst router_1 = require(\"./router\");\n\nconst network_1 = require(\"./services/network\");\n\nconst syncdocument_1 = require(\"./syncdocument\");\n\nconst synclist_1 = require(\"./synclist\");\n\nconst syncmap_1 = require(\"./syncmap\");\n\nconst clientInfo_1 = require(\"./clientInfo\");\n\nconst entitiesCache_1 = require(\"./entitiesCache\");\n\nconst storage_1 = require(\"./services/storage\");\n\nconst syncstream_1 = require(\"./streams/syncstream\");\n\nconst livequery_1 = require(\"./livequery\");\n\nconst livequery_2 = require(\"./livequery\");\n\nconst SYNC_PRODUCT_ID = 'data_sync';\n\nconst SDK_VERSION = require('../package.json').version;\n\nfunction decompose(arg) {\n  if (!arg) {\n    return {\n      mode: 'create_new'\n    };\n  } else if (typeof arg === 'string') {\n    return {\n      id: arg,\n      mode: 'open_or_create'\n    };\n  } else {\n    sanitize_1.validateOptionalTtl(arg.ttl);\n    sanitize_1.validateId(arg.id);\n    let mode = arg.mode || (arg.id ? 'open_or_create' : 'create_new');\n    return Object.assign(Object.assign({}, arg), {\n      mode: mode\n    });\n  }\n}\n/**\n * @class Client\n * @classdesc\n * Client for the Twilio Sync service.\n * @constructor\n * @param {String} token - Twilio access token.\n * @param {Client#ClientOptions} [options] - Options to customize the Client.\n * @example\n * // Using NPM\n * var SyncClient = require('twilio-sync');\n * var syncClient = new SyncClient(token, { logLevel: 'debug' });\n *\n * // Using CDN\n * var SyncClient = new Twilio.Sync.Client(token, { logLevel: 'debug' });\n *\n * @property {Client#ConnectionState} connectionState - Contains current service connection state.\n * Valid options are ['connecting', 'connected', 'disconnecting', 'disconnected', 'denied', 'error'].\n */\n\n\nclass Client extends events_1.EventEmitter {\n  constructor(fpaToken, options = {}) {\n    super();\n\n    if (!fpaToken) {\n      throw new Error('Sync library needs a valid Twilio token to be passed');\n    }\n\n    if (options.hasOwnProperty('logLevel')) {\n      logger_1.default.setLevel(options.logLevel);\n    } else {\n      logger_1.default.setLevel('silent');\n    }\n\n    const productId = options.productId = options.productId || SYNC_PRODUCT_ID; // Filling ClientMetadata\n\n    options.clientMetadata = options.clientMetadata || {};\n\n    if (!options.clientMetadata.hasOwnProperty('type')) {\n      options.clientMetadata.type = 'sync';\n    }\n\n    if (!options.clientMetadata.hasOwnProperty('sdk')) {\n      options.clientMetadata.sdk = 'JS';\n      options.clientMetadata.sdkv = SDK_VERSION;\n    }\n\n    let twilsock = options.twilsockClient = options.twilsockClient || new twilsock_1.Twilsock(fpaToken, productId, options);\n    twilsock.on('tokenAboutToExpire', ttl => this.emit('tokenAboutToExpire', ttl));\n    twilsock.on('tokenExpired', () => this.emit('tokenExpired'));\n    twilsock.on('connectionError', err => this.emit('connectionError', err));\n    let notifications = options.notificationsClient = options.notificationsClient || new twilio_notifications_1.Notifications(fpaToken, options);\n    let config = new configuration_1.Configuration(options);\n    let network = new network_1.NetworkService(new clientInfo_1.ClientInfo(SDK_VERSION), config, twilsock);\n    let storage = new storage_1.SessionStorage(config);\n    this.localStorageId = null;\n    twilsock.connect();\n    this.services = {\n      config,\n      twilsock,\n      notifications,\n      network,\n      storage,\n      router: null,\n      subscriptions: null\n    };\n    let subscriptions = new subscriptions_1.Subscriptions(this.services);\n    let router = new router_1.Router({\n      config,\n      subscriptions,\n      notifications\n    });\n    this.services.router = router;\n    this.services.subscriptions = subscriptions;\n    this.entities = new entitiesCache_1.EntitiesCache();\n    notifications.on('connectionStateChanged', () => {\n      this.emit('connectionStateChanged', this.services.notifications.connectionState);\n    });\n  }\n  /**\n   * Current version of Sync client.\n   * @name Client#version\n   * @type String\n   * @readonly\n   */\n\n\n  static get version() {\n    return SDK_VERSION;\n  }\n\n  get connectionState() {\n    return this.services.notifications.connectionState;\n  }\n  /**\n   * Returns promise which resolves when library is correctly initialized\n   * Or throws if initialization is impossible\n   * @private\n   */\n\n\n  async ensureReady() {\n    if (!this.services.config.sessionStorageEnabled) {\n      return;\n    }\n\n    try {\n      let storageSettings = await this.services.twilsock.storageId();\n      this.services.storage.updateStorageId(storageSettings.id);\n    } catch (e) {\n      logger_1.default.warn('Failed to initialize storage', e);\n    }\n  }\n\n  storeRootInSessionCache(type, id, value) {\n    // can't store without id\n    if (!this.services.config.sessionStorageEnabled || !id) {\n      return;\n    }\n\n    let valueToStore = sanitize_1.deepClone(value);\n\n    if (type === synclist_1.SyncList.type || type === syncmap_1.SyncMap.type) {\n      valueToStore['last_event_id'] = null;\n      delete valueToStore['items'];\n    }\n\n    this.services.storage.store(type, id, valueToStore);\n  }\n\n  readRootFromSessionCache(type, id) {\n    if (!this.services.config.sessionStorageEnabled || !id) {\n      return null;\n    }\n\n    return this.services.storage.read(type, id);\n  }\n\n  async _get(baseUri, id, optimistic = false) {\n    if (!id) {\n      throw new syncerror_1.SyncError(`Cannot get entity without id`, 404);\n    }\n\n    const uri = new uri_1.UriBuilder(baseUri).pathSegment(id).queryParam('Include', optimistic ? 'items' : undefined).build();\n    let response = await this.services.network.get(uri);\n    return response.body;\n  }\n\n  _createDocument(id, data, ttl) {\n    const requestBody = {\n      unique_name: id,\n      data: data || {}\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    return this.services.network.post(this.services.config.documentsUri, requestBody).then(response => {\n      response.body.data = requestBody.data;\n      return response.body;\n    });\n  }\n\n  async _getDocument(id) {\n    return this.readRootFromSessionCache(syncdocument_1.SyncDocument.type, id) || this._get(this.services.config.documentsUri, id);\n  }\n\n  _createList(id, purpose, context, ttl) {\n    const requestBody = {\n      unique_name: id,\n      purpose: purpose,\n      context: context\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    return this.services.network.post(this.services.config.listsUri, requestBody).then(response => response.body);\n  }\n\n  async _getList(id) {\n    return this.readRootFromSessionCache(synclist_1.SyncList.type, id) || this._get(this.services.config.listsUri, id);\n  }\n\n  _createMap(id, ttl) {\n    const requestBody = {\n      unique_name: id\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    return this.services.network.post(this.services.config.mapsUri, requestBody).then(response => response.body);\n  }\n\n  async _getMap(id, optimistic = false) {\n    return this.readRootFromSessionCache(syncmap_1.SyncMap.type, id) || this._get(this.services.config.mapsUri, id, optimistic);\n  }\n\n  async _getStream(id) {\n    return this.readRootFromSessionCache(syncstream_1.SyncStream.type, id) || this._get(this.services.config.streamsUri, id, false);\n  }\n\n  async _createStream(id, ttl) {\n    const requestBody = {\n      unique_name: id\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    const response = await this.services.network.post(this.services.config.streamsUri, requestBody);\n    return response.body;\n  }\n\n  _getLiveQuery(sid) {\n    return this.readRootFromSessionCache(livequery_1.LiveQuery.type, sid);\n  }\n\n  getCached(id, type) {\n    if (id) {\n      return this.entities.get(id, type) || null;\n    }\n\n    return null;\n  }\n\n  removeFromCacheAndSession(type, sid, uniqueName) {\n    this.entities.remove(sid);\n\n    if (this.services.config.sessionStorageEnabled) {\n      this.services.storage.remove(type, sid, uniqueName);\n    }\n  }\n  /**\n   * Read or create a Sync Document.\n   * @param {String | Client#OpenOptions} [arg] One of:\n   * <li>Unique name or SID identifying a Sync Document - opens a Document with the given identifier or creates one if it does not exist.</li>\n   * <li>none - creates a new Document with a randomly assigned SID and no unique name.</li>\n   * <li>{@link Client#OpenOptions} object for more granular control.</li>\n   * @return {Promise<Document>} a promise which resolves after the Document is successfully read (or created).\n   * This promise may reject if the Document could not be created or if this endpoint lacks the necessary permissions to access it.\n   * @public\n   * @example\n   * syncClient.document('MyDocument')\n   *   .then(function(document) {\n   *     console.log('Successfully opened a Document. SID: ' + document.sid);\n   *     document.on('updated', function(event) {\n   *       console.log('Received updated event: ', event);\n   *     });\n   *   })\n   *   .catch(function(error) {\n   *     console.log('Unexpected error', error);\n   *   });\n   */\n\n\n  async document(arg) {\n    await this.ensureReady();\n    let opts = decompose(arg);\n    let docDescriptor;\n\n    if (opts.mode === 'create_new') {\n      docDescriptor = await this._createDocument(opts.id, opts.value, opts.ttl);\n    } else {\n      let docFromInMemoryCache = this.getCached(opts.id, syncdocument_1.SyncDocument.type);\n\n      if (docFromInMemoryCache) {\n        return new syncdocument_1.SyncDocument(docFromInMemoryCache);\n      } else {\n        try {\n          docDescriptor = await this._getDocument(opts.id);\n        } catch (err) {\n          if (err.status !== 404 || opts.mode === 'open_existing') {\n            throw err;\n          } else {\n            try {\n              docDescriptor = await this._createDocument(opts.id, opts.value, opts.ttl);\n            } catch (err) {\n              if (err.status === 409) {\n                return this.document(arg);\n              } else {\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this.storeRootInSessionCache(syncdocument_1.SyncDocument.type, opts.id, docDescriptor);\n    let syncDocumentImpl = new syncdocument_1.SyncDocumentImpl(this.services, docDescriptor, (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n    syncDocumentImpl = this.entities.store(syncDocumentImpl);\n    return new syncdocument_1.SyncDocument(syncDocumentImpl);\n  }\n  /**\n   * Read or create a Sync Map.\n   * @param {String | Client#OpenOptions} [arg] One of:\n   * <li>Unique name or SID identifying a Sync Map - opens a Map with the given identifier or creates one if it does not exist.</li>\n   * <li>none - creates a new Map with a randomly assigned SID and no unique name.</li>\n   * <li>{@link Client#OpenOptions} object for more granular control.</li>\n   * @return {Promise<Map>} a promise which resolves after the Map is successfully read (or created).\n   * This promise may reject if the Map could not be created or if this endpoint lacks the necessary permissions to access it.\n   * @public\n   * @example\n   * syncClient.map('MyMap')\n   *   .then(function(map) {\n   *     console.log('Successfully opened a Map. SID: ' + map.sid);\n   *     map.on('itemUpdated', function(event) {\n   *       console.log('Received itemUpdated event: ', event);\n   *     });\n   *   })\n   *   .catch(function(error) {\n   *     console.log('Unexpected error', error);\n   *   });\n   */\n\n\n  async map(arg) {\n    await this.ensureReady();\n    let opts = decompose(arg);\n    let mapDescriptor;\n\n    if (opts.mode === 'create_new') {\n      mapDescriptor = await this._createMap(opts.id, opts.ttl);\n    } else {\n      let mapFromInMemoryCache = this.getCached(opts.id, syncmap_1.SyncMap.type);\n\n      if (mapFromInMemoryCache) {\n        return new syncmap_1.SyncMap(mapFromInMemoryCache);\n      } else {\n        try {\n          mapDescriptor = await this._getMap(opts.id, opts.includeItems);\n        } catch (err) {\n          if (err.status !== 404 || opts.mode === 'open_existing') {\n            throw err;\n          } else {\n            try {\n              mapDescriptor = await this._createMap(opts.id, opts.ttl);\n            } catch (err) {\n              if (err.status === 409) {\n                return this.map(arg);\n              } else {\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this.storeRootInSessionCache(syncmap_1.SyncMap.type, opts.id, mapDescriptor);\n    let syncMapImpl = new syncmap_1.SyncMapImpl(this.services, mapDescriptor, (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n    syncMapImpl = this.entities.store(syncMapImpl);\n    return new syncmap_1.SyncMap(syncMapImpl);\n  }\n  /**\n   * Read or create a Sync List.\n   * @param {String | Client#OpenOptions} [arg] One of:\n   * <li>Unique name or SID identifying a Sync List - opens a List with the given identifier or creates one if it does not exist.</li>\n   * <li>none - creates a new List with a randomly assigned SID and no unique name.</li>\n   * <li>{@link Client#OpenOptions} object for more granular control.</li>\n   * @return {Promise<List>} a promise which resolves after the List is successfully read (or created).\n   * This promise may reject if the List could not be created or if this endpoint lacks the necessary permissions to access it.\n   * @public\n   * @example\n   * syncClient.list('MyList')\n   *   .then(function(list) {\n   *     console.log('Successfully opened a List. SID: ' + list.sid);\n   *     list.on('itemAdded', function(event) {\n   *       console.log('Received itemAdded event: ', event);\n   *     });\n   *   })\n   *   .catch(function(error) {\n   *     console.log('Unexpected error', error);\n   *   });\n   */\n\n\n  async list(arg) {\n    await this.ensureReady();\n    let opts = decompose(arg);\n    let listDescriptor;\n\n    if (opts.mode === 'create_new') {\n      listDescriptor = await this._createList(opts.id, opts.purpose, opts.context, opts.ttl);\n    } else {\n      let listFromInMemoryCache = this.getCached(opts.id, synclist_1.SyncList.type);\n\n      if (listFromInMemoryCache) {\n        return new synclist_1.SyncList(listFromInMemoryCache);\n      } else {\n        try {\n          listDescriptor = await this._getList(opts.id);\n        } catch (err) {\n          if (err.status !== 404 || opts.mode === 'open_existing') {\n            throw err;\n          } else {\n            try {\n              listDescriptor = await this._createList(opts.id, opts.purpose, opts.context, opts.ttl);\n            } catch (err) {\n              if (err.status === 409) {\n                return this.list(arg);\n              } else {\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this.storeRootInSessionCache(synclist_1.SyncList.type, opts.id, listDescriptor);\n    let syncListImpl = new synclist_1.SyncListImpl(this.services, listDescriptor, (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n    syncListImpl = this.entities.store(syncListImpl);\n    return new synclist_1.SyncList(syncListImpl);\n  }\n  /**\n   * Read or create a Sync Message Stream.\n   * @param {String | Client#OpenOptions} [arg] One of:\n   * <li>Unique name or SID identifying a Stream - opens a Stream with the given identifier or creates one if it does not exist.</li>\n   * <li>none - creates a new Stream with a randomly assigned SID and no unique name.</li>\n   * <li>{@link Client#OpenOptions} object for more granular control.</li>\n   * @return {Promise<Stream>} a promise which resolves after the Stream is successfully read (or created).\n   * The flow of messages will begin imminently (but not necessarily immediately) upon resolution.\n   * This promise may reject if the Stream could not be created or if this endpoint lacks the necessary permissions to access it.\n   * @public\n   * @example\n   * syncClient.stream('MyStream')\n   *   .then(function(stream) {\n   *     console.log('Successfully opened a Message Stream. SID: ' + stream.sid);\n   *     stream.on('messagePublished', function(event) {\n   *       console.log('Received messagePublished event: ', event);\n   *     });\n   *   })\n   *   .catch(function(error) {\n   *     console.log('Unexpected error', error);\n   *   });\n   */\n\n\n  async stream(arg) {\n    await this.ensureReady();\n    let opts = decompose(arg);\n    let streamDescriptor;\n\n    if (opts.mode === 'create_new') {\n      streamDescriptor = await this._createStream(opts.id, opts.ttl);\n    } else {\n      let streamFromInMemoryCache = this.getCached(opts.id, syncstream_1.SyncStream.type);\n\n      if (streamFromInMemoryCache) {\n        return new syncstream_1.SyncStream(streamFromInMemoryCache);\n      } else {\n        try {\n          streamDescriptor = await this._getStream(opts.id);\n        } catch (err) {\n          if (err.status !== 404 || opts.mode === 'open_existing') {\n            throw err;\n          } else {\n            try {\n              streamDescriptor = await this._createStream(opts.id, opts.ttl);\n            } catch (err) {\n              if (err.status === 409) {\n                return this.stream(arg);\n              } else {\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this.storeRootInSessionCache(syncstream_1.SyncStream.type, opts.id, streamDescriptor);\n\n    const streamRemovalHandler = (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName);\n\n    let syncStreamImpl = new syncstream_1.SyncStreamImpl(this.services, streamDescriptor, streamRemovalHandler);\n    syncStreamImpl = this.entities.store(syncStreamImpl);\n    return new syncstream_1.SyncStream(syncStreamImpl);\n  }\n  /**\n   * Gracefully shutdown the libray\n   * Currently it is not properly implemented and being used only in tests\n   * But should be made a part of public API\n   * @private\n   */\n\n\n  async shutdown() {\n    await this.services.subscriptions.shutdown();\n    await this.services.twilsock.disconnect();\n  }\n  /**\n   * Set new authentication token.\n   * @param {String} token New token to set.\n   * @return {Promise<void>}\n   * @public\n   */\n\n\n  updateToken(token) {\n    if (!token) {\n      return Promise.reject(new Error('A valid Twilio token should be provided'));\n    }\n\n    return this.services.twilsock.updateToken(token);\n  }\n  /**\n   * For Flex customers only. Establishes a long-running query against Flex data wherein the returned\n   * result set is updated whenever new (or updated) records match the given expression. Updated results\n   * are presented row-by-row according to the lifetime of the returned LiveQuery object.\n   *\n   * @param indexName {String} Must specify one of the Flex data classes for which Live Queries are available.\n   * @param queryExpression {String} A query expression to be executed against the given data index.\n   * Please review <a href=\"https://www.twilio.com/docs/sync/live-query\" target=\"_blank\">Live Query Language</a>\n   * page for Sync Client limits and full list of operators currently supported in query expressions.\n   *\n   * @return {Promise<LiveQuery>} a promise that resolves when the query has been successfully executed.\n   * @public\n   * @example\n   * syncClient.liveQuery('tr-worker', 'data.attributes.worker_name == \"Bob\"')\n   *     .then(function(args) {\n   *        console.log('Subscribed to live data updates for worker Bob');\n   *        let items = args.getItems();\n   *        Object.entries(items).forEach(([key, value]) => {\n   *          console.log('Search result item key: ' + key);\n   *          console.log('Search result item value: ' + value);\n   *        });\n   *     })\n   *     .catch(function(err) {\n   *        console.log('Error when subscribing to live updates for worker Bob', err);\n   *     });\n   */\n\n\n  async liveQuery(indexName, queryExpression) {\n    await this.ensureReady();\n\n    if (!indexName || typeof indexName !== 'string') {\n      throw new Error('Index name must contain a non-empty string value');\n    }\n\n    let queryUri = new uri_1.UriBuilder(this.services.config.insightsUri).pathSegment(indexName).pathSegment('Items').build(); // send query to CDS to get server-generated sid and item list\n\n    let response = await livequery_2.queryItems({\n      network: this.services.network,\n      uri: queryUri,\n      queryString: queryExpression,\n      type: livequery_1.LiveQuery.type\n    });\n    let liveQueryImpl = this.getCached(response.query_id, livequery_1.LiveQuery.type);\n\n    if (!liveQueryImpl) {\n      let descriptor = this._getLiveQuery(response.query_id);\n\n      if (!descriptor) {\n        descriptor = {\n          indexName,\n          queryExpression,\n          sid: response.query_id,\n          queryUri,\n          last_event_id: response.last_event_id\n        };\n      }\n\n      const liveQueryRemovalHandler = (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName);\n\n      liveQueryImpl = new livequery_1.LiveQueryImpl(descriptor, this.services, liveQueryRemovalHandler, response.items);\n    }\n\n    this.storeRootInSessionCache(livequery_1.LiveQuery.type, response.query_id, liveQueryImpl.liveQueryDescriptor);\n    liveQueryImpl = this.entities.store(liveQueryImpl);\n    return new livequery_1.LiveQuery(liveQueryImpl);\n  }\n  /**\n   * For Flex customers only. Creates a query object that can be used to issue one-time queries repeatedly\n   * against the target index.\n   *\n   * @param indexName {String} Must specify one of the Flex data classes for which Live Queries are available.\n   * @return {Promise<InstantQuery>} a promise which resolves after the InstantQuery is successfully created.\n   * @public\n   * @example\n   * syncClient.instantQuery('tr-worker')\n   *    .then(function(q) {\n   *        q.on('searchResult', function(items) {\n   *          Object.entries(items).forEach(([key, value]) => {\n   *             console.log('Search result item key: ' + key);\n   *             console.log('Search result item value: ' + value);\n   *          });\n   *       });\n   *    });\n   */\n\n\n  async instantQuery(indexName) {\n    await this.ensureReady();\n\n    let liveQueryCreator = (indexName, queryExpression) => {\n      return this.liveQuery(indexName, queryExpression);\n    };\n\n    const search = new livequery_1.InstantQuery({\n      indexName,\n      network: this.services.network,\n      insightsUri: this.services.config.insightsUri,\n      liveQueryCreator\n    });\n    return search;\n  }\n\n}\n\nexports.Client = Client;\nexports.SyncClient = Client;\nexports.default = Client;\n/**\n * Indicates current state of connection between the client and Sync service.\n * <p>Valid options are as follows:\n * <li>'connecting' - client is offline and connection attempt is in process.\n * <li>'connected' - client is online and ready.\n * <li>'disconnecting' - client is going offline as disconnection is in process.\n * <li>'disconnected' - client is offline and no connection attempt is in process.\n * <li>'denied' - client connection is denied because of invalid JWT access token. User must refresh token in order to proceed.\n * <li>'error' - client connection is in a permanent erroneous state. Client re-initialization is required.\n * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied'|'error')} Client#ConnectionState\n */\n\n/**\n * These options can be passed to Client constructor.\n * @typedef {Object} Client#ClientOptions\n * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace'].\n */\n\n/**\n * Fired when connection state has been changed.\n * @param {Client#ConnectionState} connectionState Contains current service connection state.\n * @event Client#connectionStateChanged\n * @example\n * syncClient.on('connectionStateChanged', function(newState) {\n *   console.log('Received new connection state: ' + newState);\n * });\n */\n\n/**\n * Fired when connection is interrupted by unexpected reason\n * @property {Object} error - connection error details\n * @property {Boolean} error.terminal - twilsock will stop connection attempts\n * @property {String} error.message - root cause\n * @property {Number} [error.httpStatusCode] - http status code if available\n * @property {Number} [error.errorCode] - Twilio public error code if available\n * @event Client#connectionError\n * @example\n * syncClient.on('connectionError', function(connectionError) {\n *   console.log('Connection was interrupted: ' + connectionError.message +\n *     ' (isTerminal: ' + connectionError.terminal')');\n * });\n */\n\n/**\n * Options for opening a Sync Object.\n * @typedef {Object} Client#OpenOptions\n * @property {String} [id] Sync object SID or unique name.\n * @property {'open_or_create' | 'open_existing' | 'create_new'} [mode='open_or_create'] - The mode for opening the Sync object:\n * <li>'open_or_create' - reads a Sync object or creates one if it does not exist.\n * <li>'open_existing' - reads an existing Sync object. The promise is rejected if the object does not exist.\n * <li>'create_new' - creates a new Sync object. If the <i>id</i> property is specified, it will be used as the unique name.\n * @property {Number} [ttl] - The time-to-live of the Sync object in seconds. This is applied only if the object is created.\n * @property {Object} [value={ }] - The initial value for the Sync Document (only applicable to Documents).\n * @example <caption>The following example is applicable to all Sync objects\n * (i.e., <code>syncClient.document(), syncClient.list(), syncClient.map(), syncClient.stream()</code>)</caption>\n * // Attempts to open an existing Document with unique name 'MyDocument'\n * // If no such Document exists, the promise is rejected\n * syncClient.document({\n *     id: 'MyDocument',\n *     mode: 'open_existing'\n *   })\n *   .then(...)\n *   .catch(...);\n *\n * // Attempts to create a new Document with unique name 'MyDocument', TTL of 24 hours and initial value { name: 'John Smith' }\n * // If such a Document already exists, the promise is rejected\n * syncClient.document({\n *     id: 'MyDocument',\n *     mode: 'create_new',\n *     ttl: 86400\n *     value: { name: 'John Smith' } // the `value` property is only applicable for Documents\n *   })\n *   .then(...)\n *   .catch(...);\n */\n\n/**\n * Fired when the access token is about to expire and needs to be updated.\n * The trigger takes place three minutes before the JWT access token expiry.\n * For long living applications, you should refresh the token when either <code>tokenAboutToExpire</code> or\n * <code>tokenExpired</code> events occur; handling just one of them is sufficient.\n * @event Client#tokenAboutToExpire\n * @type {void}\n * @example <caption>The following example illustrates access token refresh</caption>\n * syncClient.on('tokenAboutToExpire', function() {\n *   // Obtain a JWT access token: https://www.twilio.com/docs/sync/identity-and-access-tokens\n *   var token = '<your-access-token-here>';\n *   syncClient.updateToken(token);\n * });\n */\n\n/**\n * Fired when the access token is expired.\n * In case the token is not refreshed, all subsequent Sync operations will fail and the client will disconnect.\n * For long living applications, you should refresh the token when either <code>tokenAboutToExpire</code> or\n * <code>tokenExpired</code> events occur; handling just one of them is sufficient.\n * @event Client#tokenExpired\n * @type {void}\n */","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-sync/lib/client.js"],"names":["Object","defineProperty","exports","value","events_1","require","twilsock_1","twilio_notifications_1","uri_1","syncerror_1","sanitize_1","logger_1","configuration_1","subscriptions_1","router_1","network_1","syncdocument_1","synclist_1","syncmap_1","clientInfo_1","entitiesCache_1","storage_1","syncstream_1","livequery_1","livequery_2","SYNC_PRODUCT_ID","SDK_VERSION","version","decompose","arg","mode","id","validateOptionalTtl","ttl","validateId","assign","Client","EventEmitter","constructor","fpaToken","options","Error","hasOwnProperty","default","setLevel","logLevel","productId","clientMetadata","type","sdk","sdkv","twilsock","twilsockClient","Twilsock","on","emit","err","notifications","notificationsClient","Notifications","config","Configuration","network","NetworkService","ClientInfo","storage","SessionStorage","localStorageId","connect","services","router","subscriptions","Subscriptions","Router","entities","EntitiesCache","connectionState","ensureReady","sessionStorageEnabled","storageSettings","storageId","updateStorageId","e","warn","storeRootInSessionCache","valueToStore","deepClone","SyncList","SyncMap","store","readRootFromSessionCache","read","_get","baseUri","optimistic","SyncError","uri","UriBuilder","pathSegment","queryParam","undefined","build","response","get","body","_createDocument","data","requestBody","unique_name","post","documentsUri","then","_getDocument","SyncDocument","_createList","purpose","context","listsUri","_getList","_createMap","mapsUri","_getMap","_getStream","SyncStream","streamsUri","_createStream","_getLiveQuery","sid","LiveQuery","getCached","removeFromCacheAndSession","uniqueName","remove","document","opts","docDescriptor","docFromInMemoryCache","status","syncDocumentImpl","SyncDocumentImpl","map","mapDescriptor","mapFromInMemoryCache","includeItems","syncMapImpl","SyncMapImpl","list","listDescriptor","listFromInMemoryCache","syncListImpl","SyncListImpl","stream","streamDescriptor","streamFromInMemoryCache","streamRemovalHandler","syncStreamImpl","SyncStreamImpl","shutdown","disconnect","updateToken","token","Promise","reject","liveQuery","indexName","queryExpression","queryUri","insightsUri","queryItems","queryString","liveQueryImpl","query_id","descriptor","last_event_id","liveQueryRemovalHandler","LiveQueryImpl","items","liveQueryDescriptor","instantQuery","liveQueryCreator","search","InstantQuery","SyncClient"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst twilsock_1 = require(\"twilsock\");\nconst twilio_notifications_1 = require(\"twilio-notifications\");\nconst uri_1 = require(\"./utils/uri\");\nconst syncerror_1 = require(\"./utils/syncerror\");\nconst sanitize_1 = require(\"./utils/sanitize\");\nconst logger_1 = require(\"./utils/logger\");\nconst configuration_1 = require(\"./configuration\");\nconst subscriptions_1 = require(\"./subscriptions\");\nconst router_1 = require(\"./router\");\nconst network_1 = require(\"./services/network\");\nconst syncdocument_1 = require(\"./syncdocument\");\nconst synclist_1 = require(\"./synclist\");\nconst syncmap_1 = require(\"./syncmap\");\nconst clientInfo_1 = require(\"./clientInfo\");\nconst entitiesCache_1 = require(\"./entitiesCache\");\nconst storage_1 = require(\"./services/storage\");\nconst syncstream_1 = require(\"./streams/syncstream\");\nconst livequery_1 = require(\"./livequery\");\nconst livequery_2 = require(\"./livequery\");\nconst SYNC_PRODUCT_ID = 'data_sync';\nconst SDK_VERSION = require('../package.json').version;\nfunction decompose(arg) {\n    if (!arg) {\n        return { mode: 'create_new' };\n    }\n    else if (typeof arg === 'string') {\n        return { id: arg, mode: 'open_or_create' };\n    }\n    else {\n        sanitize_1.validateOptionalTtl(arg.ttl);\n        sanitize_1.validateId(arg.id);\n        let mode = arg.mode || (arg.id ? 'open_or_create' : 'create_new');\n        return Object.assign(Object.assign({}, arg), { mode: mode });\n    }\n}\n/**\n * @class Client\n * @classdesc\n * Client for the Twilio Sync service.\n * @constructor\n * @param {String} token - Twilio access token.\n * @param {Client#ClientOptions} [options] - Options to customize the Client.\n * @example\n * // Using NPM\n * var SyncClient = require('twilio-sync');\n * var syncClient = new SyncClient(token, { logLevel: 'debug' });\n *\n * // Using CDN\n * var SyncClient = new Twilio.Sync.Client(token, { logLevel: 'debug' });\n *\n * @property {Client#ConnectionState} connectionState - Contains current service connection state.\n * Valid options are ['connecting', 'connected', 'disconnecting', 'disconnected', 'denied', 'error'].\n */\nclass Client extends events_1.EventEmitter {\n    constructor(fpaToken, options = {}) {\n        super();\n        if (!fpaToken) {\n            throw new Error('Sync library needs a valid Twilio token to be passed');\n        }\n        if (options.hasOwnProperty('logLevel')) {\n            logger_1.default.setLevel(options.logLevel);\n        }\n        else {\n            logger_1.default.setLevel('silent');\n        }\n        const productId = options.productId = options.productId || SYNC_PRODUCT_ID;\n        // Filling ClientMetadata\n        options.clientMetadata = options.clientMetadata || {};\n        if (!options.clientMetadata.hasOwnProperty('type')) {\n            options.clientMetadata.type = 'sync';\n        }\n        if (!options.clientMetadata.hasOwnProperty('sdk')) {\n            options.clientMetadata.sdk = 'JS';\n            options.clientMetadata.sdkv = SDK_VERSION;\n        }\n        let twilsock = options.twilsockClient = options.twilsockClient || new twilsock_1.Twilsock(fpaToken, productId, options);\n        twilsock.on('tokenAboutToExpire', ttl => this.emit('tokenAboutToExpire', ttl));\n        twilsock.on('tokenExpired', () => this.emit('tokenExpired'));\n        twilsock.on('connectionError', err => this.emit('connectionError', err));\n        let notifications = options.notificationsClient = options.notificationsClient || new twilio_notifications_1.Notifications(fpaToken, options);\n        let config = new configuration_1.Configuration(options);\n        let network = new network_1.NetworkService(new clientInfo_1.ClientInfo(SDK_VERSION), config, twilsock);\n        let storage = new storage_1.SessionStorage(config);\n        this.localStorageId = null;\n        twilsock.connect();\n        this.services = {\n            config,\n            twilsock,\n            notifications,\n            network,\n            storage,\n            router: null,\n            subscriptions: null\n        };\n        let subscriptions = new subscriptions_1.Subscriptions(this.services);\n        let router = new router_1.Router({ config, subscriptions, notifications });\n        this.services.router = router;\n        this.services.subscriptions = subscriptions;\n        this.entities = new entitiesCache_1.EntitiesCache();\n        notifications.on('connectionStateChanged', () => {\n            this.emit('connectionStateChanged', this.services.notifications.connectionState);\n        });\n    }\n    /**\n     * Current version of Sync client.\n     * @name Client#version\n     * @type String\n     * @readonly\n     */\n    static get version() {\n        return SDK_VERSION;\n    }\n    get connectionState() {\n        return this.services.notifications.connectionState;\n    }\n    /**\n     * Returns promise which resolves when library is correctly initialized\n     * Or throws if initialization is impossible\n     * @private\n     */\n    async ensureReady() {\n        if (!this.services.config.sessionStorageEnabled) {\n            return;\n        }\n        try {\n            let storageSettings = await this.services.twilsock.storageId();\n            this.services.storage.updateStorageId(storageSettings.id);\n        }\n        catch (e) {\n            logger_1.default.warn('Failed to initialize storage', e);\n        }\n    }\n    storeRootInSessionCache(type, id, value) {\n        // can't store without id\n        if (!this.services.config.sessionStorageEnabled || !id) {\n            return;\n        }\n        let valueToStore = sanitize_1.deepClone(value);\n        if (type === synclist_1.SyncList.type || type === syncmap_1.SyncMap.type) {\n            valueToStore['last_event_id'] = null;\n            delete valueToStore['items'];\n        }\n        this.services.storage.store(type, id, valueToStore);\n    }\n    readRootFromSessionCache(type, id) {\n        if (!this.services.config.sessionStorageEnabled || !id) {\n            return null;\n        }\n        return this.services.storage.read(type, id);\n    }\n    async _get(baseUri, id, optimistic = false) {\n        if (!id) {\n            throw new syncerror_1.SyncError(`Cannot get entity without id`, 404);\n        }\n        const uri = new uri_1.UriBuilder(baseUri).pathSegment(id)\n            .queryParam('Include', optimistic ? 'items' : undefined).build();\n        let response = await this.services.network.get(uri);\n        return response.body;\n    }\n    _createDocument(id, data, ttl) {\n        const requestBody = {\n            unique_name: id,\n            data: data || {}\n        };\n        if (ttl !== undefined) {\n            requestBody.ttl = ttl;\n        }\n        return this.services.network.post(this.services.config.documentsUri, requestBody)\n            .then(response => {\n            response.body.data = requestBody.data;\n            return response.body;\n        });\n    }\n    async _getDocument(id) {\n        return (this.readRootFromSessionCache(syncdocument_1.SyncDocument.type, id) || this._get(this.services.config.documentsUri, id));\n    }\n    _createList(id, purpose, context, ttl) {\n        const requestBody = {\n            unique_name: id,\n            purpose: purpose,\n            context: context\n        };\n        if (ttl !== undefined) {\n            requestBody.ttl = ttl;\n        }\n        return this.services.network.post(this.services.config.listsUri, requestBody).then(response => response.body);\n    }\n    async _getList(id) {\n        return (this.readRootFromSessionCache(synclist_1.SyncList.type, id) || this._get(this.services.config.listsUri, id));\n    }\n    _createMap(id, ttl) {\n        const requestBody = {\n            unique_name: id\n        };\n        if (ttl !== undefined) {\n            requestBody.ttl = ttl;\n        }\n        return this.services.network.post(this.services.config.mapsUri, requestBody).then(response => response.body);\n    }\n    async _getMap(id, optimistic = false) {\n        return (this.readRootFromSessionCache(syncmap_1.SyncMap.type, id) || this._get(this.services.config.mapsUri, id, optimistic));\n    }\n    async _getStream(id) {\n        return (this.readRootFromSessionCache(syncstream_1.SyncStream.type, id) || this._get(this.services.config.streamsUri, id, false));\n    }\n    async _createStream(id, ttl) {\n        const requestBody = {\n            unique_name: id\n        };\n        if (ttl !== undefined) {\n            requestBody.ttl = ttl;\n        }\n        const response = await this.services.network.post(this.services.config.streamsUri, requestBody);\n        return response.body;\n    }\n    _getLiveQuery(sid) {\n        return this.readRootFromSessionCache(livequery_1.LiveQuery.type, sid);\n    }\n    getCached(id, type) {\n        if (id) {\n            return this.entities.get(id, type) || null;\n        }\n        return null;\n    }\n    removeFromCacheAndSession(type, sid, uniqueName) {\n        this.entities.remove(sid);\n        if (this.services.config.sessionStorageEnabled) {\n            this.services.storage.remove(type, sid, uniqueName);\n        }\n    }\n    /**\n     * Read or create a Sync Document.\n     * @param {String | Client#OpenOptions} [arg] One of:\n     * <li>Unique name or SID identifying a Sync Document - opens a Document with the given identifier or creates one if it does not exist.</li>\n     * <li>none - creates a new Document with a randomly assigned SID and no unique name.</li>\n     * <li>{@link Client#OpenOptions} object for more granular control.</li>\n     * @return {Promise<Document>} a promise which resolves after the Document is successfully read (or created).\n     * This promise may reject if the Document could not be created or if this endpoint lacks the necessary permissions to access it.\n     * @public\n     * @example\n     * syncClient.document('MyDocument')\n     *   .then(function(document) {\n     *     console.log('Successfully opened a Document. SID: ' + document.sid);\n     *     document.on('updated', function(event) {\n     *       console.log('Received updated event: ', event);\n     *     });\n     *   })\n     *   .catch(function(error) {\n     *     console.log('Unexpected error', error);\n     *   });\n     */\n    async document(arg) {\n        await this.ensureReady();\n        let opts = decompose(arg);\n        let docDescriptor;\n        if (opts.mode === 'create_new') {\n            docDescriptor = await this._createDocument(opts.id, opts.value, opts.ttl);\n        }\n        else {\n            let docFromInMemoryCache = this.getCached(opts.id, syncdocument_1.SyncDocument.type);\n            if (docFromInMemoryCache) {\n                return new syncdocument_1.SyncDocument(docFromInMemoryCache);\n            }\n            else {\n                try {\n                    docDescriptor = await this._getDocument(opts.id);\n                }\n                catch (err) {\n                    if (err.status !== 404 || opts.mode === 'open_existing') {\n                        throw err;\n                    }\n                    else {\n                        try {\n                            docDescriptor = await this._createDocument(opts.id, opts.value, opts.ttl);\n                        }\n                        catch (err) {\n                            if (err.status === 409) {\n                                return this.document(arg);\n                            }\n                            else {\n                                throw err;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.storeRootInSessionCache(syncdocument_1.SyncDocument.type, opts.id, docDescriptor);\n        let syncDocumentImpl = new syncdocument_1.SyncDocumentImpl(this.services, docDescriptor, (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n        syncDocumentImpl = this.entities.store(syncDocumentImpl);\n        return new syncdocument_1.SyncDocument(syncDocumentImpl);\n    }\n    /**\n     * Read or create a Sync Map.\n     * @param {String | Client#OpenOptions} [arg] One of:\n     * <li>Unique name or SID identifying a Sync Map - opens a Map with the given identifier or creates one if it does not exist.</li>\n     * <li>none - creates a new Map with a randomly assigned SID and no unique name.</li>\n     * <li>{@link Client#OpenOptions} object for more granular control.</li>\n     * @return {Promise<Map>} a promise which resolves after the Map is successfully read (or created).\n     * This promise may reject if the Map could not be created or if this endpoint lacks the necessary permissions to access it.\n     * @public\n     * @example\n     * syncClient.map('MyMap')\n     *   .then(function(map) {\n     *     console.log('Successfully opened a Map. SID: ' + map.sid);\n     *     map.on('itemUpdated', function(event) {\n     *       console.log('Received itemUpdated event: ', event);\n     *     });\n     *   })\n     *   .catch(function(error) {\n     *     console.log('Unexpected error', error);\n     *   });\n     */\n    async map(arg) {\n        await this.ensureReady();\n        let opts = decompose(arg);\n        let mapDescriptor;\n        if (opts.mode === 'create_new') {\n            mapDescriptor = await this._createMap(opts.id, opts.ttl);\n        }\n        else {\n            let mapFromInMemoryCache = this.getCached(opts.id, syncmap_1.SyncMap.type);\n            if (mapFromInMemoryCache) {\n                return new syncmap_1.SyncMap(mapFromInMemoryCache);\n            }\n            else {\n                try {\n                    mapDescriptor = await this._getMap(opts.id, opts.includeItems);\n                }\n                catch (err) {\n                    if (err.status !== 404 || opts.mode === 'open_existing') {\n                        throw err;\n                    }\n                    else {\n                        try {\n                            mapDescriptor = await this._createMap(opts.id, opts.ttl);\n                        }\n                        catch (err) {\n                            if (err.status === 409) {\n                                return this.map(arg);\n                            }\n                            else {\n                                throw err;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.storeRootInSessionCache(syncmap_1.SyncMap.type, opts.id, mapDescriptor);\n        let syncMapImpl = new syncmap_1.SyncMapImpl(this.services, mapDescriptor, (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n        syncMapImpl = this.entities.store(syncMapImpl);\n        return new syncmap_1.SyncMap(syncMapImpl);\n    }\n    /**\n     * Read or create a Sync List.\n     * @param {String | Client#OpenOptions} [arg] One of:\n     * <li>Unique name or SID identifying a Sync List - opens a List with the given identifier or creates one if it does not exist.</li>\n     * <li>none - creates a new List with a randomly assigned SID and no unique name.</li>\n     * <li>{@link Client#OpenOptions} object for more granular control.</li>\n     * @return {Promise<List>} a promise which resolves after the List is successfully read (or created).\n     * This promise may reject if the List could not be created or if this endpoint lacks the necessary permissions to access it.\n     * @public\n     * @example\n     * syncClient.list('MyList')\n     *   .then(function(list) {\n     *     console.log('Successfully opened a List. SID: ' + list.sid);\n     *     list.on('itemAdded', function(event) {\n     *       console.log('Received itemAdded event: ', event);\n     *     });\n     *   })\n     *   .catch(function(error) {\n     *     console.log('Unexpected error', error);\n     *   });\n     */\n    async list(arg) {\n        await this.ensureReady();\n        let opts = decompose(arg);\n        let listDescriptor;\n        if (opts.mode === 'create_new') {\n            listDescriptor = await this._createList(opts.id, opts.purpose, opts.context, opts.ttl);\n        }\n        else {\n            let listFromInMemoryCache = this.getCached(opts.id, synclist_1.SyncList.type);\n            if (listFromInMemoryCache) {\n                return new synclist_1.SyncList(listFromInMemoryCache);\n            }\n            else {\n                try {\n                    listDescriptor = await this._getList(opts.id);\n                }\n                catch (err) {\n                    if (err.status !== 404 || opts.mode === 'open_existing') {\n                        throw err;\n                    }\n                    else {\n                        try {\n                            listDescriptor = await this._createList(opts.id, opts.purpose, opts.context, opts.ttl);\n                        }\n                        catch (err) {\n                            if (err.status === 409) {\n                                return this.list(arg);\n                            }\n                            else {\n                                throw err;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.storeRootInSessionCache(synclist_1.SyncList.type, opts.id, listDescriptor);\n        let syncListImpl = new synclist_1.SyncListImpl(this.services, listDescriptor, (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName));\n        syncListImpl = this.entities.store(syncListImpl);\n        return new synclist_1.SyncList(syncListImpl);\n    }\n    /**\n     * Read or create a Sync Message Stream.\n     * @param {String | Client#OpenOptions} [arg] One of:\n     * <li>Unique name or SID identifying a Stream - opens a Stream with the given identifier or creates one if it does not exist.</li>\n     * <li>none - creates a new Stream with a randomly assigned SID and no unique name.</li>\n     * <li>{@link Client#OpenOptions} object for more granular control.</li>\n     * @return {Promise<Stream>} a promise which resolves after the Stream is successfully read (or created).\n     * The flow of messages will begin imminently (but not necessarily immediately) upon resolution.\n     * This promise may reject if the Stream could not be created or if this endpoint lacks the necessary permissions to access it.\n     * @public\n     * @example\n     * syncClient.stream('MyStream')\n     *   .then(function(stream) {\n     *     console.log('Successfully opened a Message Stream. SID: ' + stream.sid);\n     *     stream.on('messagePublished', function(event) {\n     *       console.log('Received messagePublished event: ', event);\n     *     });\n     *   })\n     *   .catch(function(error) {\n     *     console.log('Unexpected error', error);\n     *   });\n     */\n    async stream(arg) {\n        await this.ensureReady();\n        let opts = decompose(arg);\n        let streamDescriptor;\n        if (opts.mode === 'create_new') {\n            streamDescriptor = await this._createStream(opts.id, opts.ttl);\n        }\n        else {\n            let streamFromInMemoryCache = this.getCached(opts.id, syncstream_1.SyncStream.type);\n            if (streamFromInMemoryCache) {\n                return new syncstream_1.SyncStream(streamFromInMemoryCache);\n            }\n            else {\n                try {\n                    streamDescriptor = await this._getStream(opts.id);\n                }\n                catch (err) {\n                    if (err.status !== 404 || opts.mode === 'open_existing') {\n                        throw err;\n                    }\n                    else {\n                        try {\n                            streamDescriptor = await this._createStream(opts.id, opts.ttl);\n                        }\n                        catch (err) {\n                            if (err.status === 409) {\n                                return this.stream(arg);\n                            }\n                            else {\n                                throw err;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.storeRootInSessionCache(syncstream_1.SyncStream.type, opts.id, streamDescriptor);\n        const streamRemovalHandler = (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName);\n        let syncStreamImpl = new syncstream_1.SyncStreamImpl(this.services, streamDescriptor, streamRemovalHandler);\n        syncStreamImpl = this.entities.store(syncStreamImpl);\n        return new syncstream_1.SyncStream(syncStreamImpl);\n    }\n    /**\n     * Gracefully shutdown the libray\n     * Currently it is not properly implemented and being used only in tests\n     * But should be made a part of public API\n     * @private\n     */\n    async shutdown() {\n        await this.services.subscriptions.shutdown();\n        await this.services.twilsock.disconnect();\n    }\n    /**\n     * Set new authentication token.\n     * @param {String} token New token to set.\n     * @return {Promise<void>}\n     * @public\n     */\n    updateToken(token) {\n        if (!token) {\n            return Promise.reject(new Error('A valid Twilio token should be provided'));\n        }\n        return this.services.twilsock.updateToken(token);\n    }\n    /**\n     * For Flex customers only. Establishes a long-running query against Flex data wherein the returned\n     * result set is updated whenever new (or updated) records match the given expression. Updated results\n     * are presented row-by-row according to the lifetime of the returned LiveQuery object.\n     *\n     * @param indexName {String} Must specify one of the Flex data classes for which Live Queries are available.\n     * @param queryExpression {String} A query expression to be executed against the given data index.\n     * Please review <a href=\"https://www.twilio.com/docs/sync/live-query\" target=\"_blank\">Live Query Language</a>\n     * page for Sync Client limits and full list of operators currently supported in query expressions.\n     *\n     * @return {Promise<LiveQuery>} a promise that resolves when the query has been successfully executed.\n     * @public\n     * @example\n     * syncClient.liveQuery('tr-worker', 'data.attributes.worker_name == \"Bob\"')\n     *     .then(function(args) {\n     *        console.log('Subscribed to live data updates for worker Bob');\n     *        let items = args.getItems();\n     *        Object.entries(items).forEach(([key, value]) => {\n     *          console.log('Search result item key: ' + key);\n     *          console.log('Search result item value: ' + value);\n     *        });\n     *     })\n     *     .catch(function(err) {\n     *        console.log('Error when subscribing to live updates for worker Bob', err);\n     *     });\n     */\n    async liveQuery(indexName, queryExpression) {\n        await this.ensureReady();\n        if (!indexName || typeof indexName !== 'string') {\n            throw new Error('Index name must contain a non-empty string value');\n        }\n        let queryUri = new uri_1.UriBuilder(this.services.config.insightsUri)\n            .pathSegment(indexName)\n            .pathSegment('Items')\n            .build();\n        // send query to CDS to get server-generated sid and item list\n        let response = await livequery_2.queryItems({\n            network: this.services.network,\n            uri: queryUri,\n            queryString: queryExpression,\n            type: livequery_1.LiveQuery.type\n        });\n        let liveQueryImpl = this.getCached(response.query_id, livequery_1.LiveQuery.type);\n        if (!liveQueryImpl) {\n            let descriptor = this._getLiveQuery(response.query_id);\n            if (!descriptor) {\n                descriptor = {\n                    indexName,\n                    queryExpression,\n                    sid: response.query_id,\n                    queryUri,\n                    last_event_id: response.last_event_id\n                };\n            }\n            const liveQueryRemovalHandler = (type, sid, uniqueName) => this.removeFromCacheAndSession(type, sid, uniqueName);\n            liveQueryImpl = new livequery_1.LiveQueryImpl(descriptor, this.services, liveQueryRemovalHandler, response.items);\n        }\n        this.storeRootInSessionCache(livequery_1.LiveQuery.type, response.query_id, liveQueryImpl.liveQueryDescriptor);\n        liveQueryImpl = this.entities.store(liveQueryImpl);\n        return new livequery_1.LiveQuery(liveQueryImpl);\n    }\n    /**\n     * For Flex customers only. Creates a query object that can be used to issue one-time queries repeatedly\n     * against the target index.\n     *\n     * @param indexName {String} Must specify one of the Flex data classes for which Live Queries are available.\n     * @return {Promise<InstantQuery>} a promise which resolves after the InstantQuery is successfully created.\n     * @public\n     * @example\n     * syncClient.instantQuery('tr-worker')\n     *    .then(function(q) {\n     *        q.on('searchResult', function(items) {\n     *          Object.entries(items).forEach(([key, value]) => {\n     *             console.log('Search result item key: ' + key);\n     *             console.log('Search result item value: ' + value);\n     *          });\n     *       });\n     *    });\n     */\n    async instantQuery(indexName) {\n        await this.ensureReady();\n        let liveQueryCreator = (indexName, queryExpression) => {\n            return this.liveQuery(indexName, queryExpression);\n        };\n        const search = new livequery_1.InstantQuery({\n            indexName,\n            network: this.services.network,\n            insightsUri: this.services.config.insightsUri,\n            liveQueryCreator\n        });\n        return search;\n    }\n}\nexports.Client = Client;\nexports.SyncClient = Client;\nexports.default = Client;\n/**\n * Indicates current state of connection between the client and Sync service.\n * <p>Valid options are as follows:\n * <li>'connecting' - client is offline and connection attempt is in process.\n * <li>'connected' - client is online and ready.\n * <li>'disconnecting' - client is going offline as disconnection is in process.\n * <li>'disconnected' - client is offline and no connection attempt is in process.\n * <li>'denied' - client connection is denied because of invalid JWT access token. User must refresh token in order to proceed.\n * <li>'error' - client connection is in a permanent erroneous state. Client re-initialization is required.\n * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied'|'error')} Client#ConnectionState\n */\n/**\n * These options can be passed to Client constructor.\n * @typedef {Object} Client#ClientOptions\n * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace'].\n */\n/**\n * Fired when connection state has been changed.\n * @param {Client#ConnectionState} connectionState Contains current service connection state.\n * @event Client#connectionStateChanged\n * @example\n * syncClient.on('connectionStateChanged', function(newState) {\n *   console.log('Received new connection state: ' + newState);\n * });\n */\n/**\n * Fired when connection is interrupted by unexpected reason\n * @property {Object} error - connection error details\n * @property {Boolean} error.terminal - twilsock will stop connection attempts\n * @property {String} error.message - root cause\n * @property {Number} [error.httpStatusCode] - http status code if available\n * @property {Number} [error.errorCode] - Twilio public error code if available\n * @event Client#connectionError\n * @example\n * syncClient.on('connectionError', function(connectionError) {\n *   console.log('Connection was interrupted: ' + connectionError.message +\n *     ' (isTerminal: ' + connectionError.terminal')');\n * });\n */\n/**\n * Options for opening a Sync Object.\n * @typedef {Object} Client#OpenOptions\n * @property {String} [id] Sync object SID or unique name.\n * @property {'open_or_create' | 'open_existing' | 'create_new'} [mode='open_or_create'] - The mode for opening the Sync object:\n * <li>'open_or_create' - reads a Sync object or creates one if it does not exist.\n * <li>'open_existing' - reads an existing Sync object. The promise is rejected if the object does not exist.\n * <li>'create_new' - creates a new Sync object. If the <i>id</i> property is specified, it will be used as the unique name.\n * @property {Number} [ttl] - The time-to-live of the Sync object in seconds. This is applied only if the object is created.\n * @property {Object} [value={ }] - The initial value for the Sync Document (only applicable to Documents).\n * @example <caption>The following example is applicable to all Sync objects\n * (i.e., <code>syncClient.document(), syncClient.list(), syncClient.map(), syncClient.stream()</code>)</caption>\n * // Attempts to open an existing Document with unique name 'MyDocument'\n * // If no such Document exists, the promise is rejected\n * syncClient.document({\n *     id: 'MyDocument',\n *     mode: 'open_existing'\n *   })\n *   .then(...)\n *   .catch(...);\n *\n * // Attempts to create a new Document with unique name 'MyDocument', TTL of 24 hours and initial value { name: 'John Smith' }\n * // If such a Document already exists, the promise is rejected\n * syncClient.document({\n *     id: 'MyDocument',\n *     mode: 'create_new',\n *     ttl: 86400\n *     value: { name: 'John Smith' } // the `value` property is only applicable for Documents\n *   })\n *   .then(...)\n *   .catch(...);\n */\n/**\n * Fired when the access token is about to expire and needs to be updated.\n * The trigger takes place three minutes before the JWT access token expiry.\n * For long living applications, you should refresh the token when either <code>tokenAboutToExpire</code> or\n * <code>tokenExpired</code> events occur; handling just one of them is sufficient.\n * @event Client#tokenAboutToExpire\n * @type {void}\n * @example <caption>The following example illustrates access token refresh</caption>\n * syncClient.on('tokenAboutToExpire', function() {\n *   // Obtain a JWT access token: https://www.twilio.com/docs/sync/identity-and-access-tokens\n *   var token = '<your-access-token-here>';\n *   syncClient.updateToken(token);\n * });\n */\n/**\n * Fired when the access token is expired.\n * In case the token is not refreshed, all subsequent Sync operations will fail and the client will disconnect.\n * For long living applications, you should refresh the token when either <code>tokenAboutToExpire</code> or\n * <code>tokenExpired</code> events occur; handling just one of them is sufficient.\n * @event Client#tokenExpired\n * @type {void}\n */\n"]},"metadata":{},"sourceType":"script"}