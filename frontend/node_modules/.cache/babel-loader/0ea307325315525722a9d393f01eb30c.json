{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass SessionStorage {\n  constructor(config, storage) {\n    this.config = config;\n    this.storageId = null;\n\n    try {\n      this.storage = storage || sessionStorage;\n    } catch (e) {}\n  }\n\n  storageKey(type, key) {\n    return `${this.storageId}::${type}::${key}`;\n  }\n\n  get isReady() {\n    return this.config.sessionStorageEnabled && !!this.storageId;\n  }\n\n  updateStorageId(storageId) {\n    this.storageId = storageId;\n  }\n\n  store(type, id, value) {\n    if (!this.isReady) {\n      return null;\n    }\n\n    return this._store(this.storageKey(type, id), value);\n  }\n\n  read(type, id) {\n    if (!this.isReady) {\n      return null;\n    }\n\n    return this._read(this.storageKey(type, id));\n  }\n\n  remove(type, sid, uniqueName) {\n    if (!this.isReady) {\n      return null;\n    }\n\n    try {\n      this.storage.removeItem(this.storageKey(type, sid));\n\n      if (uniqueName) {\n        this.storage.removeItem(this.storageKey(type, uniqueName));\n      }\n    } catch (e) {}\n  }\n\n  update(type, sid, uniqueName, patch) {\n    if (!this.isReady) {\n      return null;\n    } // Currently cache may have root stored twice - by sid and by uniqueName\n    // Maybe need to create some index if needed\n\n\n    this._apply(this.storageKey(type, sid), patch);\n\n    if (uniqueName) {\n      this._apply(this.storageKey(type, uniqueName), patch);\n    }\n  }\n\n  _store(key, value) {\n    try {\n      this.storage.setItem(key, JSON.stringify(value));\n    } catch (e) {}\n  }\n\n  _read(key) {\n    try {\n      let storedData = this.storage.getItem(key);\n\n      if (storedData) {\n        return JSON.parse(storedData);\n      }\n    } catch (e) {}\n\n    return null;\n  }\n\n  _apply(key, patch) {\n    let value = this._read(key);\n\n    if (!value) {\n      return false;\n    }\n\n    this._store(key, Object.assign(value, patch));\n  }\n\n}\n\nexports.SessionStorage = SessionStorage;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-sync/lib/services/storage.js"],"names":["Object","defineProperty","exports","value","SessionStorage","constructor","config","storage","storageId","sessionStorage","e","storageKey","type","key","isReady","sessionStorageEnabled","updateStorageId","store","id","_store","read","_read","remove","sid","uniqueName","removeItem","update","patch","_apply","setItem","JSON","stringify","storedData","getItem","parse","assign"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass SessionStorage {\n    constructor(config, storage) {\n        this.config = config;\n        this.storageId = null;\n        try {\n            this.storage = storage || sessionStorage;\n        }\n        catch (e) {\n        }\n    }\n    storageKey(type, key) {\n        return `${this.storageId}::${type}::${key}`;\n    }\n    get isReady() {\n        return this.config.sessionStorageEnabled && !!this.storageId;\n    }\n    updateStorageId(storageId) {\n        this.storageId = storageId;\n    }\n    store(type, id, value) {\n        if (!this.isReady) {\n            return null;\n        }\n        return this._store(this.storageKey(type, id), value);\n    }\n    read(type, id) {\n        if (!this.isReady) {\n            return null;\n        }\n        return this._read(this.storageKey(type, id));\n    }\n    remove(type, sid, uniqueName) {\n        if (!this.isReady) {\n            return null;\n        }\n        try {\n            this.storage.removeItem(this.storageKey(type, sid));\n            if (uniqueName) {\n                this.storage.removeItem(this.storageKey(type, uniqueName));\n            }\n        }\n        catch (e) {\n        }\n    }\n    update(type, sid, uniqueName, patch) {\n        if (!this.isReady) {\n            return null;\n        }\n        // Currently cache may have root stored twice - by sid and by uniqueName\n        // Maybe need to create some index if needed\n        this._apply(this.storageKey(type, sid), patch);\n        if (uniqueName) {\n            this._apply(this.storageKey(type, uniqueName), patch);\n        }\n    }\n    _store(key, value) {\n        try {\n            this.storage.setItem(key, JSON.stringify(value));\n        }\n        catch (e) {\n        }\n    }\n    _read(key) {\n        try {\n            let storedData = this.storage.getItem(key);\n            if (storedData) {\n                return JSON.parse(storedData);\n            }\n        }\n        catch (e) {\n        }\n        return null;\n    }\n    _apply(key, patch) {\n        let value = this._read(key);\n        if (!value) {\n            return false;\n        }\n        this._store(key, Object.assign(value, patch));\n    }\n}\nexports.SessionStorage = SessionStorage;\n"]},"metadata":{},"sourceType":"script"}