{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst logger_1 = require(\"./logger\");\n\nclass RegistrationState {\n  constructor(token = '', notificationId = '', messageTypes = new Set()) {\n    this.token = token;\n    this.notificationId = notificationId;\n    this.messageTypes = messageTypes;\n  }\n\n  clone() {\n    return new RegistrationState(this.token, this.notificationId, new Set(this.messageTypes));\n  }\n\n}\n\nexports.RegistrationState = RegistrationState;\n\nfunction setDifference(a, b) {\n  return [...[...a].filter(x => !b.has(x)), ...[...b].filter(x => !a.has(x))];\n}\n\nfunction hasDifference(a, b) {\n  let reasons = new Set();\n\n  if (a.notificationId !== b.notificationId) {\n    reasons.add('notificationId');\n  }\n\n  if (a.token !== b.token) {\n    reasons.add('token');\n  }\n\n  if (setDifference(a.messageTypes, b.messageTypes).length > 0) {\n    reasons.add('messageType');\n  }\n\n  return [reasons.size > 0, reasons];\n}\n\nclass Connector extends events_1.EventEmitter {\n  constructor(config) {\n    super();\n    this.config = config;\n    this.desiredState = new RegistrationState();\n    this.currentState = new RegistrationState();\n    this.hasActiveAttempt = false;\n  }\n\n  async subscribe(messageType) {\n    if (this.desiredState.messageTypes.has(messageType)) {\n      logger_1.log.debug('message type already registered ', messageType);\n      return;\n    }\n\n    this.desiredState.messageTypes.add(messageType);\n    await this.persistRegistration();\n  }\n\n  async unsubscribe(messageType) {\n    if (!this.desiredState.messageTypes.has(messageType)) {\n      return;\n    }\n\n    this.desiredState.messageTypes.delete(messageType);\n    await this.persistRegistration();\n  }\n\n  updateToken(token) {\n    this.desiredState.token = token;\n    this.persistRegistration();\n  }\n\n  async persistRegistration() {\n    if (!this.config.token || this.config.token.length === 0) {\n      logger_1.log.trace('Can\\'t persist registration: token is not set');\n      return;\n    }\n\n    if (this.hasActiveAttempt) {\n      logger_1.log.trace('One registration attempt is already in progress');\n      return;\n    }\n\n    let [needToUpdate, reasons] = hasDifference(this.desiredState, this.currentState);\n\n    if (!needToUpdate) {\n      return;\n    }\n\n    if (!this.currentState.notificationId) {\n      reasons.delete('notificationId');\n    }\n\n    logger_1.log.trace('Persisting registration', reasons, this.desiredState);\n\n    try {\n      this.hasActiveAttempt = true;\n      let stateToPersist = this.desiredState.clone();\n\n      if (stateToPersist.messageTypes.size > 0) {\n        let persistedState = await this.updateRegistration(stateToPersist, reasons);\n        this.currentState.token = persistedState.token;\n        this.currentState.notificationId = persistedState.notificationId;\n        this.currentState.messageTypes = persistedState.messageTypes;\n        this.emit('stateChanged', 'registered');\n      } else {\n        await this.removeRegistration();\n        this.currentState.token = stateToPersist.token;\n        this.currentState.notificationId = stateToPersist.notificationId;\n        this.currentState.messageTypes.clear();\n        this.emit('stateChanged', 'unregistered');\n      }\n    } finally {\n      this.hasActiveAttempt = false;\n      setTimeout(() => this.persistRegistration(), 0);\n    }\n  }\n\n  setNotificationId(notificationId) {\n    this.desiredState.notificationId = notificationId;\n    this.persistRegistration();\n  }\n\n}\n\nexports.Connector = Connector;","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/node_modules/twilio-notifications/lib/connector.js"],"names":["Object","defineProperty","exports","value","events_1","require","logger_1","RegistrationState","constructor","token","notificationId","messageTypes","Set","clone","setDifference","a","b","filter","x","has","hasDifference","reasons","add","length","size","Connector","EventEmitter","config","desiredState","currentState","hasActiveAttempt","subscribe","messageType","log","debug","persistRegistration","unsubscribe","delete","updateToken","trace","needToUpdate","stateToPersist","persistedState","updateRegistration","emit","removeRegistration","clear","setTimeout","setNotificationId"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst logger_1 = require(\"./logger\");\nclass RegistrationState {\n    constructor(token = '', notificationId = '', messageTypes = new Set()) {\n        this.token = token;\n        this.notificationId = notificationId;\n        this.messageTypes = messageTypes;\n    }\n    clone() {\n        return new RegistrationState(this.token, this.notificationId, new Set(this.messageTypes));\n    }\n}\nexports.RegistrationState = RegistrationState;\nfunction setDifference(a, b) {\n    return [...[...a].filter(x => !b.has(x)),\n        ...[...b].filter(x => !a.has(x))];\n}\nfunction hasDifference(a, b) {\n    let reasons = new Set();\n    if (a.notificationId !== b.notificationId) {\n        reasons.add('notificationId');\n    }\n    if (a.token !== b.token) {\n        reasons.add('token');\n    }\n    if (setDifference(a.messageTypes, b.messageTypes).length > 0) {\n        reasons.add('messageType');\n    }\n    return [reasons.size > 0, reasons];\n}\nclass Connector extends events_1.EventEmitter {\n    constructor(config) {\n        super();\n        this.config = config;\n        this.desiredState = new RegistrationState();\n        this.currentState = new RegistrationState();\n        this.hasActiveAttempt = false;\n    }\n    async subscribe(messageType) {\n        if (this.desiredState.messageTypes.has(messageType)) {\n            logger_1.log.debug('message type already registered ', messageType);\n            return;\n        }\n        this.desiredState.messageTypes.add(messageType);\n        await this.persistRegistration();\n    }\n    async unsubscribe(messageType) {\n        if (!this.desiredState.messageTypes.has(messageType)) {\n            return;\n        }\n        this.desiredState.messageTypes.delete(messageType);\n        await this.persistRegistration();\n    }\n    updateToken(token) {\n        this.desiredState.token = token;\n        this.persistRegistration();\n    }\n    async persistRegistration() {\n        if (!this.config.token || this.config.token.length === 0) {\n            logger_1.log.trace('Can\\'t persist registration: token is not set');\n            return;\n        }\n        if (this.hasActiveAttempt) {\n            logger_1.log.trace('One registration attempt is already in progress');\n            return;\n        }\n        let [needToUpdate, reasons] = hasDifference(this.desiredState, this.currentState);\n        if (!needToUpdate) {\n            return;\n        }\n        if (!this.currentState.notificationId) {\n            reasons.delete('notificationId');\n        }\n        logger_1.log.trace('Persisting registration', reasons, this.desiredState);\n        try {\n            this.hasActiveAttempt = true;\n            let stateToPersist = this.desiredState.clone();\n            if (stateToPersist.messageTypes.size > 0) {\n                let persistedState = await this.updateRegistration(stateToPersist, reasons);\n                this.currentState.token = persistedState.token;\n                this.currentState.notificationId = persistedState.notificationId;\n                this.currentState.messageTypes = persistedState.messageTypes;\n                this.emit('stateChanged', 'registered');\n            }\n            else {\n                await this.removeRegistration();\n                this.currentState.token = stateToPersist.token;\n                this.currentState.notificationId = stateToPersist.notificationId;\n                this.currentState.messageTypes.clear();\n                this.emit('stateChanged', 'unregistered');\n            }\n        }\n        finally {\n            this.hasActiveAttempt = false;\n            setTimeout(() => this.persistRegistration(), 0);\n        }\n    }\n    setNotificationId(notificationId) {\n        this.desiredState.notificationId = notificationId;\n        this.persistRegistration();\n    }\n}\nexports.Connector = Connector;\n"]},"metadata":{},"sourceType":"script"}