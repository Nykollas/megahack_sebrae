{"ast":null,"code":"var _jsxFileName = \"/home/ascencion/sebrae_megahack/src/components/Controls/ToogleScreenShareButton/ToggleScreenShareButton.tsx\";\nimport React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport ScreenShare from '@material-ui/icons/ScreenShare';\nimport StopScreenShare from '@material-ui/icons/StopScreenShare';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport useScreenShareToggle from '../../../hooks/useScreenShareToggle/useScreenShareToggle';\nimport useScreenShareParticipant from '../../../hooks/useScreenShareParticipant/useScreenShareParticipant';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\nexport const SCREEN_SHARE_TEXT = 'Share Screen';\nexport const STOP_SCREEN_SHARE_TEXT = 'Stop Sharing Screen';\nexport const SHARE_IN_PROGRESS_TEXT = 'Cannot share screen when another user is sharing';\nexport const SHARE_NOT_SUPPORTED_TEXT = 'Screen sharing is not supported with this browser';\nconst useStyles = makeStyles(theme => createStyles({\n  fab: {\n    margin: theme.spacing(1),\n    '&[disabled]': {\n      color: 'rgba(225, 225, 225, 0.8)',\n      backgroundColor: 'rgba(175, 175, 175, 0.6);'\n    }\n  }\n}));\nexport default function ToggleScreenShareButton(props) {\n  const classes = useStyles();\n  const [isScreenShared, toggleScreenShare] = useScreenShareToggle();\n  const screenShareParticipant = useScreenShareParticipant();\n  const {\n    room\n  } = useVideoContext();\n  const disableScreenShareButton = screenShareParticipant && screenShareParticipant !== room.localParticipant;\n  const isScreenShareSupported = navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia;\n  const isDisabled = props.disabled || disableScreenShareButton || !isScreenShareSupported;\n  let tooltipMessage = SCREEN_SHARE_TEXT;\n\n  if (isScreenShared) {\n    tooltipMessage = STOP_SCREEN_SHARE_TEXT;\n  }\n\n  if (disableScreenShareButton) {\n    tooltipMessage = SHARE_IN_PROGRESS_TEXT;\n  }\n\n  if (!isScreenShareSupported) {\n    tooltipMessage = SHARE_NOT_SUPPORTED_TEXT;\n  }\n\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    title: tooltipMessage,\n    placement: \"top\",\n    PopperProps: {\n      disablePortal: true\n    },\n    style: {\n      cursor: isDisabled ? 'not-allowed' : 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Fab, {\n    className: classes.fab,\n    onClick: toggleScreenShare,\n    disabled: isDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, isScreenShared ? /*#__PURE__*/React.createElement(StopScreenShare, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(ScreenShare, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 51\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/components/Controls/ToogleScreenShareButton/ToggleScreenShareButton.tsx"],"names":["React","createStyles","makeStyles","Fab","ScreenShare","StopScreenShare","Tooltip","useScreenShareToggle","useScreenShareParticipant","useVideoContext","SCREEN_SHARE_TEXT","STOP_SCREEN_SHARE_TEXT","SHARE_IN_PROGRESS_TEXT","SHARE_NOT_SUPPORTED_TEXT","useStyles","theme","fab","margin","spacing","color","backgroundColor","ToggleScreenShareButton","props","classes","isScreenShared","toggleScreenShare","screenShareParticipant","room","disableScreenShareButton","localParticipant","isScreenShareSupported","navigator","mediaDevices","getDisplayMedia","isDisabled","disabled","tooltipMessage","disablePortal","cursor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAgD,0BAAhD;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,oBAAP,MAAiC,0DAAjC;AACA,OAAOC,yBAAP,MAAsC,oEAAtC;AACA,OAAOC,eAAP,MAA4B,gDAA5B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,cAA1B;AACP,OAAO,MAAMC,sBAAsB,GAAG,qBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,kDAA/B;AACP,OAAO,MAAMC,wBAAwB,GAAG,mDAAjC;AAEP,MAAMC,SAAS,GAAGZ,UAAU,CAAEa,KAAD,IAC3Bd,YAAY,CAAC;AACXe,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADL;AAEH,mBAAe;AACbC,MAAAA,KAAK,EAAE,0BADM;AAEbC,MAAAA,eAAe,EAAE;AAFJ;AAFZ;AADM,CAAD,CADc,CAA5B;AAYA,eAAe,SAASC,uBAAT,CAAiCC,KAAjC,EAAgE;AAC7E,QAAMC,OAAO,GAAGT,SAAS,EAAzB;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsClB,oBAAoB,EAAhE;AACA,QAAMmB,sBAAsB,GAAGlB,yBAAyB,EAAxD;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAWlB,eAAe,EAAhC;AACA,QAAMmB,wBAAwB,GAAGF,sBAAsB,IAAIA,sBAAsB,KAAKC,IAAI,CAACE,gBAA3F;AACA,QAAMC,sBAAsB,GAAGC,SAAS,CAACC,YAAV,IAA0BD,SAAS,CAACC,YAAV,CAAuBC,eAAhF;AACA,QAAMC,UAAU,GAAGZ,KAAK,CAACa,QAAN,IAAkBP,wBAAlB,IAA8C,CAACE,sBAAlE;AAEA,MAAIM,cAAc,GAAG1B,iBAArB;;AAEA,MAAIc,cAAJ,EAAoB;AAClBY,IAAAA,cAAc,GAAGzB,sBAAjB;AACD;;AAED,MAAIiB,wBAAJ,EAA8B;AAC5BQ,IAAAA,cAAc,GAAGxB,sBAAjB;AACD;;AAED,MAAI,CAACkB,sBAAL,EAA6B;AAC3BM,IAAAA,cAAc,GAAGvB,wBAAjB;AACD;;AAED,sBACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAEuB,cADT;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,WAAW,EAAE;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAHf;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEJ,UAAU,GAAG,aAAH,GAAmB;AAAvC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAEX,OAAO,CAACP,GAAxB;AAA6B,IAAA,OAAO,EAAES,iBAAtC;AAAyD,IAAA,QAAQ,EAAES,UAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,cAAc,gBAAG,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBAAyB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD1C,CAHF,CANF,CADF;AAgBD","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nimport Fab from '@material-ui/core/Fab';\nimport ScreenShare from '@material-ui/icons/ScreenShare';\nimport StopScreenShare from '@material-ui/icons/StopScreenShare';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport useScreenShareToggle from '../../../hooks/useScreenShareToggle/useScreenShareToggle';\nimport useScreenShareParticipant from '../../../hooks/useScreenShareParticipant/useScreenShareParticipant';\nimport useVideoContext from '../../../hooks/useVideoContext/useVideoContext';\n\nexport const SCREEN_SHARE_TEXT = 'Share Screen';\nexport const STOP_SCREEN_SHARE_TEXT = 'Stop Sharing Screen';\nexport const SHARE_IN_PROGRESS_TEXT = 'Cannot share screen when another user is sharing';\nexport const SHARE_NOT_SUPPORTED_TEXT = 'Screen sharing is not supported with this browser';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      margin: theme.spacing(1),\n      '&[disabled]': {\n        color: 'rgba(225, 225, 225, 0.8)',\n        backgroundColor: 'rgba(175, 175, 175, 0.6);',\n      },\n    },\n  })\n);\n\nexport default function ToggleScreenShareButton(props: { disabled?: boolean }) {\n  const classes = useStyles();\n  const [isScreenShared, toggleScreenShare] = useScreenShareToggle();\n  const screenShareParticipant = useScreenShareParticipant();\n  const { room } = useVideoContext();\n  const disableScreenShareButton = screenShareParticipant && screenShareParticipant !== room.localParticipant;\n  const isScreenShareSupported = navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia;\n  const isDisabled = props.disabled || disableScreenShareButton || !isScreenShareSupported;\n\n  let tooltipMessage = SCREEN_SHARE_TEXT;\n\n  if (isScreenShared) {\n    tooltipMessage = STOP_SCREEN_SHARE_TEXT;\n  }\n\n  if (disableScreenShareButton) {\n    tooltipMessage = SHARE_IN_PROGRESS_TEXT;\n  }\n\n  if (!isScreenShareSupported) {\n    tooltipMessage = SHARE_NOT_SUPPORTED_TEXT;\n  }\n\n  return (\n    <Tooltip\n      title={tooltipMessage}\n      placement=\"top\"\n      PopperProps={{ disablePortal: true }}\n      style={{ cursor: isDisabled ? 'not-allowed' : 'pointer' }}\n    >\n      <div>\n        {/* The div element is needed because a disabled button will not emit hover events and we want to display\n          a tooltip when screen sharing is disabled */}\n        <Fab className={classes.fab} onClick={toggleScreenShare} disabled={isDisabled}>\n          {isScreenShared ? <StopScreenShare /> : <ScreenShare />}\n        </Fab>\n      </div>\n    </Tooltip>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}