{"ast":null,"code":"import { LocalVideoTrack, RemoteVideoTrack } from 'twilio-video';","map":{"version":3,"sources":["/home/ascencion/sebrae_megahack/src/types.ts"],"names":["LocalVideoTrack","RemoteVideoTrack"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,gBAA1B,QAA+D,cAA/D","sourcesContent":["import { LocalVideoTrack, RemoteVideoTrack, TwilioError } from 'twilio-video';\n\ndeclare module 'twilio-video' {\n  interface LocalParticipant {\n    setBandwidthProfile: (bandwidthProfile: BandwidthProfileOptions) => void;\n    publishTrack(track: LocalTrack, options?: { priority: Track.Priority }): Promise<LocalTrackPublication>;\n  }\n\n  interface VideoCodecSettings {\n    simulcast?: boolean;\n  }\n\n  interface LocalVideoTrack {\n    isSwitchedOff: undefined;\n    setPriority: undefined;\n  }\n\n  interface RemoteVideoTrack {\n    isSwitchedOff: boolean;\n    setPriority: (priority: Track.Priority | null) => void;\n  }\n\n  interface VideoBandwidthProfileOptions {\n    trackSwitchOffMode?: 'predicted' | 'detected' | 'disabled';\n  }\n}\n\ndeclare global {\n  interface MediaDevices {\n    getDisplayMedia(constraints: MediaStreamConstraints): Promise<MediaStream>;\n  }\n}\n\nexport type Callback = (...args: any[]) => void;\n\nexport type ErrorCallback = (error: TwilioError) => void;\n\nexport type IVideoTrack = LocalVideoTrack | RemoteVideoTrack;\n"]},"metadata":{},"sourceType":"module"}